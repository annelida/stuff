#+STARTUP: hidestars
#+TAGS: STUDY(s) WORK(w)

 First thing first, hence it is necessary to study how to:

* English
** Vocabulary
** Quick Grammar
*** Adjectives ending in -ed and -ing

    -ed adjectives

    Adjectives that end 'ed' describe emotions - they tell us how people
    feel about something.

    - I was bored in the maths lesson. I almost feel asleep.
    - He was surprised to see Helen. She'd told him she was going to
      Australia.
    - Feeling tired and depressed, he went to bed.

    -ing adjectives

    Adjectives that end '-ing' describe the thing that causes the emotion -
    a boring lesson makes you feel bored.

    - Have you seen that film? It's absolutely terrifying.
    - I could listen to him for hours. He's one of the most interesting
      people I've ever met.
    - I can't eat this! It's disgusting! What is it?

      Remember that people can be boring but only if they make other
      people feel bored.

      - He talks about the weather for hours. He’s so boring.
      - NOT I was very boring at the party so I went home.

     Here are some more adjectives that can have both an ‘-ed’ and an
     ‘-ing’ form

      amused
      amusing
      annoyed
      annoying
      confused
      confusing
      disappointed
      disappointing
      excited
      exciting
      exhausted
      exhausting
      frightened
      frightening
      satisfied
      satisfying
      shocked
      shocking
*** Articles 1

    Most mistakes with articles are made through breaking one of these rules.

    1. When we say what people's jobs are, we use a/an

       She's an architect.
       He's a doctor.
       My grandfather was a teacher.

    2. Singular, countable nouns always have an article - a/an or the -
       or another determiner (my, your, this, that etc.)

       Remember that we use the indefinite article - a/an - when we talk
       about something that is not definite.

       I saw a good film yesterday. The listener doesn't know which film.
       There's a man at the door. We don't know who the man is.
       Do you want a drink? It's not a particular drink.

       ... and we use the definite article - the - when we talk about
       something more certain.

       I'm going to take the dog for walk. The dog is a pet - it's not
       just any dog.
       Have you seen the car key? Speaker and listener know which car.
       It's not just any car.
       They live in the house opposite ours. There's only one house opposite.
       It's not any house.

    3. When we talk about things in general we usually use a plural noun
       or an uncountable noun with no article.

       Birds eat worms. NOT The birds eat the worms.
       Water flows downhill.
       Kangaroos live in Australia.

       BUT We went to the zoo and saw the kangaroos. These are particular
       kangaroos - not kangaroos in general.
*** Articles 2

    Special places

    My son's at university but my daughter still goes to school.
    He was sent to prison for 10 years.
    Now that winter's here I find it difficult to get out of bed.
    I go to work by bus I go home om foot.

    In expressions with a number of places there is no article after a
    preposition.

    These places include: to/at school, to/at university/collage,
    to/in church, to/in/out of prison, to/in hospital, to/in.out of bed,
    to/at work, at home.

    NOTE: While we say 'go to school' and 'go to work' etc, the expression
    'go home' has neither 'the' nor 'to'.

    Transport

    I go to work by bus but I go home on foot.
    I hate travelling by train.

    Modes of transport (by bus, by train, by car, by plane, by bicycle)
    don't have an article. Notice that *on foot* is different.

    Geography

    No article - continents (Africa, Asia etc.) countries (France, Germany,
    Slovakia etc - but the Slovak Republic, the United States, the United
    Kingdom) towns & cities (Bratislava, London etc.) lakes (Lake Victoria,
    Lake Balaton etc.) universities (Oxford University, Nitra University etc.)

    With 'the' - seas & oceans (the Atlantic, the Mediterranean etc.)
    mountain ranges (the Himalayas, the Tatras) rivers (the Amazon,
    the Danube etc.)
*** Adjectives (gradable / non-gradable)
    Gradable

    Gradable adjectives are adjectives like 'cold' 'hot' and 'frightened'.
    You can be very cold or a bit cold. Gradable adjectives show that
    something can have different degrees.

    Non-gradable

    Non-gradable adjectives are adjectives like 'married' or 'wooden'.
    You can't be very married or a bit married. Non-gradable adjectives do
    not have different degrees.

    Adjectives like 'terrifying', 'freezing' 'amazing' are also non-gradable
    adjectives. They already contain the idea of 'very' in their definitions -
    'freezing' mean 'very cold' etc.

    Using adverbs of degree

    When we use adverbs of degree to modify adjectives we usually have to use
    different adverbs for gradable and non-gradable adjectives.

    NOT I'm completely hot.
    NOT It was very fantastic.

    With gradable adjectives

    It's a bit cold in here. Shall I turn the fire on?
    He's very interested in history. Why don't you buy him a history book?
    This exercise is really difficult. I don't know any of the answers.
    I'm extremely tired. I'm going to bed.

    The adverbs a *bit*, *very*, *really*, *extremely* and *quite* can all
    be used with gradable adjectives.

    With non-gradable adjectives

    It's absolutely freezing in here. Shall I turn the fire on?
    He's Completely fascinated by history. Why don't you buy him a history
    book?
    This exercise is absolutely impossible.
    That film is really terrifying. Don't go and see it on your own.

    The adverbs *absolutely* and *completely* can be used with non-gradable
    adjectives.

    Notice that *really* can be used with both gradable AND no-gradable
    adjectives.
*** As and Like

    We use *as* to talk about job or function.

    I worked as a shop assistant for 2 years when I was a student.
    He used his shoe as a hammer to hang the picture up.

    In comparison, the structure 'as adjective as' is often used.

    He's not as tall as his brother.
    She ran as fast as she could.

    In the following comparisons *as* is a conjunction - it's followed by
    a clause with a subject and a verb.

    He went to Cambridge University, as his father had before him.
    She's a talented writer, as most of her family are.

    Like

    In the following comparisons, like is a preposition and it's followed
    by a noun or a pronoun.

    I've been working like a dog all afternoon.
    None of my brothers are much like me.
    She looks just like her mother.

    Like and As if/As though

    *Like, as if, as though* can all be used to make comparisons. There is
    no difference in meaning among the 3 forms.

    You look as if you've seen a ghost.
    You talk as though we're never going to see each other again.
    It looks like it's going to rain.

    Expressions with 'as'

    The following expressions all use *as*

    As you know, classes restart on January 15th.
    I tired using salt as you suggested but the stain still didn't come out.
    As we agreed the company will be split 50/50 between us.
    Their house is the same as our.
*** British English and American English
    British people and American people can always understand each other -
    but there are a few notable differences between British English and
    American English

    Grammar

    Americans use the present perfect tence less than speaker of British
    English and a British teacher might mark wrong some things that an
    American teacher would say are correct.

    US Did you your homework yet?
    Brit. Have you done your homework yet?

    US I already ate.
    Brit. I've already eaten.

    In British English, 'have got' is often used for the possesive sense of
    'have' and 'have got to' is informally used for 'have to'. This is much
    less common in American English.

    Brit. I've got two sisters.
    US I have two sisters.

    Brit. I've got to go now.
    US I have to go now.

    There are a number of other minor grammatical differences.

    angry (Brit.) = mad (US)
    autumn = fall
    boot (of a car) = trunk
    chemist’s = drug store
    cupboard = closet
    flat = apartment
    lift = elevator
    nappy = diaper
    pavement = sidewalk
    petrol = gas/gasoline
    rubbish = trash
    tap = faucet
    trousers = pants

    Spelling

    There are also a number of different spelling rules between British
    English and American English.

    1. Some words that end in '-tre' in British English end in '-ter' in
       American English:

       US theater, center
       Brit. theatre, centre

    2. Some words that end in '-our' in British and '-or' in American
       English:

       US color, labor
       Brit. colour, labour

    3. Some words are shorter in American English than in British English.

       US catalog, program
       Brit. catalogue, programme
*** Capital letters and apostrophes

    Capital letters

    We use capital letters for the days of the week but not for seasons.

    - One Saturday in autumn.

    We use capital letters for planets - but not the earth, sun or moon,

    - Mercury is closer to the sun than the earth is.

    We use the capital letters for countries and for 'nationality' words.

    - David is from Germany but Jana is Slovak.
    - I bought the camera in Hong Kong but it's Japanese.

    And we use capital letters when we talk about languages as school
    subjects - but others subjects don't have a capitall letter.

    - She's got exams in English, French, history and geagraphy this year.

    Apostrophes

    We use an apostrophe to show either possession or that there is a letter
    missing (e.g. the apostrophe in the 'she's' shows that is
    letter missing in the 'she is')

    We use apostrophes with people or animals to show possession.

    - My sister's house.
    - The dog's blanket.

    For things we use 'of'(the front of the car, NOT the car's front.)

    The positions of the apostrophe depends on whether the noun is singular
    or plural.

    - My friend's house. This is about one friend.
    - My friends' house. This is about two or more friends who share a house.

    If a plural noun does not end in 's' (e.g. men, people, children) we use
    's to show possession.

    - The children's bedroom.
    - A pair of women's sunglasses.

    We also use an apostrophe in some time expression.

    - two week's holiday
    - ten years' experience.
*** Conditionals 1

    Conditionals are sentences with two clauses - an 'if clause and a main
    clause - that are closely related. Conditionals sentences are often
    divided into different types.

    Zero conditional

    We use the zero conditional to talk about things that are always true.

    - If you heat water, it boils.
    - When the sun goes down, it gets dark.
    - It light up if you push that button.

    The present simple is used in both clauses.

    First conditional

    We use the first conditional when we talk about real and possible
    situations.

    - I'll go shopping on the way home if I have time.
    - If it's a nice day tomorrow we'll go to the beach.
    - If Arsenal win they'll be top of the league.

    In first conditional sentences, the structure is usually if + present
    simple and will + infinitive. It's not important which clause comes
    first.

    Second conditional

    The second conditional is used to talk about 'unreal' or impossible
    things.

    - If I won a lot of money I'd buy a big house in the country.
    - Where would you live if you could live anywhere in the world?
    - If you didn't smoke so much you'd feel a lot better.

    The structure is usually if + past simple and would + infinitive.
    It's not important which clause comes first.

    Look at the difference between the first and second conditionals.

    - In January: If it snows tomorrow I'll go skiing. It might snow
      tomorrow.
    - In August: If it snowed tomorrow I'd go skiing. It almost certainly
      won't snow tomorrow.

      Note: Although many conditional sentences us if + will/would,
      conditional sentences can also use other words instead of 'if' -
      e.g. 'when' 'as soon as' 'in case' Other modal verbs can be used
      instead of 'will/would' - e.g. 'can/could', 'may' 'might'.
*** Conditionals 2

    Third conditionals and mixed conditionals

    Conditionals are sentences with two clauses - an 'if clause and a main
    clause - that are closely related. Conditional sentences are often
    divided into different types.

    Third conditional

    Third conditional sentences describe the past. They describe something
    that didn't happen.

    - If I'd studied harder at school I would have gone to university.
    He didn't study very hard and he didn't go to university.
    - We wouldn't have got lost if you hadn't given me the wrong directions.
    She wasn't given th correct directions and she didn't find her way.

    - She might have finished the exam if she’d had more time.
    She didn't finish the exam and she didn't have more time.

    In third conditional sentences, the structure is usually if + past perfect
    and would + perfect infinitive (e.g. have done). It’s not important which
    clause comes first.

    Notice that other modal verbs can be used instead of ‘would’ (e.g. ‘could’,
    ‘might’ ‘may’)


    Mixed conditionals

    In mixed conditionals sentences the time in the 'if' clause is not the
    same as the time in the main clause. There can be various combinations.

    - If he'd gone to university he might have a better job.

      He didn't go to university (past)
      He doesn't have a very good job. (present)
      Theis sentence shows the present consequences of a past action.

    - If I'd won the competition I'd be going to Florida next week.

      She didn't win the competition (past)
      She isn't going to Florida (future)
      This sentence shows the future consequences of a past action.
*** Countable & Uncountable nouns 1
    Countable nouns

    - There is a cat in the garden.
    - There are some birds in the trees.

    For positive sentences we can use a/an or some (with a plural verb
    form)

    - There isn't a dog in the garden.
    - There aren't any birds in the tree.

    For negatives we can use a/an or any (with a plural verb form).

    - Is there an orange on the tree?
    - Are there any chairs in the garden?
    - How many chairs are there?

    In questions we use a/an, any or how many.

    Uncountable nouns

    - There is some milk on the floor.

    Uncountable nouns have no plural. The verb form is singular and we
    use some.

    - Is there any sugar?
    - How much wine is there?

    In questions we can use *any* or *how much*.

    Other expression of quantity

    - There are a lot of apples on the trees.
    - There is a lot of snow on the road.

    A *lot of* can be used with both countable and uncountable nouns.

    - Bill Gates has much money.

    Notice that we don't usually use 'much' or 'many' in positive
    sentences. We use 'a lot of'.

    - Bill Gates has a lot of money.
    - There are a lot of carrot but there aren't many potatoes.

    We use *not many* with countable nouns and *not much* with
    uncountable nouns.

    Some nouns can be both countable and uncountable, depending on how
    they are used, and some nouns are commonly confused.
*** Countable & Uncountable nouns 2

    Some words can be both countable and uncountable depending on how
    they are used.

    - Would you like a chocolate?
    - Would you like some chocolate?

    In a *box of chocolates*, the chocolates are countable and you can
    take *one*. When you have *a bar of chocolate* the *chocolate* is
    uncountable and you can take *some*.

    There are several others nouns that can be both countable and
    uncountable.

    - Can I have a glass of water, please?
    - There's some broken glass on the pavement.

    'Glass' is one. Many foodstuffs can be countable or uncountable.
    Think about the difference between *an ice cream* and *some ice
    cream* and *a coffee* and *some coffee*

    'few/a few' and 'little/ a little'

    We use *few* and *a few* with countable nouns and we use *little*
    and *a little* with uncountable nouns.

    - A few friends are coming round for dinner tonight.
    - We've got a little time before our train leaves. Shall we go to
      a museum?

    A *few* and *a little* both mean 'some'. They have a positive
    meaning.

    - I've got very friends here. I feel really lonely.
    - We've got very little time - hurry up or we'll miss the train.

    *Few* and *little* both mean "almost none". They have a negative
    meaning.
*** Comparing and contrasting - modifying comparatives

    When we want to talk about similarities and differences we can use
    adjectives in their comparative forms

    - Max is taller than Judy.
    - You're more intelligent than me.

    or we can use (not) as (adjective) as

    - Her hair is as long as mine.
    - This one's not as interesting as his first book. Remember that
      'not as interesting as 'mean 'less interesting than'.

    We can also use expressions like *different from*, *similar to*
    and *same as*.

    - She's very different from her sister. They're very different.
    - Sri Lankan food is similar to Indian food. They're similar.
    - Andrew is the same age as Lily. Their ages are the same. We use
      same with nouns.

    Modifying comparisons

    A big difference - much, a lot, far

    We can modify comparative adjectives to show that there is a big
    difference between things.

    - Sales in July were much higher than sales in June.
    - She's a lot taller than you.
    - This one's far more expensive than the blue one.

    We can also say that things are completely or totally different
    from each others.

    - They may be twins but they're completely different from each
      other.

     A small difference - slightly, a little, a bit, a not much

     We can show there is a small difference.

      - Sales in August were slightly lower than sales in July.
      - You're a bit younger than me.
      - These are not much more expensive than those.

      No difference - exactly, more or less, roughly

      We can show that there is no difference or almost no difference.

    - He's exactly the same age as me. (No difference)
    - The figures for December are more or less the same as the
      figures for November. (a tiny difference)
*** Enough
    'Enough' can qualify an adjective or an adverb or it can go with a
    noun or even act a pronoun.

    With adjectives and adverbs

    - She isn't tall *enough* to be a ballet dancer.
    - I'm afraid your work just isn't good *enough*.

    - I couldn't write quickly *enough* and I ran out of time.
    - I haven't been to lessons often *enough* to have really learnt
      much.

    *Enough* comes after adjectives and adverbs.

    With nouns

    - There isn't *enough* bread to make sandwiches.
    - Have you got *enough* money?
    - There aren't *enough* nails.

    *Enough comes before nouns*

    *Enough of*

    - There isn't *enough* of bread

    We don't use *enough of* unless there is a determiner (an article,
    this/that, my/your/his etc). We use *enough* of when is a
    determiner.

    - I've had *enough of* your nonsense! 'Your' is a determiner here.
    - I haven't seen *enough of* the film to really form an opinion.

    *Enough* can also be used without a noun.

    - That's enough! Be quiet!
    - Enough is enough.

    With adjective and noun

    When 'enough' is used with an adjective and a noun, two position
    are possible but the meaning changes. Look at these two sentences.

    - We haven't got big enough nails. None of the nails are as big as
      we need.
    - We haven't got enough big nails. We have some big nails but we
      need more.

    When *enough* comes between the adjective and the noun (big enough
    nails) it qualifies the adjective - it tells us that the nails
    aren't big enough. When *enough* comes before the adjective it
    qualifies the noun phrase - it tells us that there aren't enough
    nails.
*** Future continuous & Future perfect

    Future continuous

    - Don't ring at 8 o'clock. I'll be watching Who Wants to be a
      Millianaire.
    - This time tomorrow we'll be sitting on the beach. I can't wait!

    We use the future continuous to talk about something that will be
    in progress at or around a time in the future.

    - Don't phone grandma now, she'll be having dinner.
    - The kids are very quiet. They'll be doing something wrong. I
      know it!

    These sentences are not about the future but we can use the future
    continuous to talk about what we assume is happening at the
    moment.

    Future Perfect

    - Do you think you will have finished it by next Thursday?
    - In 5 years time I'll have finished university and I'll be able
      to earn some money at last.

    We use the future perfect to say that something will be finished
    by a particular time in the future.

    We often use the future perfect with 'by' or 'in'

    - I think astronauts will have landed on Mars by year 2020.
    - I'll have finished in an hour and then you can use the computer.

    'By' means 'not later than a particular time' and 'in' means
    'within a period of time'. We don't know exactly when something
    will finish.

    - I promise I'll have done all the work by next Saturday.

    We don't know exactly when he will finish the work - maybe
    Thursday, maybe Friday - but definitely before Saturday.
*** Future plans
    We use different verb forms to talk about our plans for the
    future - depending on what kind of plans it is.

    will

    We use *will* to talk about plans decided at the moment of
    speaking.

    - I forgot to phone my mum. I'll do it after dinner. He decided to
      phone his mum when she is speaking - she didn't have a plan.
    - I can't decide what to wear tonight, I know. I'll wear my black
      dress.
    - There's no milk in the fridge. I'll buy some when I go to the
      shops.

    going to

    We use *going to* to talk about plans decided before the moment of
    speaking.

    - I'm going to phone my mum after dinner. I told her I'd call at 8
      o'clock. He decided to phone his mum before he speaks - he
      already had a plan.
    - I'm going to wear my black dress tonight. I need to pick it up
      from the cleaners.
    - I know there's no milk. I'm going to get some. It's on my
      shopping list.

    present continuous

    We can also use the *present continuous* to talk about future
    plans. We usually use it when the plans is an 'arrangement' - more
    than one person is involved and we know the time and place.

    - I'm meeting Jane at 8 o'clock on Saturday.
    - We're having a party next Saturday. Would you like to come?
    - Are you doing anything interesting this weekend? We often use
      the present continuous to ask about people's future plans.
*** in spite of / despite /although

    In spite of / despite

    After *in spite of* and *despite* we use a noun or pronoun.

    - We enjoyed our camping holiday in spite of the rain.
    - Despite the pain in his leg he completed the marathon.
    - Despite having all the necessary qualifications, they didn't
      offer me the job.

    The only difference between *in spite of* and *despite* is the
    'of'.

    - Despite of the bad weather, there was a large crowd at the
      match.

    Although

    After although we use a subject and a verb.

    - We enjoyed  our camping holiday although it rained every day.
    - Although he worked very hard, he didn't manage to pass the exam.
    - The holiday was great although the hotel wasn't very nice.

      We can use *in spite of* and *despite* with a subject and verb
      if the include the expression 'the fact that'.

    - In spite of the fact that he worked very hard, he didn't manage
      to pass the exam.
    - Despite the fact that he worked very hard, he didn't manage to
      pass the exam.

     Even though

     *Even though* is a slightly stronger form of a although.

      - We decided to buy the house even though we didn't really have
	enough money.
      - You keep making that stupid noise even though I've asked you
        to stop three times.
*** Just, yet, still, already
    This words are often used with the *present perfect* tense
    although *yet*, *still* and *already* can all be used with other
    tenses.

    Just

    'Just' is usually used only with the present perfect tense and it
    means 'a short time ago'.
    - I've just seen Susan coming out of the cinema.
    - Mike's just called. Can you ring him back please?
    - Have you just taken my pen? Where has it gone?

    In the present perfect, 'just' comes between the auxiliary verb
    ('have') and the past participle.

    Yet

    'Yet' is used to talk about something which is expected to happen.
    It means 'at any time up to now'. It is used in questions and
    negatives.

    - Have you finished your homework yet? The speaker expect that the
      homework will be finished.
    - I haven't finished it yet. I'll do it after dinner.

    'Yet' usually comes at the end of the sentence.

    Still

    'Still' is used to talk about something that hasn't finished -
    especially when we expected it to finish earlier.

    - I've been waiting for over an hour and the bus still hasn't
      come.
    - You promised to give me that report yesterday and you still
      haven't finished it.

    'Still' usually comes in 'mid-position'

    *Still* is often used with other tenses as well as the present
    perfect.

    - I've still got all those letters you sent me.
    - Are you still working in the bookshop?

    Already

    'Already' is used to say that something has happened early - or
    earlier than it might have happened.

    - I've already spent my salary and it's two weeks before pay day.
    - The train's already left! What are we going to do?
*** Modals 1

    Permission, Prohibition, Obligation, No obligation

    Permission

    *Can* is often used to ask for and give permission.

    - Can I sit here?
    - You can use my car if you like.
    - Can I make a suggestion?

    We can also use *may* and *could* to ask for and give permission
    but *can* is used more often.

    Prohibition

    Both *can't* and *mustn't* are used to show that something is
    prohibited - it is not allowed.

    - You can't park here, sir.
    - You can wear jeans but you can't wear trainers in that bar.
    - You mustn't speak when the teacher is speaking.

    *Can't* tells us that something is against the rules. *Mustn't* is
    usually used when the obligation comes from the person who is
    speaking.

    Obligation

    *Have to* and *must* are both used to express obligation. There is
     a slight difference between the way they are used.

     *Have to* shows us that the obligation comes from somebody else.
     It's a law or a rule and the speaker can't change it.

     - Do you have to wear a uniform at your school?
     - John can't come because he has to work tomorrow.
     - In Britain you have to buy a TV licence every year.

     *Must* shows us that the obligation comes from the speaker. It
     isn't a law or a rule.

     - I must call my dad tonight.
     - You must hand in your homework on Tuesday or your mark will be
       zero.
     - You must come and visit us the next time you come to London.

     No obligation

     We use don’t have to to show that there is no obligation. You can do
     something if you want to but it’s not compulsory.

     - You don’t have to wear a tie in our office. You can wear a tie
       if you want to but it’s OK if you don’t.
     - It’ll be nice if you do but you don’t have to come with me if you don’t
     want to.
     - You don’t have to dress up for the party. Wear whatever you feel
     comfortable in.
*** Modals - deduction

    We use modals verbs to say how we are about something.

    1 must

    We use *must* when we feel sure that something is true because there's
    very strong evidence.

    - He must live near here because he comes to work on foot.
    - Come inside and get warm – you must be freezing out there.
    - You’re a zookeeper? That must be very interesting.

    Notice that must is followed by an infinitive without ‘to’.

    2 might, may, could

    We use might, may or could to say that we think something is possible but
    we’re not sure.

    - Did you hear that? I think there might be a burglar downstairs.
      She’s not sure there’s a burglar but she thinks it’s possible.
    - We’ll try to get there early but we may arrive late if there’s a lot of
     traffic.
    - Don’t put it up there. It could fall off and hit someone.

    Might, may and could are also followed by an infinitive without ‘to’.

    3 can’t

    We use can’t when we feel sure something is not true.

    - It can’t be a burglar. All the doors and windows are locked.
      He doesn’t
 know it’s not a burglar but he feels sure it’s not.
    - It can’t be far away now. We’ve been driving for hours. Where’s the map? 
    - Really? He has to work on Christmas Day? He can’t feel very happy about
     that.

    Like the other verbs, can’t is followed by an infinitive without ‘to’.

    Remember that all of these modal verbs – must, might, may, could and can’t
    have other uses.
*** Modals - deduction (past)

    In the same way that we use modal verbs to say how certain we are
    about things in the present we can also use them to speculate
    about the past.

    *Have + past participle* ('have done', 'have been', 'have stolen'
     etc.) is called the *perfect infinitive*. When we use modal verbs
     to talk about the present they are followed by an infinitive
     without 'to'. When we use modal verbs to talk about the past they
     are followed by a perfect infinitive.

     must + perfect infinitive

     We use *must + perfect infinitive* when we feel sure about
     something in the past.

     - You must have been delighted when you heard you'd won the
       lottery.
     - The thieves must have come in through the window. Look - it's
       still open.
     - Oh no! Where's my car? Someone must have stolen it!

     might/may/could + perfect infinitive

     We use *might*, *may* or *could* with the *perfect infinitive* to
     say that we think something was possible but we aren't sure.

     - The thieves might have escaped by car but we can't be sure.
     - He should be hour now. He may have been delayed by a traffic
       jam or something.
     - I can't find my purse. I could have left it in the supermarket
       but I just don't know.

     can't + perfect infinitive

     We use *can't + perfect infinitive* when we feel sure something
     didn't happen in the past.

     - I though I saw John in town this morning but it can't have been
       him - he's in Greece this week.
     - I can't have left it in the supermarket - I had it on the bus
       on the way home.
     - You can't have read the instruction properly. They're perfectly clear.
*** Multi-words verbs

    There are very many multi-words verbs (sometimes called phrasal
    verbs) in English and it's very difficult to learn them all.

    Multi-word verbs are made up of a verb and a particle or,
    sometimes, two particles.

    Separable

    - He *cut* the tree *down*.
    - He *cut down* the tree.

    With separable verbs the verb and particle can be apart or
    together - the meaning doesn't change.

    Look at another example:

    - Can you *turn* the radio *down* please?
    - Can you *turn down* the radio please?

    However, when we use a pronoun - usually 'it' in place of the
    subject - it must come between the verb and the particle in
    separable multi-word verbs.

    - Can you *turn* it *down* please?
    - Can you *turn down* it please? is NOT possible.

    Non-separable

    - Who *looks after* the baby when you're at work?

    In non-separable verbs the verb and particle cannot be
    separated.

    - Who looks the baby after is NOT possible.

    When there is a pronoun the verb and particle remain together.

    - Who looks after her when you’re at work?

    With two particles

    - Who came up with that idea?
    - I don’t know how you put up with it.

    There are a few verbs with two particles and they act like inseparable
    multi-word verbs.

    Intransitive

    - What time do you get up?
    - The plane took off and rose into the sky.

    Intransitive verbs do not have an object. Multi-word verbs can also be
    intransitive.
*** Participle clauses
    Participle clauses are a form of adverbial clause which enabled us
    to say information in a more economical way. We can use participle
    clauses when the participle and the verb in the main clause have
    the same subject. For example:

    Waiting for John, I made some tea.

    Waiting for John, the kettle boiled.

    Forming participle clauses

    Participle clauses can be formed with the *present participle*
    (-ing form of the verb) or *past participle*. Participle clauses
    with past participles have a passive meaning:

    *Shouting loudly*, Peter walked home. (Peter was shouting)
    *Shouted* at loudly, Peter walked home. (Someone was shouted at
    Peter)

    If we wish to emphasise that one action was before another then we
    can use a *perfect participle* (having + past participle):

    *Having won* the match, Susan jumped for joy.
    *Having been told* the bad news, Susan sat down and cried.

    The meaning and use of participle clauses

    Participle clauses give information about conditions, reason,
    result or time.

    For example:

    Condition (in place of an if-condition):

    Looked after carefully, this coat will keep you warm through many
    winters.

    Compare: If you look after it carefully, this coat will keep you
    warm through many winters.

    Reason (in place of words like so or therefore):

    Wanting to speak to him about the contract, I decided to arrange
    a meeting.

    Compare: I wanted to speak to him about the contract so I decided
    to arrange a meeting.

    Result (in place of words like because or as a result):

    I had no time to read my book, having spent so long doing my
    homework.

    Compare: I had no time to read my book, having spent so long doing
    my homework.

    Compare: I had no time to read my book because I had spent so long
    doing my homework.

    Time (In place of words like when, while or as soon as):

    Sitting at the cafe with my friends, I suddenly realised that I
    had left the oven on at home.

    Compare: While I was sitting at the cafe with my friends, I
    suddenly realised that I had left the oven on at home.
*** Past ability & possibility

    In the present tense we use 'can' to talk about a general ability.
    I can swim - and also for ability at a particular moment.
    I can see you!
    The rules for talking about past abilities are different.

    General ability

    We use could to talk about general abilities in the past.

    - He could speak fluent French when he was 5.
    - I could read before I started school.

    Ability on one occasion

    However, when we talk about ability on one particular occasion, we
    can't use could

    - The burglar was able to get in through the bathroom window.
    - The burglar managed to get in through the bathroom window.

    We have to use *was able* or *managed to*. We can't use *could*.

    - The burglar could get in through the bathroom window.

    Ability on one occasion - negative

    When we talk about a particular occasion when something wasn't
    possible, we can use *wasn't/weren't able to*, *didn't manage to*,
    or *couldn't*

    - The burglar wasn't able to get in through the window.
    - The burglar didn't manage to get in through the window.
    - The burglar couldn't get in through the window.

    Hypothetical past ability

    Sometimes things were possible in the past but didn't happen.

    - I could have gone to university but I decided to get a job.
    - I would have been able to win the race but I fell over.

    We use *could have (+ past participle)* or *would have been able
    to* to talk about these hypothetical events. They can be used in
    the positive and the negative.

    - I couldn't have done it without your help.
    - I wouldn't have been able to afford it even if it had been for sale.
*** Past habit - used to/would/past simple

    When we talk about things that happened in the past but don't
    happen anymore we can do it in different ways.

    Used to

    - We used to live in New York when I was a kid.
    - There didn't use to be a petrol station there. When was it
      built?

    We can use 'used to' to talk about past states ...

    - I used to go swimming every Thursday when I was at school.
    - I used to smoke but I gave up a few years ago.

    ... or we can use 'used to' to talk about repeated past actions

    Remember that 'used to' is only for past states/actions that don't
    happen now - we can't use it for things that still happen now.
    Also, 'used to + infinitive' should not be confused with 'be/get
    used to + 'ing' form'.
*** Predicting the future

    We can say how sure we feel about the future by using modal verbs.
    There are also other phrases we can use to express our certainty
    or uncertainty about future events.

    Modal verbs

    We can combine modal verbs with adverbs to show a greater or
    lesser degree of certainly.

    - People will definitely work longer hours in the future.
    - People definitly won't work longer hours in future.

    Both of these sentences show that the speaker is sure.

    - You'll probably enjoy this film.
    - You probably won't enjoy this film.

    The speaker is thinks (s)he's right but isn't 100% sure.

    - She might pass the exam or she might not pass. I don't know.

    The speaker isn't sure at all. You could also use *could* or *may*
    instead of *might*.

    Other expressions

    Here are some other ways to talk about how certain we are about
    something in the future.

    1. I'm sure

       - Jan is certain to pass.
       - Jan is bound to pass the exam. He's worked really hard.

    2. I think so but I'm not 100% sure.

       - Katka is likely to pass the exam.
       - Katka may well pass the exam.
       - There's a good chance that Katka will pass the exam.

    3. I don't think so

       - Juraj is unlikely to pass the exam,
       - There's not much chance Juraj will pass.
       - I doubt if Juraj will pass.
       - There's no chance of Juraj passing the exam.
*** Present Perfect Simple and Present Perfect Continuous

    The present perfect simple suggest completion while the continuous
    suggest somethimg is undefined.

    We use the present perfect tense to talk about things where there
    is a connection between the past and the present.

    - He's written 16 books.

    He started writing books at some time in the past. So far, he has
    written 16 books. He may write more books.

    As well as the *present perfect simple*, we can use the *present
    perfect continuous* tense to talk about events with a connection
    to the present.

    1. Look at these 2 sentences:

       - I've been decorating the house this summer. The focus is on
         the action - decoratinf - and the action is unfinished.

       - I've painted the living room blue. The focus is on the
         finished result. The activity is finished but we can see the
         result now.

       We use the *present perfect continuous* when the focus is on an
       activity that is unfinished.

    2. Look at yhese two sentences:

       - I've read that book you lent me. I finished it yesterday.

       - I've been reading that book you lent me. I've got another 50
         pages to read.

       The present perfect simple (I've read) gives the idea of
       completion while the present perfect continuous (I've been
       reading) suggests that something is unfinished.

    3. Look at these two sentences:

       - She's been writing emails for 3 hours.

       - She's written 10 messages.

       The present perfect continuous (has been writing) talk about
       how long something has been happening. The present perfect
       simple (has written) talks about how much/how many have been completed.

    4. Look at these two sentences.

       - I've worked here for thirty years.

       - I usually work in London but I've been working in Birmingham
         for the last 3 weeks.

       We can use the present perfect simple to talk about how long
       when we view someting as permanent. But the present perfect
       continuous is often used to show that something is temporary.
*** Passives

    We make the passive using 'be' - in a suitable tense - and the
    *past participle* ('done', 'played' etc.). We use the passive:

    1) ... when we don't know, or we are not interested in, who does
       an action.

       - My car was stolen yesterday.
	 We don't know who stole the car.

       - A lot of wine is produced in France.
	 It's not important who produced the wine.

    2) ... when the main topic of the sentence isn't who did the action.

       - Television was invented in the 1920s by John Logie Baird.
	 The main topic here is television - we aren't particularly
         interested in 'who'.

       - Kennedy was assassinated in 1963.

       In English we tend to put the most important thing at the start
       of the sentence.

    3) ... more in written English than in spoken English.

       - War and Peace was written by Tolstoy.
	 You often see the passive in textbooks.

       - The mixture is heated to 500C.
	 Scientific texts especially use the passive.

    Tenses

    The passive can be used with all tenses - the form of 'be'
    changes.

    - What is tiramisu made from? Present Simple.
    - The hall is being painted this week so our class will be in a
      different room. Present Continuous.
    - Oranges have been grown here for centuries. Present Perfect.
    - When he got home he found that his flat had been burgled. Past Perfect.
    - The work won't be finished until next week. Future Simple.

    Modal verbs also use 'be' and the past participle.

    - Answers must be written in pencil.
    - Competition entrants might be chosen to appear on TV.
*** Past Continuous and Past Simple
    1. The most common use of the past continuous tense is to talk
       about something that was happening around a particular time in
       the past.
       - What were you doing at 8 o'clock last night? I was watching
         television.

	 I started watching television before 8 o'clock and I
         continued watching it after 8 o'clock.

       - In 1994 he was working in a small town in Poland.

       - At 6 o'clock on Saturday morning we were travelling to the airport.

    2. We often use the past continuous and the past simple tense
       together. When this happens, the past continuous describes a
       longer, 'background' action or situation and the past simple
       describes the action or events.

       - When I woke up this morning it was raining and my father was
         singing in the kitchen.

       - I was walking home, whistling happily, when I saw two masked
         men run out of the bank.

       Often, the 'action' described by the past simple tense
       interrupts the 'situation' describes 'actions' that happen
       quickly - 'broke' and 'rang'.
*** Verb Tenses
    | Simple Present            | Simple Past         | Simple Future        |
    |---------------------------+---------------------+----------------------|
    | I read nearly             | Last night, I       | I will read as much  |
    | every day                 | read an entire      | as I can this year.  |
    |                           | novel.              |                      |
    |---------------------------+---------------------+----------------------|
    | Present Continuous        | Past Continuous     | Future Continuous    |
    |---------------------------+---------------------+----------------------|
    | I am reading Shakespeare  | I was reading Edgar | I will be reading    |
    | at the moment.            | Allan Poe last      | Nathaniel Hawthorne  |
    |                           | night.              | soon                 |
    |---------------------------+---------------------+----------------------|
    | Present Perfect           | Past Perfect        | Future Perfect       |
    |---------------------------+---------------------+----------------------|
    | I have read so many books | I had read at least | I will have read at  |
    | I can't keep count.       | 100 books by the    | least 500 books by   |
    |                           | time I was twelve.  | the end of the year. |
    |---------------------------+---------------------+----------------------|
    | Present Perfect           | Past Perfect        | Future Perfect       |
    | Continuous                | Continuous          | Continuous           |
    |---------------------------+---------------------+----------------------|
    | I have been reading since | I had been reading  | I will have been     |
    | I was four years old.     | for least a year    | reading for at least |
    |                           | before my sister    | two hours before     |
    |                           | learned to read.    | dinner tonight.      |
*** Simple Present

    The simple present is a verb tense with two main uses. We use the
    simple present tense when an action is happening right now, or
    when it happens regularly. Depending on the person, the simple
    present tense is formed by using the root form or by adding -s or
    -es to the end.

    - I feel great!
    - Pauline loves pie.
    - I'm sorry to hear that you're sick.
    - Pauline practices the piano every day.
    - Ms. Jackson travels during the summer.

    Typically, when we want to describe a temporary action that is
    currently in progress, we use the present continuous:

    - Pauline can't come to the phone right now because she is
      brushing her teeth.

    How to Form the Simple Present

    In the simple present, most regular verbs use the root form,
    except in the third-person singular (which ends in -s).

    First-person singular: I write

    Second-person singular: You write

    Third-person singular: He/she/it writes (note the ‑s)

    First-person plural: We write

    Second-person plural: You write

    Third-person plural: They write

    For a few verbs, the third-person singular ends with -es instead
    of -s. Typically, these are verbs whose root form ends in o, ch, sh,
    th, ss, gh, or z.

    First-person singular: I go

    Second-person singular: You go

    Third-person singular: He/she/it goes (note the ‑es)

    First-person plural: We go

    Second-person plural: You go

    Third-person plural: They go

    For most regular verbs, you put the negation of the verb before the verb,
    e.g. “She won’t go” or “I don’t smell anything.”

    The verb to be is irregular:

    First-person singular: I am

    Second-person singular: You are

    Third-person singular: He/she/it is

    First-person plural: We are

    Second-person plural: You are

    Third-person plural: They are

    How to Make the Simple Present Negative

    The formula for making a simple present verb negative is do/does + not +
    [root form of verb]. You can also use the contraction don’t or doesn’t
    instead of do not or does not.

    - Pauline does not want to share the pie.
    - She doesn’t think there is enough to go around.
    - Her friends do not agree. I don’t want pie anyway.

    To make the verb to be negative, the formula is [to be] + not.

    - I am not a pie lover, but Pauline sure is.
    - You aren’t ready for such delicious pie.

    How to Ask a Question

    The formula for asking a question in the simple present is do/does +
    [subject] + [root form of verb].

    - Do you know how to bake a pie?
    - How much does Pauline love pie?
*** Present Perfect Tense
    The present perfect tense refers to an action or state that either
    occurred at an indefinite time in the past or began in the past
    and continued to the present time. This tense is formed by
    have/has + the past participle of the verb, which is usually
    formed by adding -ed or d to the verb's root or irregular past
    participles.

    - I have walked on this path before.
    - We have eaten the lasagna here.

    The important thing to remember about the present perfect is that
    you can't use it when you are being specific about when it
    happened.

    - I have put away all the laundry.
    - I have put away all the laundry this morning.

    You can use the present perfect to talk about the duration of
    something that started in the past is still happening.

    - She has had the chickenpox since Tuesday.
*** Present Continuous

    The present continuous verb tense indicates that an action or condition is
    happening now, frequently, and may continue into the future.

    The Present Continuous Formula: to be [am, is, are] + verb [present
    participle]

    - Aunt Christine is warming up the car while Scott looks for his
      new leather coat.
    - They are eating at Scott’s favorite restaurant today, Polly’s Pancake
      Diner.

     When to Use the Present Continuous Tense

    Use the present continuous tense with the appropriate “to be” verb and a
    dynamic verb. A dynamic verb shows action and/or process. For example,

    - Scott’s little sister is arriving at the diner two hours late
      because her roller-derby team Chicks Ahoy, won the national
      championships early today.

    - As she is walking into Polly’s Pancake Diner, she is yelling
      goodbye to her friends outside, and Scott hopes she doesn’t
      cause a scene since she is always embarrassing him in public. 

    When Not to Use the Present Continuous Tense

    Do not use the present continuous tense with stative verbs. Stative verbs
    show a state of being that does not show qualities of change. These verbs
    can stay in the simple present. For example,

    - Aunt Christine is preferring the maple walnut pancakes over the
      banana peanut butter ones that Scott loves.
    - Aunt Christine prefers the maple walnut pancakes over the banana
      peanut butter ones that Scott loves.

    Here, the stative verb to prefer shows opinion, and therefore
    should  not be conjugated into the present continuous. Stative
    verb categories include emotion (to love), possession (to belong),
    and houghts (to recognize), and none of these should use the
    present continuous form.

*** Question forms & subject/object questions

    Yes/No questions

    - Is he a teacher? Yes he is.
    - Can you swim? No, I can’t.
    - Have they got a car? Yes they have.

    To form yes/no questions where there is an auxiliary verb or a modal verb,
    we invert the word order of a positive sentence.
    (He is a teacher > Is he a teacher?)

    - Do you eat fish? No I don’t.
    - Does she know you. Yes she does.

    When there is no auxiliary verb we use ‘do’ to form the question.

    With question words

    The same rules apply when there is a question word (‘what’,
    ‘where’, ‘when’,‘why’, ‘who’, ‘which’, ‘how’, ‘how much’, ‘how
    many’)

    - Where is the hotel?
    - What can you smell?
    - Who has just arrived?

    Where there is an auxiliary or modal verb, that verb is used to form the
    question.

    - How did you get here?
    - When do your parents get back?
    - How much does it cost?

    Where there is no auxiliary verb, we use do.

    Subject/Object questions

    Sometimes you might see questions like this.

    - Who broke the window?
    - What happened next?
    - Who told you that?

    There is no auxiliary verb and the word order is not inverted.

    These are called subject questions – because the question word is the
    subject of the sentence.

    Look at these two questions.

    - Who does Romeo love? Romeo loves Juliet.
    - Who loves Romeo? Juliet loves Romeo.

    In the first question, Romeo is the subject of the verb.
    In the second question ‘who’ is the subject and Romeo is the object.
*** Question tags

    Question tags

    Question tags are the short questions that we put on the end of
    sentences – particularly in spoken English. There are lots of
    different question tags but the rules are not difficult to learn.

    Positive/negative

    If the main part of the sentence is positive, the question tag is negative
    ….

    - He’s a doctor, isn’t he?
    - You work in a bank, don’t you?

    ... and if the main part of the sentence is negative, the question tag is
    positive.

    - You haven’t met him, have you?
    - She isn’t coming, is she?

    With auxiliary verbs

    The question tag uses the same verb as the main part of the
    sentence. If this is an auxiliary verb (‘have’, ‘be’) then the
    question tag is made with the auxiliary verb.

    - They’ve gone away for a few days, haven’t they?
    - They weren’t here, were they?
    - He had met him before, hadn’t he?
    - This isn’t working, is it?

    Without auxiliary verbs

    If the main part of the sentence doesn’t have an auxiliary verb, the
    question tag uses an appropriate form of ‘do’.

    - I said that, didn’t I?
    - You don’t recognise me, do you?
    - She eats meat, doesn’t she?

    With modal verbs

    If there is a modal verb in the main part of the sentence the question
    tag uses the same modal verb.

    - They couldn’t hear me, could they?
    - You won’t tell anyone, will you?

    With ‘I am’

    Be careful with question tags with sentences that start ‘I am’.
    The question tag for ‘I am’ is ‘aren’t I?’

    - I’m the fastest, aren’t I?

    Intonation

    Question tags can either be ‘real’ questions where you want to
    know the answer or simply asking for agreement when we already
    know the answer.

    If the question tag is a real question we use rising intonation. Our tone of
    voice rises.
    If we already know the answer we use falling intonation. Our tone of voice
    falls.
*** Reflexive pronouns

    English doesn't really have reflaxive verbs the way that many
    other languages do. However, when the same person is the subject
    and object of the verb we usually use a *reflexive pronoun*.

    - I cut myself shaving this morning.

    The subject - I - is also the object of the sentence - so we use
    the reflexive pronoun, myself.

    - Why don't you buy yourself a new car? This one's really unreliable.
    - He looked at himself in the mirror.
    - She taught herself Italian using a book.
    - The washing machine switches itself off when it's finished.
    - We kept ourselves warm around the fire.
    - Tell me all about yourselves.
    - Hedgehogs protect themselves from predators by rolling into a
      ball.

    'Enjoy' is often used with a reflixive pronoun.

    - Did you enjoy yourself at the party?
    - From their postcard it sounds as if they're really enjoying
      themselves.

    'By yourself' means 'alone'

    - He lives by himself in a cottage by the sea.
    - I'm rather anti-social. I love being by myself.

    Reflexive pronouns can also be used with nouns to mean 'Me (or
    you/him/her etc) and nobody else'

    - Did you do this homework yourself or did you get help?
    - Did you talk to the manageress herself or just to one of her
      assistants?

    There is an important difference between reflexive pronouns and
    reciprocal pronouns

    - They looked at themselves in the mirror. This is reflexive.
    - They looked at each other lovingly. This is reciprocal. He
      looked at her and she looked at him.
*** Relative clauses - defining relative clauses

    Relative clauses add extra information to a sentence by defining a
    noun.
    They are usually divided into two types - defining relative
    clauses and non-defining relative clauses.

    Defining relative clauses

    Look at this sentence:

    - The woman who lives next door works in a bank.

    'who lives next door' is a defining relative clause. It tells us
    which woman we are talking about.

    Look at some more examples:

    - Look out! There's the dog that bit my brother.
    - The film that we saw last week was awful.
    - This is the skirt I bought in the sales.

    In this case a defining relative clauses tell us which dog, which
    film and which skirt we are talking about.

    Relative pronouns

    Relative clauses are usually introduced by a relative pronoun
    (usually *who*, *which*, *that*, but *when*, *where* and *whose*
    are also possible).

    With defining relative clauses we can use *who* or *that* to talk
    about people. There is no difference in meaning between these,
    though 'who' tends to be preferred in more formal use.

    - She's the woman who cuts my hair.
    - She's the woman that cuts my hair.

    We can use *that* or *which* to talk about things. Again, there is
    no difference in meaning between these, though 'which' tends to be
    preferred in more formal use.

    - This is the dog that bit my brother.
    - This is the dog which bit my brother.

    Simplifying defining relative clauses

    Defining relative clauses can be simplified, or reduced, in
    several ways:

    If the relative pronoun is the object of the verb then it can be
    omitted:

    - This is the skirt that I bought in the sales.
    - This is the skirt which I bought in the sales.
    - This is the skirt I bought in the sales.

    In this sentence 'skirt' is the object of the verb (buy). 'I' is
    the subject. When the relative pronoun is the object, it can be
    omitted.

    Note that if the relative pronoun is the subject of the verb then
    it cannot be omitted:

    - This is the dog that bit my brother.
    - This is the dog which bit my brother.

    If the relative clause comtains the verb 'be' + any of the
    following then it can be reduced:

      (a) be + an adjective phrase

      - The man who is interested in your car will telephone later.

      - The man interested in your car will telephone later.

    Note that other verbs are possible here as well as 'be', such as
    'seem', 'look' and 'appear'.

      (b) be + a prepositional phrase

      - The books which are on the table have been read.
      - The books on the table have been read.

      (c) be + a past participle [a passive form]

      - A person who has been tricked once is careful the next time.
      - A person tricked once is careful the next time.

      (d) be + a present participle [a continuous form]

      - The family who are living in the house are very rich.
      - The family living in the house are very rich.
*** DONE Reported speach 1
    CLOSED: [2017-05-07 Sun 10:58] DEADLINE: <2017-05-07 Sun 10:55> SCHEDULED: <2017-05-07 Sun>

    In reported speech the tenses, word-order and pronouns may be
    different from the original sentence.

    Reported speech (1)

    When we report someone's words we can do it in two ways. We can
    use *direct speech* with quotation marks ("I work in a bank"), or
    we can use *reported speech* (He said he worked in a bank.)

    In *reported speech* the tenses, word-order and pronouns may be
    different from those in the original sentence.

    Present simple and present continuous tenses

    Direct speech: "I travel a lot in my job" Reported speech: He said
    that he travelled a lot in his job.

    The present simple tense (I travel) usually changes to the past
    simple (he traveled) in reported speech.

    Direct speech: "Be quiet. The baby's sleeping." Reported speech:
    She told me to be quiet because the baby was sleeping.

    The present continuous usually changes to the past continuous.

    NB:

    "I work in Italy" Reported speech: He told me that he works in
    Italy.

    Past simple and past continuous tenses

    Direct speech: "We lived in China for 5 years." Reported speech:
    She told me they had lived in China for 5 years.

    The past simple tenses (we lives) usually changes to the past
    perfect (they had lived) in reported speech.

    Direct speech: "I was walking down the road when I saw the
    accident."
    Reported speech: He told me he'd been walking down the road when
    he'd seen the accident.

    Perfect tenses

    Direct speech: “They’ve always been very kind to me”.
    Reported speech: Shesaid they’d always been very kind to her.

    The present perfect tense (have always been) usually changes to the past
    perfect tense (had always been).

    Direct speech: “They had already eaten when I arrived” Reported speech: He
   said they’d already eaten when he’d arrived.

    The past perfect tense does not change in reported speech.
*** DONE Reported speech 2
    CLOSED: [2017-05-10 Wed 09:20] DEADLINE: <2017-05-10 Wed 09:20> SCHEDULED: <2017-05-10 Wed>
    Remember that in reported speech we usually change the tenses of
    the direct statement. The present simple tense changes to the past
    simple, the past simple changes to the past perfect and so on.

    Here are some other points to consider.

    'Can' and 'will'

    Direct speech: "I can't remember his name". Reporting speech: She
    said she couldn't remember his name.

    'Can' and 'can't' in direct speech change to 'could' and
    'couldn't' in reported speech.

    Direct speech: "I'll be there for 3 weeks". Reported speech: He
    told me he'd be there for 3 weeks.

    'Will' and 'won't' in direct speech change to 'would' and
    'wouldn't' in reported speech.

    Other modal verbs

    Direct speech: "You could be right." Reported speech: I said that
    he could be right.
    Direct speech: "You must call me." Reported speech: She said that
    I must call her.

    Other modal verbs don't change in reported speech.

    Reporting orders, requests and advice

    Direct speech: "Sit down and shut up!" Reported speech: The
    teacher told me to sit down and shut up.
    Direct speech: "Can you hold this for me please?" Reported speech:
    He asked me to hold it.
    Direct speech: "You should do more exercise." Reported speech: He
    advised me to do more exercise.

    Orders, request and advise can be reported using an infinitive.

    Reporting verbs

    There are a number of verbs that we use to report statements.
    These can make your speech and writing more interesting than
    simply reporting every word of the direct speech.

    Direct speech: "It wasn't me who broke the window."> He denied
    breaking the window.
    Direct speech: "I'll help you if you want" > She offered to help.

    There are a number of verbs that can be used to report. They
    include: promise, claim, suggest, advise, refuse, argue, confirm
    and others.
*** DONE Relative clauses - non-defining relative clauses
    CLOSED: [2017-05-11 Thu 09:31] SCHEDULED: <2017-05-11 Thu> DEADLINE: <2017-05-11 Thu 08:50>
    Relative clauses add extra information to a sentence by defining a
    noun. They are usually divided into two types - defining relative
    clauses and non-defining relative clauses.

    Non-defining relative clauses

    Look at this sentence.

    - My grandfather, who is 87, goes swimming every day.

      'who is 87' is a non-defining relative clause. It adds extra
      information to the sentence. If we take the clause out of the
      sentence, the sentence still has the same meaning.

    Look at some more examples.

    - My eldest son, whose work takes him all over the world, is in
      Hong Kong at the moment.
    - The film, which stars Tom Carter, is released on Friday.
    - The car, which can reach speeds of over 300km/ph, cost over
      $500,000.

    In the first sentence, it is clear which son is being talked about
    and the relative clause provides extra information. In the second
    sentence, the speaker thinks you know which film you are talking
    about, and the information about Tom Carter is just something
    interesting. In the third sentence, the speaker thinks you already
    know which car is being discussed. The information about the speed
    is just for interest.

    Defining or non-defining?

    Remember that defining relative clauses are uses to add important
    information. The sentence would have a different meaning without
    the defining relative clause.

    - I'm going to wear the skirt that I bought in London.
    - The skirt, which is a lovely dark blue colour, only cost $10.

    The first sentence with a defining relative clause tells us which
    skirt. The second sentence, with a non-defining relative clause,
    doesn't tell us which skirt - it gives us more information about
    the skirt.

    Non-defining relative clauses can use most relative pronouns
    (which, whose etc,) but they CAN'T use 'that' and the relative
    pronoun can never be omitted.
*** DONE Reported questions
    CLOSED: [2017-05-13 Sat 09:30] SCHEDULED: <2017-05-13 Sat> DEADLINE: <2017-05-13 Sat 09:40>
    Reported questions

    When we report what people say, we usually change the tense of the
    verbs to reflect that we are reporting - not giving direct speech.
    This pattern is followed when we report questions and there are
    also other important changes between direct questions and reported
    questions.

    Yes/no questions

    Direct question: "Do you like working in teams?" Reported
    question: He asked if I like working in teams.

    When we report yes/no questions we use 'is' or 'whether'.

    Direct question: "Did you enjoy the party?" Reported question: She
    asked me whether I'd enjoyed the party.

    The tense of the verb changes as it does in reported speech but we
    don't use auxiliary verbs. The word order is the same as in an
    affirmative sentence.

    Questions with a question word

    Direct question: "What time does the train leave?" Reported
    question: He asked what time the train left.

    When there is a question word (what, where, why, who, when, how)
    we use that question word in the reported question but there is no
    auxiliary verb and the word order is like an affirmative sentence
    (‘what time the train left’ not He asked me what time did the train
    leave.)

    Look at some more examples:

    - Direct question: “Who did you see?”
    - Reported question: She asked me who I’d seen.

    - Direct question: “Where did you go to school?”
    - Reported question: He asked me where I’d gone to school.

    - Direct question: “Why are you crying?”
    - Reported question: She asked him why he was crying.

    Notice that the reported questions do not have a question mark at
    the end.

    Indirect questions

    Similar to reported questions are indirect questions.

    - Can you tell me what time the train leaves? NOT Can you tell me
      what time does the train leave?
    - I’d love to know what he said to her. NOT I’d love to know what
      did he say to her.
*** DONE So
    CLOSED: [2017-05-16 Tue 09:55] SCHEDULED: <2017-05-16 Tue> DEADLINE: <2017-05-16 Tue 09:40>
    'So' has a number of different meaning and is used in different
    ways.
    'So' and 'neither' short answers

    We can use 'so' in short answers to mean 'also'
    - "I like this film" "So do I."
    - "I'm tired" "So am I."
    - She's got a happy face and so has he.

    As in questions, the verb with 'so' in these short answers is the
    same as the auxiliary verb. If there is no auxiliary we use 'do'.

    To show negative agreement we use 'neither'.

    - "I haven't done the homework". "Neither have I."
    - "I don't want another drink" "Neither do I."
    - He doesn't look very happy and neither does she.

    'so' with certain verbs

    'So' is used in place of a clause after certain verbs.

    - "Is John coming?" "I think so."
    - "Are you going to tell him?" "I suppose so."

    As well as *think and suppose* we can make this kind of sentence
    with *hope, believe and expect*.

    Note that we can also say 'I don't think so' but all the other
    verbs would use *not*.

    - "Is John coming?" "I hope not."

    'so' and 'such' with adjectives and nouns

    'So' can be followed by an adjective

    - It's so hot today!
    - She looks so young in that photo.

    'Such' is used if there is a noun or adjective + noun.

    - It's such a hot day today!
    - They're such lovely trousers. Where did you buy them?

    Both these 'so' and 'such' structures are often used with a 'that'
    clause

    - It was so cold that the water in the lake froze.
    - He was such a good teacher that we all passed the exam.
*** DONE Stative verbs
    CLOSED: [2017-05-17 Wed 10:36] SCHEDULED: <2017-05-17 Wed> DEADLINE: <2017-05-17 Wed 10:00>

    Some verbs are not usually used in the continuous form, even when
    we are talking about temporary situation or states. These are
    called *stative verbs*.

    So, we say I'm sorry, I don't understand rather than I'm not
    understanding.

    1. Stative verbs are often verbs connected with thinking and
      opinions.

       - She doesn't know what to do NOT She isn't knowing what to do.

       - Do you agree with me?

       - I don't recognise it, do you?

       Other verbs in this group include: believe, doubt, guess,
       imagine, mean, remember, think.

    2. Other stative verbs are connected with feeling and emotions

       - I like this song. Who sing it? NOT I'm liking this song

       - What do you want to do now?

       - I hate my new boss!

    Other stative verbs in this group include: dislike, love, prefer,
    want, wish

    NB - although 'enjoy' is a verb of emotion, it is used in the
    continuous tense.

    - I'm enjoying the party.

    3. 'see', 'hear, 'taste', 'smell', 'feel' are verbs that describe
      senses.

      These verbs aren't usually used in continuous forms. They are
      often used with 'can'.

      - It smells of smoke in here. NOT It's smelling of smoke in here.

      - I can't see anything. It's too dark.

    4. Stative verbs describe things that are not actions.

       - He smell of fish.

       - He's smelling the fish.

       The second sentence is an action – not a state. The man wants
       to know if the fish is OK to eat.
*** DONE Verbs and prepositions
    CLOSED: [2017-05-19 Fri 10:25] SCHEDULED: <2017-05-19 Fri> DEADLINE: <2017-05-19 Fri 10:30>

    Some verbs are usually followed by prepositions before the object
    of the verb. these are called dependent prepositions and they are
    followed by a noun or a gerund ('ing' form).

    He's waiting for a bus.

    *For* is a dependent preposition for 'wait'

    We can use other prepositions with 'wait' - e.g. He waited at the
    bus stop 'for' is the dependent preposition.

    Verbs with 'for'

    - He apologised for being late. You can also 'apologise to someone'
    - I applied for the job but I didn't get it.
    - How do you ask for a coffee in Polish?
    - She spent many years caring for her aged parents.

    With 'from'

    - This spray should protect you from mosquitoes.
    - I applied for the job but I didn't get it.
    - How do you ask for a coffee in Polish?

    With 'in'

    - She believes in ghosts.
    - Our company specialises in computer software.
    - You have to work hard if you want to succeed in life.


    With 'of'

    - I don't approve of your language, young man.
    - Our dog died of old age.
    - This shampoo smells of bananas.

    With 'on'

    - The film is based on the novel by Boris Pasternak.
    - If you make so much noise I can't concentrate on my work.
    - Come on! We're relying on you!


    With 'to'

    - Can I introduce you to my wife?
    - Please refer to the notes at the end for more information.
    - Nobody responded to my complain.

    With 'with'

    - I agree with everything you've said.
    - My secretary will provide you with more information if you need it.
*** Verbs followed by ‘ing’ or by ‘to + infinitive’ 1
    When one verb is followed by another, the second verb can either
    be an infinitive

    or an
    -ing
    form.

    Some verbs can be followed by only an infinitive,
    others by only an
    -ing
    form and some by both but with a change in meaning.

    Verb + infinitive

    - I want to speak to the manager.
    - She's learning to ride a horse.
    - He offered to help us wash up.

    'Want', 'learn' and 'offer' are followed by to + infinitive

    Other verbs in this group include: afford, agree, ask, choose,
    decide, expect, hope, prepare, promise, pretend, refuse, would
    like.

    Verb + 'ing' form

    - I enjoy travelling.
    - He admitted stealing the necklace.
    - I don't mind waiting if you're busy.

    'enjoy' 'admit' and 'mind' are followed by the 'ing' form

    Other verbs in this group include: avoid, consider, dislike, feel
    like, finish, give up, can't help, practise, suggest.

    Verb + infinitive or 'ing' form with no change in meaning

    A few verbs can be followed by either an infinitive or the 'ing'
    form and the meaning does not change.

    - I started to work here in 1994.
    - I started working here in 1994.

    The meaning of these two sentences is the same.

    The meaning of these two sentences is the same.

    There aren’t many verbs that can take an infinitive or an ‘ing’
    form with no change in meaning. ‘Begin’ and ‘continue’ are two more
    examples.

    There is also a group of verbs that can be followed by an infinitive
    or an ‘ing’ form with a change in meaning. These verbs will be covered
    in another section.
*** DONE Verbs followed by 'ing' or by 'to + infinitive' 2
    CLOSED: [2017-06-22 Thu 10:21]

    When one verb is followed by another, the second verb can either
    be an infinitive or an ~ing form. Some verbs can be followed by
    either an infinitive, or an –ing form but with a change in
    meaning. These are some of the most common ones.

    like

    - I like watching old films on TV.

    With an ‘ing’ form, ‘like’ means ‘enjoy’

    - I like to wash up as soon as I finish eating.

    I might not enjoy washing up but I think it’s the right thing to do.

    Remember that ‘would like’ can only be followed by an infinitive.

    - I’d like to go to Japan next year, if possible.
    - I’m trying to learn Japanese but it’s very difficult.
    - Have you tried using butter instead of oil?

    Try + ‘ing’ means make an experiment. It’s not difficult – it
    might work, it might not.

    stop

    Stop + ‘ing’ tells us what has stopped. in this example, buying a
    newspaper.

    - I’ve stopped buying a newspaper every day to try to save money.
    - The bus stopped to pick up the children.

    remember /forget

    - Don’t forget to post that letter for me.
    - Did you remember to post that letter for me?

    Remember/forget + to + infinitive means that you remember
    something you have to do – a duty or a chore.

    - I’ll always remember meeting you for the first time.
    - I’ll never forget meeting you for the first time.

    Remember/forget + ‘ing’ form means remember something you did in the
    past – an event or an activity.
** Grammar
*** Pronouns - personal pronouns (I, me, you etc):

    | Subj | Obj  |
    |------+------|
    | I    | me   |
    | you  | you  |
    | he   | him  |
    | she  | her  |
    | it   | it   |
    | We   | us   |
    | they | them |
    |      |      |

We use he/him to refer to men, and she/her to refer to woman. When we are not sure if we are talking about a man or a woman we use they/them. 

Subject pronouns

English clauses always have a subject:

His father has just retired. Was a teacher. > He was a teacher.
I’m waiting for my wife. Is late. > She is late.
Look at the time! Is half past two.> It’s half past two.

except for the imperative (see more)

Go away.
Play it again please.

If we have no other subject we use there or it.


We use subject pronouns as subject of the verb:

I like your dress.
You are late.
He is my friend
It is raining
She is on holiday
We live in England.
They come from London.



Object pronouns
 We use object pronouns:

• as the object of the verb:

Can you help me please?
I can see you.
She doesn’t like him.
I saw her in town today.
We saw them in town yesterday, but they didn’t see us.

• after prepositions:

She is waiting for me.
I’ll get it for you.
Give it to him.
Why are you looking at her?
Don’t take it from us.
I’ll speak to them. 

**** there:
We use there as a dummy subject with part of the verb be followed by a noun phrase. (see Clauses, sentences and phrases):

• to introduce a new topic:

There is a meeting this evening. It will start at seven.
There has been an accident. I hope no one is hurt.

• with numbers or quantities:

There was a lot of rain last night.
There must have been more than five hundred in the audience.

• to say where something is:

There used to be a playground at the end of the street.
There are fairies at the bottom of the garden.
I wonder if there will be anyone at home.

• with an indefinite pronoun or expressions of quantity and the to-infinitive:

There is nothing to do in the village.
There was plenty to read in the apartment
There was nothing to watch on television.
There is a lot of work to do

If we want to show the subject of the to-infinitive we use for:

There is nothing for the children to do in the village.
There was plenty for us to read in the apartment
There was nothing for them to watch on television.
There is a lot of work for you to do.

• with an indefinite pronoun or expressions of quantity and an -ing verb:

There is someone waiting to see you.
There were a lot of people shouting and waving.

We use a singular verb if the noun phrase is singular:

There is a meeting this evening. It will start at seven.
There was a lot of rain last night.
There is someone waiting to see you.

We use a plural verb if the noun phrase is plural:

There are more than twenty people waiting to see you.
There were some biscuits in the cupboard.
There were a lot of people shouting and waving.

**** it:
We use it to talk about:

• times and dates:

It’s nearly one o’clock.
It’s my birthday.

• weather:

It’s raining.
It’s a lovely day.
It was getting cold.

• to give an opinion about a place:

It’s very cold in here.
It will be nice when we get home.
It’s very comfortable in my new apartment.

• to give an opinion followed by to-infinitive:

It’s nice to meet you.
It will be great to go on holiday.
It was interesting to meet your brother at last.

• to give an opinion followed by an -ing verb:

It’s great living in Spain.
It’s awful driving in this heavy traffic.
It can be hard work looking after young children.

  

Using "it" to talk about people
We use it to talk about ourselves:

• on the telephone:

Hello. It’s George.

• when people cannot see us:

[Mary knocks on door] It’s me. It’s Mary.

We use it to talk about other people:

• when we point them out for the first time:

Look. It’s Sir Paul McCartney.
Who’s that? I think it’s John’s brother.

• when we cannot see them and we ask them for their name:

[telephone rings, we pick it up] Hello. Who is it?
[someone knocks on door. We say:] Who is it? 

**** you and they 

We use you to talk about people in general including the speaker and the hearer:

You can buy this book anywhere > This book is on sale everywhere.
You can’t park here > Parking is not allowed here.
They don’t let you smoke in here > No smoking here

We use they or them to talk about people in general:

They serve good food here.
Ask them for a cheaper ticket.

… especially about the government and the authorities:

They don’t let you smoke in here.
They are going to increase taxes.
They are building a new motorway.
They say it’s going to rain tomorrow.

**** This, that, these and those

We use this(singular) and these(plural) as pronouns:

- to talk about people or things near us:

This a nice cup of tea.
Whose shoes are these?

- to introduce people:

This is Janet.
These are my friend, John and Michael.

WARNING:
We don't say These are John and Michael.
We say This is John and this is Michael.

- to introduce ourselves to begin a conversation on the phone.

Hello, this is David, Can i speak to Sally?

Why do we use that and those?

We use that(singular) and those(plural):

- to talk about things that are not near us:

What's that?
This is our house, and that's Rebecca's house over there.
Thise are very expensive shoes.

- We also use that to refer back to something someone said or did:

- Shall we go to the cinema?
- Yes, that's a good idea.

- I've got a new job/
- That's great/

- I'm very tired.
- why is that?

We also ose this, these, that and those with nouns to show proximity

We use this and these for people or thing near us:

We have lived in this house for twenty years.
have you read all of these books?

... and that and those for people or things that are not near us:

Who lives in that house?
Who are those people?

**** One and ones

We use one(singular) and ones(plural) to avoid unnecessary repetition.

See those two girls? Helen is the tall one and Jane is the short one.
Which is you car, the red one ore the blue one?
My trousers are torn. I need some new ones.
See those two girls. Helen is the one on the left.
Let's look at the photographs. The ones you took in Paris.

We often use them after Which ... in questions:

You can borrow a book. Which one do you want?
There are lots of books here. Which ones are yours?

**** Which question word to use?

We use WHO ask question about people:

Who is that?
Who lives here?
Who did you see?

We use whose to ask about possession:

Whose coat is this? [or] Whose is this coat?
Whose book is that? [or] Whose is that book?
Whose bags are those? [or] Whose are those bags?

We use what to ask questions about things:

What is that?
What do you want?

We use WHICH to ask someone to choose something:

Which came first, the chicken or the egg?
I've got two books. Which do you want?

We can also use what and which with nouns:

What subjects did you study at school?
What newspaper do you read?
Which newspaper do you read - the Times or the Guardian?
Which book do you want?
Which one is yours?

Questions with prepositions:

Questions ending in prepositions are very common in English. After Who, Which or What we often have a
preposition at the end of the sentence:

Who does this book belong to?
What are you looking for?
Which university did you go to?
What country do you come from?

**** Reflexive pronouns

| Singular | myself-yourself-himself-herself-itsel |
| Plural:  | ourselves-yourselves-themselves       |
 
When we use a reflexive pronoun

We use a reflexive pronoun:

- as a direct object when the object is the same as the subject of the verb:

I am teaching myself to play the piano.
Be careful with the knife/ You might cut yourself.

We can use a reflexive pronoun as direct object with most transitive verbs, but these are 
most common:

| amuse | blame     | cut  | dry     | enjoy   | help  |
| hurt  | introduce | kill | prepare | satisfy | teach |

Some verbs change their meaning slightly when they have a reflexive pronoun as direct object:

Would you like to help yourself to another drink?
= Would you like to take another drink.

I wish the children would behave themselves.
 = I wish the children would behave well.

He found himself lying by the side of the road.
= He was surprised when he realised that he was at the side of the road.

I saw myself as a famous actor.
= I imagined that I was a famous actor.

She applied herself to the job of mending the lights.
= She worked very hard to mend the lights.

He busied himself in the kitchen.
 = He worked busily in the kitchen.

I had to content myself with a few Euros.
= I had to be satisfied with a few Euros.
 
We do not use a reflexive pronoun after verbs which describe things people usually do for themselves, such as wash, shave, dress:

He washed [himself] in cold water.
He always shaved [himself] before going out in the evening.
Michael dressed [himself] and got ready for the party.

We only use reflexives with these verbs for emphasis:

He dressed himself in spite of his injuries.
She’s old enough to wash herself.

• as indirect object when the indirect object is the same as the subject of the verb:

Would you like to pour yourself a drink.
We’ve brought ourselves something to eat.

• as the object of a preposition when the object refers to the subject of the clause:

They had to cook for themselves.
He was feeling very sorry for himself.

Warning

But we use personal pronouns, not reflexives, after prepositions of place...

He had a suitcase beside him.

and after with when it means "accompanied by":

She had a few friends with her.


We use a reflexive pronoun...

• with the preposition by when we want to show that someone did something alone and/or without any help:

He lived by himself in an enormous house.
She walked home by herself.

The children got dressed by themselves.
I prepared the whole meal by myself.

• to emphasise the person or thing we are referring to:

Kendal itself is quite a small town.

especially if we are talking about someone very famous:

Sir Paul McCartney himself sang the final song.

We often put the reflexive pronoun at the end of the clause when we are using it for emphasis:

I baked the bread myself.
She mended the car herself

**** Reciprocal pronouns: each other and one another

We use the reciprocal pronouns each other and one another when two or more people do the same  thing.
Traditionally, each other refers to two people and one another refers to more than two people, but this is distinction is disappearing in modern English.

Peter and Mary helped one another.
= Peter helped Mary and Mary helped Peter.

We sent each other Christmas cards.
= We sent them a Christmas card and they sent us a Christmas card.

They didn’t look at one another.
= He didn't look at her and she didn't look at him.

We also use the possessive forms each other’s and one another’s:

They helped to look after each other’s children.
We often stayed in one another’s houses.

NOTE: We do not use reciprocal pronouns as the subject of a clause.

**** Indefinite pronouns

| somebody  | someone  | something  |
| anybody   | anyone   | anything   |
| nobody    | no one   | nothing    |
| everybody | everyone | everything |


We use indefinite pronouns to refer to people or things without saying exactly who or what they are. We use pronouns ending in -body or -one for people, and pronouns ending in -thing for things:

Everybody enjoyed the concert.
I opened the door but there was no one at home.
It was a very clear day. We could see everything.

We use a singular verb after an indefinite pronoun:

Everybody loves Sally.
Everything was ready for the party.

When we refer back to an indefinite pronoun we normally use a plural pronoun:

Everybody enjoyed the concert. They stood up and clapped.
I will tell somebody that dinner is ready. They have been waiting a long time.

We can add -'s to an indefinite pronoun to make a possessive.

They were staying in somebody’s house.
Is this anybody’s coat?

We use indefinite pronouns with no- as the subject in negative clauses (not pronouns with any.)

Anybody didn’t come >> Nobody came.

We do not use another negative in a clause with nobody, no one or nothing:

Nobody came.
Nothing happened.

We use else after indefinite pronouns to refer to people or things in addition to the ones we already mentioned.

All the family came, but no one else.
If Michael can’t come we’ll ask somebody else.
So that's eggs, peas and chips. Do you want anything else?

**** Relative pronouns

*** Determines and quantifieers
Determiners are words which come at the beginning of the noun phrase.

They tell us whether the noun phrase is specific or general.

Determiners are either specific or general

Specific determiners:
The specific determiners are:

the definite article: the
possessives: my, your, his, her, its; our, their, whose
demonstratives: this, that, these, those
interrogatives: which

We use a specific determiner when we believe the listener/reader knows exactly what we are referring to:

Can you pass me the salt please?
Look at those lovely flowers.
Thank you very much for your letter.
Whose coat is this?

General determiners:
The general determiners are:

a; an; any; another; other; what
When we are talking about things in general and the listener/reader does not know exactly what we are referring to, we can use an uncount noun or a plural noun with no determiner:

Milk is very good for you. (= uncount noun)
Health and education are very important. (= 2 uncount nouns)
Girls normally do better in school than boys. (= plural nouns with no determiner)

... or you can use a singular noun with the indefinite article a or an:

A woman was lifted to safety by a helicopter.
A man climbing nearby saw the accident.

We use the general determiner any with a singular noun or an uncount noun when we are talking about all of those people or things:

It’s very easy. Any child can do it. (= All children can do it)
With a full licence you are allowed to drive any car.
I like beef, lamb, pork - any meat.

We use the general determiner another to talk about an additional person or thing:

Would you like another glass of wine?

The plural form of another is other:

I spoke to John, Helen and a few other friends.

Quantifiers

We use quantifiers when we want to give someone information about the number of something: how much or how many.

**** Interrogative determines: which and what
We use "which" as a determiner to ask a question about a specific group of people or things:
Which restaurant did you go to?
Which countries in South america have you visited?

When we are asking a general question we use "what" as a determiner:
What films do you like?
What university did you go to?

**** Indefinite article: a and an
1. We use the indefinite article, a a/an, with count nouns when the header/reader does not know exactly which one we are referring to:

Police are searching for a 14 year-old girl.

2. We also use it to show the person or thing is one of a group:

She is a pupil at London Road School.


Police have been searching for a 14 year-old girl who has been missing since Friday.

Jenny Brown, a pupil at London Road School, is described as 1.6 metres tall with short blonde hair.

She was last seen wearing a blue jacket, a blue and white blouse and dark blue jeans and blue shoes. 

Anyone who has information should contact the local police on 0800349781.


3. We do not use an indefinite article with plural nouns and uncount nouns:

She was wearing blue shoes. (= plural noun)
She has short blonde hair. (= uncount noun)

4. We use a/an to say what someone is or what job they do:

My brother is a doctor.
George is a student.

5. We use a/an with a singular noun to say something about all things of that kind:

A man needs friends. (= All men need friends)
A dog likes to eat meat. (= All dogs like to eat meat)

**** Definite article: the

The definite article 'the' is the most frequent word in English.

We use the definite article in front of a noun when the believe the header/reader known exactly what we are refering to.

- because thereis is only one:

The Pope is visiting Russia.
The moon is very bright tonight.
The Shah of Iran was deposed in 1979.

This is why we use the definite article with a superlative adjective:

He is the tallest boy in the class.
It is the oldest building in the town.

- because there is only one in that  place or in those surroundings:

| We live ia a small vilage next to the church  | = | (the church in our vilage)           |
| Dad, can I borrow the car?                    | = | (the car that belongs to our family) |
| Look at the boy in the blue shirt over there. | = | (the boy I am pointing at)           |
 
- because we have already mentioned it:

A woman who fell 10 meters from High Peak was lifted to safely by a helicopter.
The woman fell while climbing.
The rescue is the latest in a series of incidents on High Peak. In January last year two men walking onthe peak were killed in a fall. 

We also use the definite article:

• to say something about all the things referred to by a noun:

The wolf is not really a dangerous animal (= Wolves are not really dangerous animals)
The kangaroo is found only in Australia (= Kangaroos are found only in Australia)
The heart pumps blood around the body. (= Hearts pump blood around bodies)

We use the definite article in this way to talk about musical instruments:

Joe plays the piano really well.(= Joe can play any piano)
She is learning the guitar.(= She is learning to play any guitar)

• to refer to a system or service:

How long does it take on the train?
I heard it on the radio.
You should tell the police.

• With adjectives like rich, poor, elderly, unemployed to talk about groups of people:

Life can be very hard for the poor.
I think the rich should pay more taxes.
She works for a group to help the disabled.

The definite article with names:

We do not normally use the definite article with names:

William Shakespeare wrote Hamlet.
Paris is the capital of France.
Iran is in Asia.

But we do use the definite article with:

• countries whose names include words like kingdom, states or republic.

the United Kingdom, the kingdom of Nepal, the United States, the People's Republic of China.

• countries which have plural nouns as their names:

the Netherlands; the Philippines

• geographical features, such as mountain ranges, groups of islands, rivers, seas, oceans and canals:

the Himalayas; the Canaries; the Atlantic; the Atlantic Ocean; the Amazon; the Panama Canal.

• newspapers:

The Times; The Washington Post

• well known buildings or works of art:

the Empire State Building; the Taj Mahal; the Mona Lisa; the Sunflowers

• organisations:

the United Nations; the Seamen’s Union

• hotels, pubs and restaurants*:

the Ritz; the Ritz Hotel; the King’s Head; the Déjà Vu

*Note: We do not use the definite article if the name of the hotel or restaurant is the name of the owner, e.g.,Brown’s; Brown’s Hotel; Morel’s; Morel’s Restaurant, etc.

• families:

the Obamas; the Jacksons

**** Quantifiers
We use quantifiers when we want to give someone information about the number of something: how much or how many.

Sometimes we use a quatifier in the place of a determiner:

Most children start school at the age of five.
We ate some bread and butter.
We saw lots of birds.

We use these quantifiers with both count and uncount nouns:

| all  | any  | enough | less    | a lot of | lots of |
| more | most | no     | none of | some     |         |

and some more colloquial forms:

| plenty of | heaps of | a load of | loads of | tons of |


Some quantifiers can be used only with count nouns:

| both | each | either | a few | fewer | neither | several |


And some more colloquial forms:

| a couple of | hundreds of | thousand of |


Some quantifiers can be used only with uncount nouns:

| a little | (not) much | a bit of |

And, particularly with abstract nouns such as time, money, trouble, etc:, we often use:

| a great deal of | a good deal of |


Members of groups

You can put a noun after a quantiflier when you are talking about members of group in general

Few snakes are dangerous.
Both brothers work with their father.
I never have enough money.

but if you are talking about a specific group of people or things, ude OF THE ... as well

Few of the snakes are dangerous.
All of the children live at home.
He has spent all of his money.

Note that, if we are talking about two people or things we use the quantifiers both, either and nneither.

| One supermarket            | Two supermarkets                 | More than two supermarkets       |
| The supermarket was closed | Both the supermarket were closed | All the supermarkets were closed |
|                            |                                  |                                  |

**** Singular quantifiers:

We use every and each a singular noun to mean ALL.

There was a party in every street = There were parties in all the streets.

Every shop was decorated with flowers. = All the shops were decoreted with flowers.

Each child was given a prize. = All the children were given a prize.


We often use EVERY to talk about times like days, weeks and years:

When we were children we had holidays at our grandmother's every year.
We visit our daughter every Christmas.

BUT: We do not use a determiner with every and each. We do not say:

The every shop was decorated with flowers.(uncorrect)
The each child was given a prize.(uncorrect)

*** Possesives
**** Possessives: nouns
We use a noun with 's with a singular noun to show possession:

We are having a party at John's house.
Michael drove his friend's car.

We use s' with a plural noun ending in -s.

This is my parents' house.
Those are ladies' shoes.

But we use 's with other plural nouns:

These are men's shoes.
Children's clothes are very expensive.

We can use a possesive instead of a noun phrase to avoid repeatinf words:

Is that John's car? No, it's Mary's [car]. No, it's Mary's.
Whose coat is this? It's my wife's[coat]. It's my wife's. 

**** Possessives: adjectives
its, yourm my, their, our, her, his
| I    | me   |
| You  | you  |
| He   | him  |
| She  | her  |
| It   | it   |
| We   | us   |
| They | them |

We use possessive adjectives:

• to show something belongs to somebody:

That’s our house.
My car is very old.

• for relations and friends:

My mother is a doctor.
How old is your sister?

• for parts of the body:

He’s broken his arm.
She’s washing her hair.
I need to clean my teeth.
   
**** Possessives: pronouns
| Subject | Object | Possessive adjectives |
| I       | me     | my                    |
| You     | you    | your                  |
| He      | him    | his                   |
| She     | her    | her                   |
| It      | it     | its                   |
| We      | us     | our                   |
| They    | them   | their                 |

WE can use a possesive pronoun insted of a noun phrase:
Is that John's car? No, it's mine
whose coat is this? Is it yours?
Her coat is grey, [my coat] is brown. Her coat is grey, mine is brown.

We can use possessive pronouns after of.

We can say:

Susan is one of my friends.
or
Susan is a friend of mine.
but not 
Susan is a friend of me

or

I am one of Susan's friends.
or
I am a friend of Susan's.
but not 
I am a friend of Susan

**** Possessives: questions

We use WHOSE to ask questions:

| Pattern A             |    | Pattern B             |
|-----------------------+----+-----------------------|
| Whose coat is this?   | or | Whose is this coat?   |
|-----------------------+----+-----------------------|
| Whose book is that?   | or | Whose is that book?   |
|-----------------------+----+-----------------------|
| Whose bags are those? | or | Whose are those bags? |
|-----------------------+----+-----------------------|

**** Possessives: reciprocal pronouns

see "each other's" and "one another"

*** Adjectives

We use adjectives to describe nouns.

Most adjectives can be used in front of a noun...:

They have a beautiful house.
We saw a very exciting film last night.

or after a link verb like BE, LOOK or FEEL:

Their house is beautiful.
That film looks interesting.

**** Adjectives & Prepositions
     Some adjectives go with certain prepositions. There is no real pattern
     and you need to learn them as you meet them.

     - With 'at'

       I'm quite good at English but I'm bad at maths and I'm terrible
       at physics.

     - With 'for'

       Jogging is good for your health but smoking is bad for you.
       The town is famous for its cheese.

       As well as 'good for', 'bad for' and 'famous for' we also say
       'qualified for', 'ready for', 'responsible for', 'suitable for'
       and several others.

     - With 'of'

       I'm perfectly capable of doing it myself, thank you.
       I'm very fond of this old sweatshirt.

       As well as 'capable of' and 'fond of' we also say 'aware of',
       'full of', 'tired of' and several others.

     - With 'with'

       We're very pleased with your progress.
       You're not still angry with me are you?

       As well as 'pleased with' and 'angry with' we also say 'bored with',
       'delighted with', 'satisfied with' and several others.

     - With 'to'

       She's the one who's married to a doctor, isn't she?
       You'll be responsible to the head of the Finance department.

       Other common adjective + preposition combinations include
       ‘interested in’ and ‘keen on’. It’s a good idea to make a note of
       new combinations in your vocabulary notebook as you meet them.
       Remember too that a preposition is followed by a noun or a
       gerund (‘ing’ form).


**** Adjectives: -ed and -ing

A lot of adjectives are made from verbs by adding -ing or -ed:

-ing adjectives:

The commonest -ing adjectives are:

amusing, shocking surprising frightening interesting disappointing exciting tiring worrying boring terrifying annoying

If you call something interesting you mean it interests you.
If you call somethig frightening you mean it frightens you.

I read a very interesting article in the newspaper today.
That Dracula film was absolutely terrifying.

-ed adjectives:

The commonest -ed adjectives are:

annoyed bored frughtened worried tired closed excited delightted disappointed


If something annoys you, you can say you feel annoyed. 

The children had nothing to do. They were bored.

****  Order of adjectives

Sometines we use more than one adjective in front of a noun:

He was a nice intelligent young man.
She had a small round black wooden box.

Opinion adjectives:

Some adjectives give a general opinion. We can use these adjectives to describe almost any noun.

| good      | bad       | lovely    | strange   |
|-----------+-----------+-----------+-----------|
| beautiful | nice      | billiant  | excellent |
|-----------+-----------+-----------+-----------|
| awful     | important | wonderful | nasty     |
|-----------+-----------+-----------+-----------|

Some adjectives give a specific opinion. We only use these adjectives to describe particular kinds of noun:

Food: tasty; delicious
Furniture, buildings: comfortable; uncomfortable
People, animals: clever; intelligent; friendly

We usually put a general opinion in front of specific opinion:

Nice tasty soup.
A nasty uncomfortable armchair.
A lovely intelligent animal.

Usually we put an adjective that gives an opinion in front of an adjective that is descriptive:

A nice red dress; a silly old man; those horrible yellow curtains

We often have two adjectives in front of a noun:

A hansome young man; a big black car; horrible big dog

Sometimes we have three adjectives, but this is unusual:

a nice handsome young man;
a big black American car;
that horrible big fierce dog

Adjectives usually come in this order:

|               1 |                2 |    3 |     4 |   5 |      6 |           7 |        8 |
|-----------------+------------------+------+-------+-----+--------+-------------+----------|
| General opinion | Specific opinion | Size | Shape | Age | Colour | Nationality | Material |
|-----------------+------------------+------+-------+-----+--------+-------------+----------|

We use some adjectives only after a link verb:

| afraid  | alive | alone  | asleep |
| content | glad  | ill    | ready  |
| sorry   | sure  | unable | well   |

Some of commonest -ed adjectives are normally used only after a link verb:
annoyed; finished; bored; pleased; thrilled

We say:

Our teacher was ill.
My uncle was very glad when he heard the news.
The policeman seemed to be very annoyed

but we do not say:

We had an ill teacher.
When he heard the news he was a very glad uncle
He seemed to be a very annoyed policeman

A few adjectives are used only in front of a noun:

| nourth | nourthern | countless  | eventful |
| south  | southern  | occasional | indoor   |
| east   | eastern   | lone       | outdoor  |
| west   | western   |            |          |

We say:

He lives in the eastern district.
There were countless problems with the new machinery.

but we do not say:

The district he lives in is eastern
The problems with the new machinery were countless.

**** Comparative and superlative adjectives
We use  comparative adjectives to describe people and things:

This car is certainly better but it's much more expensive.
I'm feeling happier now
We need a bigger garden.

We use than when we want to compare one thing with another:

She is two years older than me.
New York is much bigger than Boston.
He is better player than Ronaldo.
France is a bigger country than Britain.

When we want to describe how something or someone changes we can use two comparatives with AND:

The balloon got bigger and bigger.
Everything is getting more expensive.
Grandfather is looking older and older.

We often use the with comparative adjectives to show that one thing depends on another:

When you drive faster it is more dangeros.
> The faster you drive, the more dangerous it is.
When they climbed hogher it got colder.
> The higher they climbed, the colder it got.

Superlative adjectives:

We use THE with a superlative:

It was the happiest day of my life.
Everest is the highest mountain in the world.
That's the best film I have seen this year.
I have three sisters, Jan is the oldest and Angela is the youngest.

**** Intensifiers

We use words like VERY, REALLY and EXTERMELY to make adjectives stronger:

It's a very interesting story.
Everyone was very excited.
It's a really interesting story.
Everyone was extremely excited.

We call these words INTENSIFIERS. Other intensifiers are:

| amazingly  | exxeptionally | incredibly |
|------------+---------------+------------|
| remarcably | particularly  | unusually  |
 
We also use enough to say more about an adjective, but enough comes after its adjective:

If you are seventeen you are old enough to drive a car.
I can't wear those shoes. They're not biig enough.

Intensifiers with stong adjectives:

Strong adjectives are words like:

enermouse, huge = very big
tiny = very small
brilliant = very clever
awful; terrible; disgusting; dreadful = very bad
certain = very sure
excellent; perfect; ideal; wonderful; splendid = very good
delicious = very tasty

We do not normally use VERY with these adjectives. We do not say something is "very enermouse" or someone is "very brilliant".

With strong adjectives, we normally use intemsifiers like:
| absolutely | completely    | toatally     | utterly |
|------------+---------------+--------------+---------|
| really     | exceptionally | particularly | quite   |

The film was absolutely awful.
He was an exceptionally brilliant child.
The food smelled really disgusting.

**** Mitigators

Mitigators are the opposite of intensifiers. When we want to make an adjective less strong we use these words:

fairly - rather - quite

By the end of the day we were rather tired.
The film wasn't great but it was quite exciting.

and in informal English: pretty

We had a pretty good time at the party.

Quite

When we use QUITE with a strong adjective it mean the same as absolutely.

The food was quite awful. = The food was absolutely awful.
As a child he was quite brilliant. = As a child he was absolutely brilliant.


Mitigators with comparatives:

We use these words and phrases as mitigators:

a bit -just a bit - a little - a little bit - just a little bit - rather - slightly

She's a bit younger than I am.
It takes two hours on the train but it is a little bit longer by road.
This one is rather bigger (than the other one).

We use slightly and rather as mitigators with comparative adjectives in front of a noun:

This is a slightly more expensive model than that one.
This a rather bigger one than other.

Adjectives as intensifiers:

We use some adjectives as intensifiers:

absolute
total - complete
utter - perfect
real

We say:

He's a complete idiot.
They were talking utter nonsense.

... but we do not say:

The idiot was complete.
The nonsense they were talking was utter.

**** Noun modifiers
We often use two nouns together to show that one thing isa part of something else:

the village church; the car door; the kitchen window; the chair leg; my coat pocket; London residents

We do not use a possesive form for these things. We do not talk about:

The car's door; the kitchen's window; the chair's leg

We can use noun modofiers to show what something is made of:

a gold watch; a leather purse; a metal box

We often use noun modifiers with nouns ending in -er and -ing;
an office worker; a jewellery maker; a potato peeler; a shoping list; a swimming lesson; a walking holiday.

We use measurement, age or vaalue as noun modifiers:

a thirty kiligram suitcase; a two minute rest; a five thousand euro platinum watch;
a fifty kilometre journey;

We often put two nouns together and readers/listeners have work out what they mean.
So:

an ice bucket = a bucket to keep ice in
an ice cube = a cube made of ice
an ice breaker = a ship which breaks ice
the ice age = the time when much of the Earth was coveres in ice.

Sometimes we find more than two nouns together:

London office workers; grammar practice exercises

Position of noun modifiers

Noun modifiers come after adjectives:

The old newspapar seller
A tiring fifty kilometre journey

*** Adverbials
We use adverbs to give mire information about the verb.

We use adverbials of manner to say how something happens or how something is done:

The children were playing happily.
He was driving as fast as possible.

We use adverbials of place to say where something happens:

I saw him there.
We met in London.

We use adverbials of time to say when ot how often something happens:

They start work at six thirty.
They usually go to work by bus.

We use adverbials of probability to show how certain we are about something.
Perhaps the wather will be fine.
He is cartainly coming to the party.

**** How we make adverbials

An adverbial can be an adverb:

He spoke angrily.
They live here.
We will be back soon.

Or an adverb with an intensifier:

He spoke really angrily.
They live just here.
We will go quite soon.
We will go as soon as possible.

Or a phrase with a preposition:

He spoke in an angry voice.
They live in London.
We will go in a few minutes.

**** Where do adverbials go in a sentence?

We normally put adverbials after the verb:

He spoke angrilly.
They live just here.
We will go in a few minutes.

or after the object or complement:

He opened the door quietly.
She left the money on the table.
We saw our friends last night.
You are looking tired tonight.

But adverbials of frequency (how often) usually come in front of the main verb:

We usually spent our holidays with our grandparents.
I have never seen William at work.

But if we want to emphasise an adverbial we can put it at the beginning of a clause:

Last night we saw our friends.
In a few minutes we will go.
Very quitely he opened the door.

If we want to emphasise an adverb of manner we can put it in front of the main verb:

He quietly opened the door.
She had carefully put the glass on the shelf.
**** Adverb of manner
We use adverbs to give more information about the verb.

We use adverbials of manner to say how something happens or how sonething is done:

The children were playing happily.
He was driven as fast as it possible.

We use adverbials of place to say where something happens:

I saw him there.
We met in London.

We use adverbial of time to say when or how often something happens:

They start work at six thirty.
They usually go to work by bus.

We use adverbials of pobability to show how certain we are about something.

Perhaps the weather will be fine.
He is certainly coming to the party.

*** BBC Learning English

**** Suffixes
-ee creates a noun meaning 'person who receives an action'.

Example words: interviewee, trainee, employee, refugee, absentee

Example sentence: My company has six thousand employees.


-able creates an adjective meaning that the subject can do something OR that something can be done to it.

Example words: excitable, employable, pleasurable, enjoyable, loveable, readable, breakable, moveable

Example sentence: I didn’t like his last book – it wasn’t very readable.


-ible is a different spelling of -able.

Example words: responsible, visible, horrible, terrible

Example sentence: Stars are only visible at night.


-ness creates a noun which describes a quality or state.

Example words: happiness, nervousness, politeness, sadness, sickness, kindness, meaninglessness

Example sentence: He missed two days of work because of sickness.
**** Question forms
In English, there are two basic types of question.

1. Yes/no questions often begin with the verb to be, but can also begin with other auxiliary verbs, such as do. We ask these when we want a yes or no answer.

Dave: Are you hungry?
Mike: Yes, I’m starving. 

Sarah: Did you get here on time?
Emily: No, I missed the bus!

2. Wh-questions start with a question word, such as who, what, where, when, why or how. We ask this type of question when we want different kinds of information. These questions cannot be answered with a yes or no.

Dave: Why are you so hungry?
Mike: I didn’t eat breakfast.

Sarah: When did you get here?
Emily: About half an hour ago.

Form

Yes/no questions that begin with the verb to be are made with to be + subject.

Are you playing football tomorrow?

Was the weather nice yesterday?

If we start with an auxiliary verb, the order is auxiliary + subject + main verb.

Can Jenny speak Chinese?
Did you go to the cinema on Saturday?

Wh-questions can be used to ask about the subject or object of the verb. Compare these questions:

Who loves Lucy?
Who does Lucy love?

For subject questions, the order is question word + verb + object.

Who wants ice cream for dessert?
Who broke the mirror in the dining room?
Who answered the phone?

The object question form is question word + auxiliary + subject + verb.

What did you do at the weekend?
Where does your brother work?
Who will you ask for help?

Take Note

Asking questions with ‘how’

The question word how is usually combined with other words when asking for information, such as size, someone’s age, or the price of something.

How big is your apartment?
How old are your children now?
How much is the black dress in the window?

**** Present Simple and Present Continuous

We use present simple for:

- thing that we do regulary
- facts and truths
- habits
- permanent sitiations

We often use adverbs of frequency and time expressions like every day, once a week, on Fridays/

I check my email every day. (regular activity)

Sheryl works at the bank. (permanent situation)

We use present continuous for:

- things that are happening now - at the time we are speaking
- temporary situations
- activities that are in progress

We often use time expressions like at the moment, today, this week.

Just a minute. I'm checking my email. (now)
She usually works in London, but she's working from home this week. (temporary situation)
I'm studying Economics. (activity in progress)


Present Simple - Positive

This is made of: subject + infinitive without 'to' for I, you, we and they. For he, she and it, we add -s or -es to the infinitive.

I wear a suit for work. Sarah wears a dress. 


Present Continuous - Positive

This is made of subject + am/is/are + verb-ing.

The phone's ringing - can you answer it?


Present Simple - Negative

This is made of subject + don’t (do not) or doesn't (does not) + infinitive without 'to'

I don't eat meat. John doesn't eat fish.


Present Continuous - Negative

This is made of subject + am/is/are not + verb-ing.

I'm not wearing a coat.


Present Simple Wh- Questions

These are made from question word + do/does + subject + infinitive without 'to'.

Why do you want a new phone?


Present Simple Yes/No Questions

The form is do/does + subject + infinitive without 'to'.

Does Mahmood read the news online every day?


Present Continuous Wh- Questions

The form is question word + am/is/are + subject + verb-ing.

What are you doing?


Present Continuous Yes/No Questions

The form is am/is/are + subject + verb-ing.

Is it raining?


Spelling changes

In the present simple, regular verbs end in -s or -es, but -y changes to -i.

marry – marries      study – studies

In the present continuous, all verbs end in -ing, but sometimes the spelling changes.

make – making   sit – sitting    die – dying     
Take note: spelling

In the present simple, regular verbs end in -s or -es, but -y changes to -i.
 

marry – marries      
study – studies 


In the present continuous, all main verbs end in -ing, but sometimes the spelling changes.

make – making  
sit – sitting    
die – dying  

Take note: verbs we don’t use in the present continuous

There are some verbs that we don’t usually use in the continuous form. They are often verbs linked to the senses and thinking, for example: hear, see, smell, hate, know, understand, believe, want, need.

Wrong: Could you explain that again? I’m not understanding.
Correct: Could you explain that again? I don’t understand.

**** Adjectives and Adverbs

Adjectives

Meaning
Adjectives are words which describe nouns.

Examples

scruffy - not neat or clean
He wore a scruffy old t-shirt.

casual - informal and comfortable
I like to wear casual clothes when I relax at home.

formal - serious, important clothes for special events e.g. a wedding


you must wear a formal suit to the wedding

smart - nice and stylish
 

Dave looks very smart with his new shirt and tie 

fashionable - new and popular


Baggy pants were fashionable a few years ago.

Adverbs

Meaning
Adverbs are words that describe verbs.

Examples
scruffily
He dressed scruffily in an old t-shirt. 

casually
I dress casually when I relax at home.

smartly
Dave's smartly dressed today in a new shirt and tie.

formally
Everyone will dress formally at the wedding.

fashionably
Sarah was fashionably dressed in a flowery shirt.

**** Prefixes
un-

unhappy - not happy- The football fans very unhappy when their team lost
uncooked - not cooked- You can't eat these uncooked apples. They are very sour.
unclean - not clean

in-

intolerable - cannot be tolerates or accepted- This is heat is intolerable. It's making me feel ill.
inexpensive - not expensive; cheap- The shop sells inexpensive second-hand computers.
inactive - not active- He's put on weight becouse he is so inactive. He should join a gym.

dis-
disagree - to not agree- I disagree with my sister about everything.
disgrace - something to be ashamed of- Your table manners are a disgrace
disgusting - so horrible that you feel sick- There's a disgusting smell in the bathroom - open a window, quickly!

**** "Like" for preference and description
We world "like" can be used in a number of different ways. We look at two of these:
1. "Like" can be used as a verb to express a preference or interest in a person, place or thing.
I like yur earrings. Where did you get them?
2. "Like" can also be used as a preposition to ask for a description of a person, place or thing.
Emily: What's your English teacher like?
Bob: She's kind and intelligent.

Forms (as verb)
We use like as a verb in this way: subject + like + object

Emily: I like sports. Do you like playing football?

Bob: Yes, I do. I also like fishing. Do you like fishing?

Emily: No, I don’t.


Positive

I like shopping.

Bob likes playing football.


Negative

I don’t like sports.

Emily doesn’t like reading.


Question

Do you like horror movies?

Does Bob like cartoons?


Form (as preposition)

We use like as a preposition in this set phrase:

what + to be + noun/noun phrase + like?

Andrea: What’s California like?

Jamie: It’s hot and sunny. 


Is the question asking for preference or description?

When asking for preference, we use like with do or does in the question.

Do you like playing tennis?

What sports do you like? 


We don’t use do or does when asking for a description. Instead, we start the question with what and endwith like.

What is she like?

What’s London like?

What was your weekend like?


Time and place

We can specify time and place when asking for a description by using a phrase at the end of the question.

What will the weather be like next weekend?

What are the beaches like in Barcelona?

**** Adverbs of frequency
Adverbs give us more information about a verb. Adverbs of frequency tell us how often an activity happens. There are many adverbs to choose from. Here are some of the most common ones, listed from most frequent to least frequent.

I ALWAYS walk to work.
They usually arrive late.
My father often forget his birthday.
He sometimes wakes up early.
I rarely drink tea in the morning.
You hardly ever say you love me.
Jenny never drinks coffee in the evening.

We can use adverbs of frequency with the verb to be.

We are never unhappy.
This time of year is usually the coldest.

We can use modal verbs with adverbs of frequency. For example, we can use the auxiliary verbs can, should and might, which express ability (can), obligation (should), and possibility (might).

Laura can sometimes hold her breath for over minute.
You should always put on suncream when it's very sunny.
We might never see each other again.

Form
Adverbs of frequency go before the main verb.

subject + adverb + main verb

I always eat breakfest.
They sometimes take a taxi.

They go after the verb 'to be'.
subject + to be + adverb + main verb

I am always late to work.
He is often ready for work at 6 am.
We aren't usually hungry in the morning.

They go between a modal and the main verb.
subject + modal + adverb + main verb

You should always wear a helmet.
I can sometimes hear my neighbour's TV.


Positive
I always take the bus into town.
Jenny is often late for work.

Negative
The adverbs of frequency goes between the auxilary and the main verb.
We don't usually watch TV after lunch.
They can't always wait for you.

It goes after 'to be'.
I am not always this organised.
They aren't usually late.

Question
For questions, the order is auxiliary + subject + adverb of frequency + verb.
Do you always eat here?
Does he usually do that?

Negative adverbs
Negative adverbs such as never, seldom, rarely and hardly ever cannot be used in negative sentences. The following sentence is incorrect, because it has a double negative.

WRONG: The weather isn't never sunny.
CORRECT: The weather is never sunny.

SOMETIMES
Sometimes can go befor the subject, before the main verb, and after the main verb.

Sometimes we go fishing.
We sometimes go fishing.
We go fishing sometimes.


Adverbs of frequency and the present continuous

We usually use adverbs of frequency with the present simple, but they can also be used with the presentcontinuous. The adverb comes between the auxiliary and the main verb.


She’s always losing her phone.

**** Adverbials of place

Location

We use prepositions to talk about where someone or something is.

He was standing by the table.
You'll find it in the cupboard.
Sign your name here - at the bottom of the page.

Direction

We use adverbials to talk about the direction where someone or something is moving.

Walk past the bank and keep going to the end of the street.
The car door is very small so it's difficult to get into.

Distance

We use adverbials to show how far things are.

Birmingham is 250 kilometres from London.
We were in London. Birmingham was 250 kilometres away.

***** Adverbials of location
We use prepositions to talk about where someone is:

| above  | among   | at    | behind     | bellow     | beneath |
| beside | between | by    | in         | in between | inside  |
| near   | next to | on    | opposite   | outside    | over    |
| round  | through | under | underneath |            |         |

He was standing by the table.
She lives in a vilage near Glasgow.
You'll find it in the cupboard.

We use phrases with of as prepositions:

| at the back of | at the top of   | at the bottom of | at the end of    |
| on top of      | at the front of | in front of      | in the middle of |

There were some flowers in the middle of the table.
Sign your name here - at the bottom of the page.
I can't see. You're standing in front of me.

We can use right as an intensifier with some of these prepositions:

He was standing right next to the table.
There were some flowers right in the middle of the table.
There's a wood right behind our house.

***** Adverbials of direction
We also use prepositional phrasesto talk about direction:

| across | along  | back | back to | down | into    |
| onto   | out of | past | through | to   | towards |

She runout of the house.
Walk past the bank and keep going to the end of the street.

We also use adverbs and adverb phrases for place and direction:

| abroad     | away    | anywhere  | downstairs | downwards |
| everywhere | here    | indoors   | inside     | nowhere   |
| outdoors   | outside | somewhere | there      | upstairs  |

I would love to see Paris. I've never been there.
The bedroom is upstairs.
It was so cold that we stayed indoors.

We often have a preposition at the end of a clause:

This is the room we have our meals in.
The car door is very small so it's  difficult to get into.
I lifted the carpet and looked underneath.

***** Adverbials of distance
We use adverbials to show how far things are:

Birmingham is 250 kilometres from London.
Birmingham is 250 kilometres away from London.
It is 250 klometres from Birmingham to London.

Sometimes we ise preposition at the end of a clause:

We were in London. Birmingham was 250 kilometres away.
Birmingham was 250 kilometres off.

**** Adverbials of time

We use adverbials of time to say:

WHEN something happened:

I saw Mary yesterday.
She was born in 1978.
I will see you later.
There was a storm during the night.

for HOW LONG:

We waited all day.
They have lived here since 2004.
We will be on holiday from July 1st until August 3rd.

HOW often (frequency):

They usually watched television in the evening.

We often use a noun phrase as a time adverbial:

| yesterday | last week/month/year | one day/week/month       | last Saturday            |
|-----------+----------------------+--------------------------+--------------------------|
| tomorrow  | next week/month/year | the day after tomorrow   | next Friday              |
|-----------+----------------------+--------------------------+--------------------------|
| today     | this week/month/year | the day before yesterday | the other day/week/month |
|-----------+----------------------+--------------------------+--------------------------|


***** Time and dates
We use phrases with prepositions as time adverbials:

We use AT with:

clock times: at seven o'clock - at nine thirty - at fiften hundred hours.
mealtimes: at breakfast - at lunchtime - at teatime

... and in these phrases:

at night-at weekend-at Christmas-at Easter

We use IN with:

seasons of the wear: in spring/summer/autumn/winter - in the spring/summer/autumn/winter
years and centuries: in 2009 -in 1998 -in the twentieth century
months: in January/February/March etc.
parts of the day: in the morning - in the afternoon - in the evening

We use ON with:

days: on Monday/Tuesday/Wednesday etc - on Christmas day - on my birthday.
dates: on the thirty first of July - on June 15th

Note: We say at night when we are talking about all of the night:

When there is no moon it is very dark at night.
He sleeps during the day and works at night.

but we say in the night when we are talking about a short time during the night:

He woke up twice in the night.
I heard a funny noise in the night.

We use the adverb ago with the past simple to say how long before the time of speaking something happened:

I saw Jim about three weeks ago.
We arrived a few minutes ago.

We can put time phrases together:

We will meet next week at six o’clock on Monday.
I heard a funny noise at about eleven o’clock last night.
It happened last week at seven o’clock on Monday night.

*****  How long

We use FOR to say how long:

We have been waiting for twenty minutes.
They lived in Manchester for d=fifteen years.

We use SINCE with the presrnt perfect or the past perfect to say WHEN SOMETHING STARTED:

I have worked her since December.
They had been watching since seven o'clock in the morning.

We use FROM...TO/UNTIL to say when something starts and finishes:

They stayed with us from Monday to Friday.
We will be on holiday from the sixteenth until the twentieth.

***** How often

The commonest adverbials of frequency are:

| always | never  | normally  | occasionally | often |
| rarely | seldom | sometimes | usually      |       |

We usually put adverbials of frequency in front of the main verb:

We OFTEN spend Christmas with friends.
I have NEVER enjoyed myself so much.

but they usually come after the verb BE.

He was always tured in the evening.
We are never late for work.

We use the adverbial a lot to mean OFTEN or FREQUENTLY. It comes at the end of the clause.

We go to the cinema a lot.

but before another time adverbial:

We go to the cinema a lot at the weekend.

We use MUCH with a negative to mean not often:

We don't go out much. (We  don't go out often)

We use ho often or ever to ask questions about frequency, HOW OFTEN comes at the beginng of the clause:

How often do you go to the cinema?
How often have ypu been here?

ever comes before the main verb:

Do you ever go to the cinema at the weekend?
Have you ever been there?

Longer frequency phrases, like every year or three times a day usually come at the end of the clause:

I have an English lesson twice a week.
She goes to see her mother every day.

***** Already, still, yet and no longer
We use STILL to show that something continues up to a time in the past present or future.
It goes in front of the main verb:

The children still enjoed playing games.
They are still living next door.
We will still be on holiday.

...or after the present simple or the past simple of be.

Her grandfather is still alive.
They were still unhappy.

We use already to show that something has happened sooner than it was expected to happen. Like STILL, it comes before the main verb:

The car is OK. I've already fixed it.
It was early but they were already sleeping.

...or after the present simple or past simple of the verb be:

It was early but we were already tired.
We are already late.

We use YET in a negative or interrogative clause, usually with perfective aspect to show that something has not happened by a particular time. YET comes at the end of the sentence:

It was late, but they hadn't arrived yet.
Have you fixed the car yet?
She won't have sent the email yet.

***** Adverbials of probability
We use adverbials of probability to show how certain we are about something. The most frequent adverbials of probability are:

certainly - definitely - maybe - possibly
clearly - obviously - perhaps - probably

MAYBE and PERHAPS usually come at the beginning of the clause:

Perhaps the weather will be fine.
Maybe it won't rain.

Other adverbs of possibility usually come in front of the main verb:

He is certainly coming to the party.
Will they definitely be there?
We will possibly come to England next year.

but after AM, IS, ARE, WAS, WERE:

They are definitely at home.
She was obviously very surprised.

***** Comparative adverbs

We can use comparative adverbs to show change or to make comparisons:

I forget things more often nowadays.
She began to speak more quickly.
They are working harder now.

We often use THAN with comparative adverbs

I firget things more often than with comparative adverbs

I forget things more often than Iused to.
Girls usually work harder than boys.

Intensifiers:

We use these words and phrases as intensifiers with these patterns:

much - far - a lot - quite a lot - a great deal - a good deal - a good bit - a fair bit

I forget things much more often nowadays.

Mitigators:

We use these words and phrases as mitigators:

a bit - just a bit - little - a little bit - just a little bit - slightly

She began to speak a bit more quickly

***** Superlative adverbs
We can use superlative adverbs to make comparisons:

His ankles hurt but his knees hurt worst.
It rains most often at the beginning of the year.

Intensifiers:

When we intensify a superlative adverbs we often use THE in front of the adverb, and we use these words and phrases as intensifiers:

easily - much - far - by far
**** Nouns
***** Count nouns
Count nouns have two forms: singular and plural.
Singular count nouns refer to one person or thing:

a book; a teacher; a wish; an idea

Plural count nouns refer to more than one person or thing:

books; teachers; wishes; ideas

Singular count nouns

Singular count nouns cannot be used alone. They must have a deteminer:

the book; that English teacher; a wish; my lates idea

Plural forms

We usually add ~s to make a plural noun:

book > books; school > schools; friend > friends

We add ~es to nouns ending in -ss; -ch; -s; -sh; -x

class > classes; watch > watches; gas > geses; wish > wishes; box > boxes

When a noun ends in a consonant and -y we simply add ~s.

boy > boys; day > days; play > plays

Some common nouns have irregular plurals:

Man > men; woman > woman; child > children; foot > feet; person > people

Plural count nouns do not have a determiner when they refer to people or things as a group:

Computers are very expensive.
Do you sell old books?

***** Uncount nouns
Some nouns in English are uncount nouns.

We do not use uncount nouns in the plural and we do not use them with the indefinite article, a/an.
We ate a lot of food.
We bought some new furniture.
That's useful information.

We can use some quantifiers with uncount nouns:
He gave me some useful advice.
They gave us a lot of information.

Uncount nouns often refer to:
Substances: food, water, wine, salt, bread, iron
Human feelings or qualities: anger, cruelty, happiness, honesty, pride
Activities: help, sleep, travel, work
Abstract ideas: beauty, death, fun, life

Common uncount nouns

There are some common nouns in English, like accommodation, which are uncount nouns even though they have plurals in other languages:

advice
baggage
equipment
furnoture
homework
information
knowledge
luggage
machinery
money
news
traffic

Let me give you some advice.
How much luggage have you got?

If we want to make these things to make these things countable, we use expression like:

a piece of...
pieces of...
a bit of ...
bits of ...
an item of ...
items of ...

Let me give you a piece of advice.
That's a useful piece of equipment.
We bought a few bits of furniture for the new apartment.
She had six separate items of luggage.

but we do not use accommodation, money and traffic ib this way.

***** Common problems with count/uncount nouns
1. Uncount nouns used as count nouns

Altough substances  are usually uncount nouns

Would you like some cheese?
Coffe keeps me awake at night.
Wine makes me sleep.

... they can be also used as count nouns:

I'd like a coffee please. = I'd like a [cup of] coffee.
May I have a white wine. = May I have a [glass of] white wine.
They sell a lot of coffees. = They sell a lot of [different kinds of] coffee.
I prefer white wines to red. = I prefer [different kinds of] white wine to red.
They had over twenty cheeses on sale. = They had over twenty [types of] cheese on sale.
This is an excellent soft cheese. = This [kind of] soft cheese is excellent.

2. Some nouns hsve both a count and an uncount form:

We should always have hope.
George had hopes of promotion.
Travel is a great teacher.
where did you go on your travels?

3. Nouns with two meanings

Some nouns have two meanings, one count and the other non count:

His life was in danger.
There is a serious danger of fire.

Linguistics is the study of language.
Is English a difficult language?

It's made of paper.
The Times is an excellent paper.

Other words like this are:

Other words like this are:

business
death
industry
marriage
power
property
tax
time
victory
use
work

4. Uncount nouns that end in -s

Some uncount nouns end in -s so they look like plurals even though they are singular nouns.

These nouns generally refer to:

Subject of study: mathematics, physics, economics, etc

Activities: gymnastics, athletics, etc
Games: card, darts, biliards, etc
Diseases: mmumps, measles, rabies, etc

Economics is a very difficult subject.
Billiards is easier than pool or snooker.

5. Group nouns

Some nouns, like ARMY, refer to groups of people, animals or things, and we can use them either as singular nouns or as plural nouns.

army
audience
committee
company
crew
enemy
family
flock
gang
goverment
group
herd
media
public
regiment
staff
team

We can use these group nouns either as singular nouns or as plural nouns:

My family is very dear to me.
I have a large family. They are very dear to me. (= The members of my family ...)

The goverment is very unpopular.
the goverment are always changing their mind.

Sometimes we think of the group as a single thing:

The audience always enjoys the show.
The group consist of two men and three women.

Sometimes we think of the group as several individuals;

The audience clapped their hands.
The largest group are the boys.

The names of many organisation and teams are also group nouns, but they are usually plural in spoken English:

Barcelona are winning 2-0.
The United Oil Company are putting prices up by 12%.

6. Two-part nouns
A few plural nouns, like binoculars, refer to things that have two parts.

glasses
jeans
knickers
pincers
pants
pliers
pyjamas
scissors
shorts
spectacles
tights
trainers
trousers
tweezers

These binoculars were very expensive
Those trousers are too long.

To make it clear we are talking about one of these items, we use a pair of …

I need a new pair of spectacles.
I’ve bought a pair of blue jeans.

If we want to talk about more than one, we use pairs of … :

We’ve got three pairs of scissors, but they are all blunt.
I always carry two pairs of binoculars.
 
***** Proper nouns
Names of people, places and organisations are called proper nouns. We spell proper nouns with a capital letter:

Mohammed Ali; Birmingham; China; Oxford University, the United Nations

We use capital letters for festivals:
Christmass; Deepawali; Easter; Ramadan; Thanksgiving

We use a capital letter for someone's title:

I was talking to Doctor Wolson recently.
Everything depends on President Obama.

When we give the names of books, films, plays and paintings we use capital letters for the nouns, adjectives and verbs in the name:

I have been reading "The Old Man and the Sea".
Beatrix Potter wrote "The Tale of Peter Rabbit".
You can see the Mona Lisa in the Louvre.

Sometimes we use a person's name to refer to something they have created:

Recently a Van Gogh was sold for fifteen million dollars.
We were listening to Mozart.
I'm reading an Agatha Christie.
**** Verbs
Verbs in English have four basic parts:
Base form -ing form Past tense Past participle
| work   | working   | worked   | worked  |
| play   | playing   | played   | played  |
| listen | listening | listened | lstened |

Most verbs have past tense and past participle in -ed(worked, played, listened). But many of the most frequent verbs are irregular.

***** Irregular verbs
Most verbs have past tense and past participle in -ed(worked, played, listened). But many of the most frequent verbs are irregular:
| Base form  | Past tense | Past participle |
| be         | was/were   | been            |
| begin      | began      | begun           |
| break      | broke      | broken          |
| bring      | broght     | brought         |
| build      | built      | built           |
| choose     | chose      | chosen          |
| come       | came       | come            |
| cost       | cost       | cost            |
| cut        | cut        | cut             |
| do         | did        | done            |
| draw       | drew       | drawn           |
| drive      | drove      | driven          |
| eat        | ate        | eaten           |
| feel       | felt       | felt            |
| find       | found      | found           |
| get        | got        | got             |
| give       | gave       | given           |
| go         | went       | gone            |
| have       | had        | had             |
| hear       | heard      | heard           |
| hold       | held       | held            |
| keep       | kept       | kept            |
| know       | knew       | known           |
| leave      | left       | left            |
| lead       | led        | led             |
| let        | let        | let             |
| lie        | lay        | lain            |
| lose       | lost       | lost            |
| make       | made       | made            |
| mean       | meant      | meant           |
| meet       | met        | met             |
| pay        | paid       | paid            |
| put        | put        | put             |
| run        | ran        | run             |
| say        | said       | said            |
| see        | saw        | seen            |
| sell       | sold       | sold            |
| send       | sent       | sent            |
| set        | set        | set             |
| sit        | sat        | sat             |
| speak      | spoke      | spoken          |
| spend      | spent      | sspent          |
| stand      | stood      | stood           |
| take       | took       | taken           |
| teach      | taught     | taught          |
| tell       | told       | told            |
| think      | thought    | thought         |
| understand | understood | understood      |
| wear       | wore       | worn            |
| win        | won        | won             |
| write      | wrote      | written         |
  
***** Question forms
We make questions by:

1. Moving an auxiliary to the front of the clause:

Everybody is watching >> Is everybody watching?
They had worked hard >> Had they worked hard?
He's finished work >> Has he finished work?
Everybody had been working hard >> Had everybody been working hard?
He has been singing >> Has he been singing?
English is spoken all over the world >> Have the windows been cleaned?

2. ...or by moving a modal to the front of the clause:

They will come >> Will tey come?
He might come >> Might he come?
They will have arrived by now >> Will they have arrived by now?
She would have been listening >> Would she have been listening?
The work will be finished soon >> Will the work be finished soon?
They might have been  invited to the party >>Might they have been invited to the party?

3. The present simple and the past simple have no auxiliary. We make questions by adding the auxiliary do/does for the present simple or did for the past simple:

They live here >> Do they live here?
Jphn lives here >> Does John live here?
Everybody laughed >> Did everybody laugh?

***** Verb phrases

The verb phrase in English has the following forms:

1 a main verb:

We are here.
I like it.
Everybody saw. the accident
We laughed.

The verb may be in the present tense (are, like) or the past tense (saw, laughed). A verb phrase with only a main verb expresses simple aspect

2 an auxiliary  verb ("be") and a main verb in -ing form:

Everybody is watching
We were laughing

A verb phrase with "be" and -ing expresses continuous aspect

3 an auxiliary verb ("have") and a main verb with past participle:

They have enjoyed themselves.
Everybody has worked hard.
He had finished work.

A verb with "have" and the past participle expresses perfect aspect. A verb with have/has expresses present perfect, and a verb with had expresses past perfect.

An auxiliary verb ("have" + "been") and a main verb in the -ing form:

Everybody has been working hard.
He had been singing.

A verb with "have" and "been" and the present participle expressperfect continuous aspecct. A verb with have/has express present perfect continuous, and a verb with HAD express past perfect continuous.

5 a modal verb(can, could, may, might, must, shall, should, will, would) and a main verb:

They will come.
He might come.

6 We can use modal verbs with the auxiliaries "be", "have", and "have been":

They will be listening
He might have arrived
She must have been listening.

****** Active and passive:

Transitive verbs have a passive form as well as an active form:

The hunter killed the lion.(active) <> The lion was killed by the hunter.(passive)
Someone has cleaned the windows <> The windows have been cleaned.
The passive forms are made up of the verb "be" with a past participle:

English is spoken all over the world.
The windows have been cleaned.
Lunch was being served.
The work will be finished soon.
They might have been inveted to the part.

***** Present tense
There are two tenses in English - past and present.

The present tenses in English are used:

to talk about the present
to talk about the future
to talk about the past when we are telling a story in spoken English or when we are summarising a book, film, play etc.

There are four present tense forms in English:
| Tense                       | Form                |
|-----------------------------+---------------------|
| Present simple:             | I work              |
| Present continuous:         | I am working        |
| Present perfect:            | I have worked       |
| Present perfect continuous: | I have been working |

We use these forms:

to talk about the present:

He works at McDonald's. He was worked there for three months now.
He is working at McDonald's. He has been working there for three months now.
London is the capital of Britain.

to talk about the future:

The next train leaves this evening at 17-00 hours.
I'll phone you when I get home.
He's meeting Peter in town this afternoon.
I'll come home as soon as I have finished work.
You will be tired out after you have been working all night.

***** Present simple

The present tense is the base form of the verb: I work in London.
But the third person (she/he/it) adds an -s: She works in London.

Use

We use the present tense to talk about:

something that is true in the present:

I'm nineteen years old.
He lives in London.
I'm a student.

something that happens again and again in the present:

I play football every weekend.

We use words like sometimes, often, always, and never (adverbs of frequency) with the present tense:

I sometimes go to the cinema.
She never plays football.

sometimes that is always true:

The adult human body contains 206 bones.
Light travels at almost 300,000 kilimeters per second.

something that is fixed in the future.

The school term starts next week.
The train leaves at 19-45 this evening.
We fly to Paris next week.

Questions and negatives
Look at these questions:

Do you play the piano?
Where do you live?
Does Jack play football?
Where does he come from?
Do Rita and Angela live in Manchester?
Where do they work?

With the present tense, we use DO and DOES to make questions. We use DOES for the third person (she/he/it) and we use DO for the others.

We use DO and DOES with question words like WHERE, WHAT and WHY.

But look at these questions with WHO:

Who lives in London?
Who plays football at the weekend?
Who works at Liverpool City Hospital?

Look at these sentences:

I like tennis, but I don't like football.
I don't live in London now.
I don't play the piano, but I play the guitar.
They don't work at the weekend.
John doesn't live in Manchester.
Angela doesn't drive to work. She goes by bus.

With the present tense we use DO and DOES to make negatives. We use does not (doesn't) for the third person (she/he/it) and we use do not (don't) for the others.
***** Present continuous
The present continuous tense is formed from the present tense of the verb BE and the present participle (-ing form) of a verb:

Use

1. we use the present continuous tense to talk about the present:

for something that is happening at the moment of speaking:

I'm just leaving work. I'l be home in an hour.
Please be quiet. The children are sleeping.

for something which is happening before and after a given time:

At eight o'clock we are usually having breakfast.
When I get home the children are doing their homework.

for something which we think is temporary:

Michael is at university. He's studying history.
I'm working in London for the next two weeks.

for something which is new and contrast with a previous state:

These days most people are using email instead of writing letters.
What sort of clothes are teenagers wearing nowadays? what sort of music are they listening to?

to show that something is changing, growing or developing:

The children are growing quickly.
The climate is changing rapidly.
Your English is improving.

for something which happens again and again:

It's always raining in London.
They are arguing.
Geage is great. He's always laughing.

Note: We normally use always with this use.

2. We use the present continuous tense to talk about the future:

for something which has been arranged or planned:

Mary is going to a new school next term.
What are you doing next week?

3. We can use the present continuous to talk about the past:

When we are telling a story
When we are summarising the story from a book, film or play.
***** Past tense
There are two tenses in English - past and present.

The past tense in English is used:

to talk about the past
to talk about hypotheses - thing that are imagined rather than true.
for politeness.
There are four past tense form in English:

| Tense                   | Form               |
|-------------------------+--------------------|
| Past simple:            | I worked           |
| Past continuous:        | I was working      |
| Past perfect            | I had worked       |
| Past perfect continuous | I had been working |

We use these forms:

to talk about the past:

He worked at McDonald's. He had worked there since July..
He was working at McDonalds's. He had been working since July.

to refer to the present or future in conditions:

He could get a new job if he really tried.
If Jack was playing they would probably win.

and hypotheses:

It might be dangerous. Suppose they got lost.
I would always help someone who really needed help.

and wishes:

I wish it wasn't so cold.

In conditions, hypotheses and wishes, if we want to talk about the past, we always use the past perfect:

I would have helped him if he had asked.
It was very dangerous, What if you had got lost?
I wish I hadn't spent so much money last month.

We can use the past forms to talk about the present in a few polite expressions:

Excuse me, I was wondering if was the train for York.
I just hoped you would be able to help me.
***** Perfective aspect
We use the present perfect to show that something has continued up to the present
They've been married for nearly fifty years.
She has lived in Liverpool all her life.

... or is important in the present:
I've lost my keys. I can't get into the house.
Teresa isn't at home. I think she has gone shopping.

We use the present perfect continuous to show that something has been continuing up to the present:

It's ben raining dor hours.
We've been waiting here since six o'clock this morning.

We use the past perfect to show that something continued up to a time in the past:

When George died he and Anne haad been married for nearly fifty years.

...or was important at that time in the past:

I couldn't get into the house. I had lost my keys.
Teresa wasn't at home. She had gone shopping.

We use the past perfect continuous to show that something had been continuing up to a time in the past or was important at that time in the past:

Everything was wet. It had been raining for hours.
He was a wonderful guitarist. He had been playing ever since he was a teenager.

We use will with the perfect to show that something will be complete at some time in the future:

In a few years they will have discovered a cure for the common cold.
I can come out tonight. I'll have finished my homework by then.

We use would with the perfect to refer to something that did not happen in the past but would have happened if the conditions had been right:

If you had asked me I would have helped you.
I would have helped you, but you didn’t ask me.
You didn’t ask me or I would have helped you.

We use other modals with perfective aspect when we are looking back from a point in time when something might have happened, should have happened or would have happened.

The point of time may be in the future:

We’ll meet again next week. We might have finished the work by then.
I will phone at six o’clock. He should have got home by then.

the present:

It’s getting late. They should have arrived by now.
He’s still not here. He must have missed his train.

or the past:

I wasn’t feeling well. I must have eaten something bad.
I checked my cell phone. She could have left a message.
***** Continuous aspect
Both tenses have a continuous form. These continuous tenses are formed with the verb BE and the -ING form of the verb:

We use continuous aspect:

for something happening before and after a given time.

He's getting on the train. [before and after the moment of speaking]
It was quarter past ten. We were watching the news on television.

for something continuing before and after another action:

Mother will be cooking the dinner when we get home.
We were waiting for the bus when it started to rain.

for something continuing for sone time:

Everybody will be waiting for us.
They had been working hard all day.

for something happening again and again:

They've been doing that every day this week.
The children were always shouting.
He will be practising the piano every night.

for something temporary:

We are renting an apartment until our hous is ready..
he was working in a garage during thw vacation.

for something new:

We have moved from Birmingham. We're living in Manchester now. He had left University and was working in his father's business.

to describe something changing or developing:

Everything has been getting more difficult.
He was growing more bad-tempered every day.
***** Transitive verbs have both active and passive forms:

      | active                          | passive                        |
      | The hunter killed the lion      | The lion was killed the hunter |
      | Someone has cleaned the windows | The windows have been cleaned  |

The passive forms are made up of the verb BE with a PAST PARTICIPLE:

English is spoken all over the world
The windows have been cleaned
Lunch was being served
The work will be finished soon
They might have been invited to the party

We sometimes use the verb GET to form the passive:

Be careful with the glass. It might get broken.
Peter got hurt in a crash.

If we want to show the person or thing doing the action we use BY.

She was attacked by a dangerouus dog.
The money was stolen by her husband.

We can use the indirect object as the subject of a passive verb:

| active                                         | passive                                    |
| I gave him book for his birthday               | He was given a book for his birthday       |
| Someone sent her a cheque for a thousand euros | She was sent a cheque for a thousand euros |
|                                                |                                            | 

We can use phrasal verbs in the passive:

| active                            | passive                                |
| They called off the meeting       | The meeting was called off             |
| His grondmother looked after him  | He was looked after by his grandmother |
| They will send him away to school | He will be sent away to school         |

Some verbs very frequently used in the passive are followed by the to-infinitive:

| be supposed to  | be expected to | be asked to |
| be scheduled to | be allowed to  | be told to  |


John has been asked to make a speech at the meeting.
You are supposed to wear a uniform.
The meeting is scheduled to start at seven.

***** to + infinitive

We use the TO-infinitive:

to express purpose (to answer "Why...?"):

He bought some flowers to give to his wife.
He locked the door to keep everyone out.

We sometimes say IN ORDER TO or IN ORDER NOT TO:

We set off early so as to avoid the traffic.
They spoke quietly so as not to wake the children.

After certain verbs, particularly verbs of thinking and feeling:

choose, decide, expect, forget, hate, hope, intend, learn, like,
love, mean, plan, prefer, remember, want, would like, would love

... And verbs of saying:

agree, promise, refuse

They decided to start a business together.
Remember to turn the lights out.

Some verbs are followed by a direct object and the infinitive:

advise, ask, encourage, invite, order, persuade, remind, tell, warn,
expect, intend, would prefer, want, would like

She reminded me to turn the light out.
He encouraged his friends to vote for him.

After certain adjectives.

Sometimes the TO-infinitive gives a reason for adjective:

disappointed
glad
sad
happy
anxious
pleased
surprised
proud
unhappy

We were happy to come to the end of our journey  = We were happy because we had come to the end of our journey.
John was surprised to see me = He was surprissed because he saw me.

Other adjectives with the TO-infinitive are:

able
unable
due
eager
keen
likely
unlikely
ready
prepared
unwilling
willing

Unfortunately I was unable to work for over a week.
I am really tired. I'm ready to go to bed.

We often use the TO-infinitive with these adjectives after it to give opinions:

difficult
easy
possible
impossible
hard
right
wrong
kind
nice
clever
silly
foolish

It's easy to play the piano, but it's very difficult to play well.
He spoke so quickly it was impossible to understand him.

We use the preposition FOR to show who these adjectives refer to:

difficult
easy
possible
impossible
hard

It was difficult for us to hear what she was saying.
It is easy for you to criticise other people.

We use the preposition OF with other adjectives:

It's kind of you to help.
It would be silly of him to spend all his money.

As a postmodifier after abstract like:

ability
desire
need
wish
attempt
failure
opportunity
chance
intention

I have no desire to be rich.
They gave him an opportunity to escape.
She was annoyed by her failure to answer the question correctly.

We often use a TO-infinitive as a postmodifier after an indefinite pronoun:

When I am travelling I always take something to read.
I was all I had no one to talk to.
There is hardly anything to do in most of these small towns.

***** -ing forms
We can use the -ing form of the verb:

as a noun:

I love swimming.
Swimming is very good for your health.
You can get fit by swimming regulary.

-ing nouns are nearly always uncount nouns

as an adjective:

The main problem today is rising prices.
That programme was really boring.
he saw a woman lying on the floor.

Because the -ing noun or adjective is formed from a verb it can have any of the patterns which follow a verb, for example:

... an object:

I like playing tennis.
I saw a dog chasing a cat.

... or an adverbial:

You can earn a lot of money by working hard.
There were several people waiting for the bus.

... or a clause:

I heard someone saying that.

The -ing noun can be used:

as the subject of a verb:

Learning English is not easy.

as the object of a verb:
We enjoy learning English.
Common verbs followed by an -ing object are:

| admit   | like  | hate    | start | avoid  |
|---------+-------+---------+-------+--------|
| suggest | enjoy | dislike | begin | finish |


as the object of a preposition

Some people are not interested in learning English.

The -ing adjective can come:

in front of a noun:

I read an interesting article in the newspaper today.
We saw a really exciting match on Sunday.

The commonest -ing adjectives used in front of the noun are

| amusing | interesting | worrying | shocking   | disappointing |
| boring  | surprising  | exciting | terrifying | frightening   |
| tiring  | annoying    |          |            |               |

after a noun:

Who is that man standing over there?
The boy talking to Angela is her younger brother.

and especially after verbs like SEE, WATCH, HEAR, SMELL etc.

I heard someone playing the piano.
I can smell something burning
***** talking about the present
1. We use the present simple:
to talk about something happening regularly in the present:

The children come home from school at about four.
We often see your brother at work.

to talk about happening continually in the present:

They live next door to us.
He work for the Post Office.

to talk about things which are generally true:

Water boils at 100 degrees Celsius.
The Nile is the longest river in Africa.

2. We use the present continuous:

to show that something in the present temporary:

We are living in a rented flat at present.
My wife usually goes it to the office, but she is working at home today.

for something happening regularly in the present before and after a given time:

I'm usually getting ready for work at eight o'clock.
When I see George he's always reading his newspaper.

for something happening before and after the moment of speaking:

I can't hear you. I'm listening to my Ipod.
Be quiet. The children are sleeping.

3. We use modal verbs

to talk about the present when we are not sure of something:

I don't know where Henry is. He might be playing tennis.
Who's knocking at the door? I don't know. It could be the police.

***** Talking about past events and situations:
We use the past simple:

when we are talking about an event that happened at a particular time in the past

We ariives home before dark
The film started at seven thirty.

when we are talking about something that continued for some time in the past

Everybody worked hard through the winter.
We stayed with our friends in London.

When we are talking about something that happened several times in the pastwe use 

the past simple:

Most evenings we stayed at home and watched DVDs.
Sometimes they went out for a meal.

...or used to

Most evening we used to stay at home and watch DVDs.
We used to go for a swim every morning.

... or would

most evenings he would take the dog for walk.
They would often w=visit friends in Europe.

WARNING: We do not normally use would with stative verbs.

We use the past continuous:

when we are talking about something which happened before and after a given time in the past

It was just after ten. I was watching the news on TV.
At half-time we were losing 1-0.

when we are talking about something happening before and after another action in the past:

He broke his leg when he was playing rugby.
She saw Jim as he was driving away.

2. The past in the past

When we are looking back from a point in the past to something earlier in the past we use the past perfect:

Helen suddenly remembered she had left her keys in the car.
When we had done all our shopping we caught the bs home.
They wanted to buy a new computer, but they hadn't saved enough money.
They would have bought a new computer if they had saved enough money.

3. The past and the present:

We use the present perfect:

when we are talking about the effects in the present of something that happened in the past:

I can’t open the door. I’ve left my keys in the car.
Jenny has found a new job. She works in a supermarket now.

when we are talking about something that started in the past and still goes on:

We have lived here since 2007. (and we still live here)
I have been working at the university for over ten years.

4 The future in the past
When we talk about the future from a time in the past we use:

would as the past tense of will
He thought he would buy one the next day.
Everyone was excited. The party would be fun.

was/were going to
John was going to drive and Mary was going to follow on her bicycle.
It was Friday. We were going to set off the next day.

the past continuous:
It was September. Mary was starting school the next week.
We were very busy. The shop was opening in two weeks time.


***** Talking about the future
1. When we know about the future we normally use the present tense.
We use the present simple for something scheduled or arranged:

We have a lesson next Monday.
The train arrives at 6.30 in the morning.
The holiday start next week.
It is my birthday tomorrow.

We can use the present continuous for plans or arrangements:

I'm playing football tomorrow.
They are coming to see us tomorrow.
We're having a party at Christmas.

2. We use will to talk about the future:

When we make predictions:

It will be a nice day tomorrow.
I think Brazil will win the World Cup.
I'm sure you will enjoy the film.

To mean want to or be willing to:

I hope you will come to my party.
George says he will help us.


To make offers and promises:

I'll see you tomorrow.
We'll send you an email.

To talk about offers and promises:

Tim will be at the meeting.
Mary will help with the cooking.

We use (be) going to:

To talk about plans and intentions:

I'm going to drive to work today.
They are going to move to Manchester.

When we can see that something is likely to happen:

Be careful! Yau are going to fall.
Look at those black clouds. I think it's going to rain.

4. We often use verbs like: would like, plan, want, mean, hope, expect to talk about the future:

What are you going to do next year? I'd like to go to Unoversity.
We plan to go to France for our holidays.
George wants to buy a new car.

5. We use modals: may, might and could when we are not sure about the future:

I might stay at home tonight, or I might go to the cinema.
We could see Mary at the meeting. She sometimes goes.

6. We can use SHOULD if we think something is likely to happen:

We should be home in time for tea.
The game should be over by eight o'clock.

7. Clauses with time words:

In clauses with time words like: when, after, and until we often use a present tense form to talk about the future:

I'll come home when I finish work.
You must wait here until your father comes.
They are coming after they have had dinner.

8. Clauses with IF.

In clauses with IF we often use a present tense form to talk about the future:

We won't be able to go out if it rains.
If Barcelona win tomorrrow they will be champions.

We do not normaly use WILL in clauses with IF or with time words:

I'll come home when I finish work.
We won't be able to go out if it rains.

But we can use will if it means a promise or offer:

I will be very happy if you will come to my party.
We should finish the job early if George will help us.

9. We can use the future continuous instead of the present continuous or going for emphasis when we are talking about plans, arrangements and intentions:

They'll be coming to see us next week.
I will be driving to work tomorrow. 

***** Verb in time clauses and if clauses

Verbs in time clauses and conditionals follow the same patterns as in other clauses except:

In clauses with time words like when, after, until we often use the present tense forms to talk about the future:
I’ll come home when I finish work.
You must wait here until your father comes.
They are coming after they have had dinner.

 in conditional clauses with if or unless we often use the present tense forms to talk about the future:
We won’t be able to go out if it is raining.
If Barcelona win tomorrow they will be champions.
I will come tomorrow unless I have to look after the children.

We do not normally use will in clauses with if or with time words:
I’ll come home when I will finish work.
We won’t be able to go out if it will rain. rains.
It will be nice to see Peter when he will get home gets home.
You must wait here until your father will come comes.

but we can use will if it means a promise or offer:
I will be very happy if you will come to my party.
We should finish the job early if George will help us.

"if" clauses and hypotheses
Some clauses with if are like hypotheses so we use past tense forms to talk about the present and future.

We use the past tense forms to talk about the present in clauses with if :

for something that has not happened or is not happening:

He could get a new job if he really tried = He cannot get s job because he has not tried.
If Jack was playing they would probably win. = Jack is not playing so they will probably not win.
If I had his address I could write to him. = I do not have his address so I cannot write to him.

We use the past tense forms to talk about the future in clauses with IF.

- for something that we believe or know will not happen:

We would go by train if it wasn't so expensive = We won't go by train because it is too expensive.
I would look after the children for you at the weekend if I was at home. = I can't look after the children because I will not be at home.

 to make suggestions about what might happen:
If he came tomorrow we could borrow his car.
If we invited John, Mary would bring Angela.

When we are talking about something which did not happen in the past we use the past perfect in the if clause and a modal verb in the main clause:

If you had seen him you could have spoken to him =You did not see him so you could not speak to him
You could have stayed with us if you had come to London =You couldn’t stay with us because you didn’t come to London.
If we hadn’t spent all our money we could take a holiday. =We have spent all our money so we can’t take a holiday
If I had got the job we would be living in Paris =I did not get the job so we are not living in Paris.

If the main clause is about the past we use a modal with have: 

f you had seen him you could have spoken to him. =You did not see him so you could not speak to him.
You could have stayed with us if you had come to London. =You couldn’t stay with us because you didn’t come to London.
If you had invited me I might have come. =You didn’t invite me so I didn’t come.


If the main clause is about the present we use a present tense form or a modal without have:

If I had got the job we would be living in Paris now. =I did not get the job so we are not living in Paris now.
If you had done your homework you would know the answer. =You did not do your homework so you do not know the answer.

*****  Wishes and hypotheses

Wishes

We use past tense forms to talk about wishes:

I don't like my work. I wish I could get a better job.
That's a dreadful noise. I wish it would stop.
I always have to get home early. I wish my parents would let me stay out later.

We use past tense forms to talk about wishes for the present:

I don't like this place. I wish I lived in somewhere more interesting.
These seats are very uncomfortable. I wish we were travelling first class.
Everyone wishes they had more free time.
John wishes he wasn't so busy.
I wish it wasn't so cold.

We use the past perfect to talk about wishes for the past:

I wish I had worked harder when I was at school.
Mary wishes she had listened to what her mother told her.
I wish I hadn't spent so much money last month.

Hypotheses (things that we imagine)

When we are talking about hypotheses:

We use present tense forms after phrases like WHAT IF, IN CASE and SUPPOSE to talk about the future if we think it is likely to happen:

Those steps are dangerous. Suppose someone has an accident.
We should leave home early in case we are late.

We use a past tense form to talk about the future after suppose and what if to suggest something is not likely to happen:

It might be dangerous. Suppose they got lost.
What if he lost his job. What would happen then?

We use modals would, could for a hypothesis about the future:

We can't all stay in a hotel. It would be very expensive.
Drive carefully. You could have an accident.

We use would in the main clause and the past in a subordinate clause to talk about the imagined future:

I would always help someone who really needed help.
I would always help someone if they really needed it.

We use modals with HAVE to talk about something that did not happen in the past:

I did not see Mary, or I might have spoken to her.
It's a pity Jack wasn't at the party. He would have enjoyed this party.
Why didn't you ask me. I could have told you the answer.

***** The verb Be
The verb Be has the following forms:

Present simple: Affirmative:
I am
You are
He/She/It is 

We are
You are
They are

Question form: 

Am I?
Are you?
Is he/She?It is not/isn't

We are not/aren't
You are not/aren't
They are not/aren't

Past simple:
I was
You were
He/She/It was

We were
You were
They were

The past participle:
Been.

Present perfect:
Has/have been

Past perfect:
Had been

The verb BE is used in the following patterns:

1. With a noun:

My mother is a teacher.
Bill Clinton was the president of the US.

2. With an adjective:

This soup is very tasty.
The children were good.

2.1 with the -ing form to make the continuous aspect

We were walking down the street.
Everything was wet. It had been raining for hours.

2.2 with the -ed form to make the passive voice

The house was built in 1890.
he street is called Montagu Street.
This car was made in Japan.

3. with a prepositional phrase:

John and his wife are from Manchester.
The flowers are on the table.

***** Link verbs
Some verbs are followed by either a noun or an adjective:

She was a good friend = N + V + N
She was very happy = N + V + Adj
He became headmaster = N + V + N
He became angry = N + V + Adj

These verbs are called link verbs. Common verbs like this are:

be
become
appear
feel
look
remain
seem
sound

She seemed an intelligent woman.
She seemed intelligent.
He looked hungry.
He looked a good player.

After appear and seem we often use to be:

She appeared to be an intelligent woman.
He seemed to be angry.

Some link verbs are followed by an adjective. Common verbs like this are:

get
go
grow
taste
smell
He got hungry in the evening.
She grew stronger every day.

***** Delexical verbs:
have, take, make, give, go and do

We often use common verbs like have and take with nouns like a shower, a drink:

I took a shower. = I showered.
She had a drink. = She drank something.

We call these delexical verbs because the important part of the meaning is taken out of the verb and put into the noun.

We often put adjectives in front of the noun:

I took a cold shower.
She had a nice, refreshing drink.

The verbs used most frequently in this way are:

have     take     make     give

HAVE

We use have with:

Food and drink: a meal, breakfast, lunch, dinner, a snack, a cup of tea
Talking: a chat, a conversation, a discussion, a talk
Washing: a bath, a shower, a wash, a scrub
Resting: a break, a holiday, a rest
Disagreeing: an argument, a dispute, a fight, a quarrel

I had a good breakfast before I left home.
We had a long talk about the problem.
The kids should have a bath before they go to bed.
She generally had a short holiday in July or August.
They had a serious quarrel about their father’s will.

We also use have with nouns formed from verbs:

I think you should have a look at this.
She had a bite of the cake.
I’m thirsty. I’m going to have a drink of water.
I had a listen to that new CD in the car.
They are going to have a swim.
 
TAKE

We use take with:

Washing: a bath, a shower, a wash
Resting: a break, a holiday, a rest

I always take a cold shower in the morning.
You look tired. You need to take a break.

and with these words:

care

a turn

trouble

a chance

a decision

care of

turns

the trouble

a risk

a photograph

We took hundreds of photographs on holiday.
Jane always takes a lot of trouble with her homework.

We also use take with some nouns formed from verbs:

I think you should take a look at this.
Let’s take a walk.
They are going to take a swim.

GIVE

We use give with:

Noises: a cry, a laugh, a scream, a shout, a whistle
Facial expressions: a smile, a grin, a look, a glance
Hitting: a kick, a punch, a slap, a push, a knock, a blow
Affectionate actions: a hug, a kiss, a stroke
Talking: some advice, an answer, some information, an interview,
a lecture, some news, a report, a speech, a talk, a warning

She gave a loud laugh.
John gave a happy smile.
He gave me a nasty kick on the leg.
She gave the children a goodnight kiss and put them to bed.
I have to give a speech at the meeting tomorrow.

MAKE

We use make with:

Talking and sounds: a comment, an enquiry, a noise, a point,
a promise, a sound, a speech, a suggestion
Plans: arrangements, a choice, a decision, a plan, plans, an appointment, a date

Try not to make a noise.
They made arrangements to meet the next day.

GO and DO

We also use go and do as delexical verbs:

Shall we go swimming this afternoon? Or shall we go for a walk?
It’s your turn to do the cooking.
I’ll have to do my hair before the party.

GO

We use go with –ing verbs for common activities:

We usually go walking at the weekend.
He goes running every evening after supper.
Mum’s out. She’s gone shopping.

We use go for a with verbs to do with moving:

a jog     a ride     a swim     a run     a stroll     a walk

I want to get out of here. Let’s go for a walk.
He’s gone for a ride on his bike.

DO

We use do the with –ing nouns to do with work, especially work in the house:

It’s your turn to do the cooking.
You do the washing up and I’ll do the drying.

and with other nouns to do with work:

I need to do a few jobs around the house.
I can’t come out this evening. I have a lot of work to do.

We use do with nouns when it is obvious what the action is:

I’ll have to do my hair before we go out. = I’ll have to brush my hair.
Have you done your teeth? = Have you cleaned your teeth?

A question like

Have you done the car?

could mean

Have you washed the car?
Have you mended the car?
Have you put petrol in the car?

depending on the context.
***** Modal verbs
The modal verbs are:

| can   | could  |
| may   | might  |
| shall | should |
| will  | would  |
| must  |        |

We use modal verbs to show if we believe something is certain, probable or possible (or not). We also use modals to do things like talking aout ability, asking permission making requests and offers, and so on.

****** Certain, probable or possible

The modal verbs are can, could, may, might, shall, should, will, would and must.

The modals are used to show that we believe something is certain, probable or possible:

Possibility:

We use the modals could, might and may to show that something is possible in the future, but not certain:

They might come later. (=Perhaps/Maybe they will come later.)
They may come by car. (=Perhaps/Maybe they will come by car.)
If we don't hurry we could be late. (=Perhaps/Maybe we will be late)

We use COULD HAVE, MIGHT HAVE and MAY HAVE to show that something was possible now or at some time in the past:

It's ten o'clock. They might have arrived now.
They could have arrived hour ago.

We use the modal CAN to make general statements about what is possible:

It can be very cold in winter. (= It is sometimes very cold in winter)
You can easily lose your way in the dark. (= People often lose their way in the dark)

We use the modal could as the past tense of can:

It could be very cold in winter. (= Sometimes it was very cold in winter.)
You could lose your way in the dark. (= People often lost their way in the dark)

Impossibility:

We use the negative can’t or cannot to show that something is impossible:

That can’t be true.
You cannot be serious.

We use couldn’t/could not to talk about the past:

We knew it could not be true.
He was obviously joking. He could not be serious.

Probability:

We use the modal must to show we are sure something to be true and we have reasons for our belief:

It’s getting dark. It must be quite late.
You haven’t eaten all day. You must be hungry.

We use must have for the past:

They hadn’t eaten all day. They must have been hungry.
You look happy. You must have heard the good news.

We use the modal should to suggest that something is true or will be true in the future, and to show you have reasons for your suggestion:

Ask Miranda. She should know.
It's nearly six o'clock. They should arrive soon.

We use should have to talk about the past:

It's nearly eleven o'clock. They should have arrived by now. 

****** Ability, permission, requests and advice
The modal verbs are can, could, may, might, shall, should, will and would

The modals are used to do things like talking about ability, asking permission making requests, and so on.

Ability:

We use can to talk about someone’s skill or general abilities:

She can speak several languages.
He can swim like a fish.
They can’t dance very well.

We use can to talk about the ability to do something at a given time in the present or future:

You can make a lot of money if you are lucky.
Help. I can’t breathe.
They can run but they can’t hide.

We use could to talk about past time:

She could speak several languages.
They couldn’t dance very well.

We use could have to say that someone had the ability/opportunity to do something, but did not do it:

She could have learned Swahili, but she didn’t have time.
I could have danced all night [but didn't].

Permission:

We use can to ask for permission to do something:

Can I ask a question, please?
Can we go home now?

could is more formal and polite than can:

Could I ask a question please?
Could we go home now?

may is another more formal and polite way of asking for permission:

May I ask a question please?
May we go home now?

We use can to give permission:

You can go home now if you like.
You can borrow my pen if you like.

may is a more formal and polite way of giving permission:

You may go home now, if you like.

We use can to say that someone has permission to do something:

We can go out whenever we want.
Students can travel free.

may is a more formal and polite way of saying that someone has permission:

Students may travel free.

Instructions and requests:
We use could you and would you as polite ways of telling or asking someone to do something:

Could you take a message please?
Would you carry this for me please?
Could I have my bill please?

can and will are less polite:

Can you take a message please?
Will you carry this for me please?

Suggestions and advice:
We use should to make suggestions and give advice:

You should send an email.
We should go by train.

We use could to make suggestions:

We could meet at the weekend.
You could eat out tonight.

We use conditionals to give advice:

Dan will help you if you ask him.

Past tenses are more polite:

Dan would help you if you asked him.

Offers and invitations:
We use can I… and to make offers:

Can I help you?
Can I do that for you?

We can also use shall I …

Shall I help you with that?
Shall I call you on your mobile?

We sometime say I can ... or I could ... or I’ll (I will) ... to make an offer:

I can do that for you if you like.
I can give you a lift to the station.
I’ll do that for you if you like.
I’ll give you a lift to the station.

We use would you like (to) ... for invitations:

Would you like to come round to morrow?
Would you like another drink?

We use you must or we must for a very polite invitation:

You must come round and see us.
We must meet again soon.

Obligation and necessity
We use must to say that it is necessary to do something:

You must stop at a red light.
Everyone must bring something to eat.
You can wear what you like, but you must look neat and tidy.
I’m sorry, but you mustn’t make a noise in here.

We use had to for this if we are talking about the past:

Everyone had to bring something to eat.
We could wear what we liked, but we had to look neat and tidy.
****** Modals + have
| Subject       | Modal | Have | Past Participle |          |
| They          | will  | have | arrived         | by now   |
| You           | might | have | seen            | the film |
| Jack and Jill | would | have | been            | late     |

We use a modal verb with Have to refer back:

...from a point of time in the past:

We were very worried. Someonemight have taken the car.

... from the present:

It is nearly eight o'clock. They will have arrived by now.

... or from the future:

We won't eat until they arrive. They might not have had supper.

or to refer to past time:

You should have helped her when she asked.
They might have got lost. Nobody knows where they are.

****** Can, could and could have:

We make questions by putting the subject after can/could:
Can I? Can you? Could I? Could you? and so on.
The negative form is can't in spoken English and cannot in written English.
We sometimes say cannot, but it is very emphatic.

The negative form of could is couldn't in spoken English and could not in written English. We sometimes say could not.

We use CAN and CAN'T:

To talk about ability:

Maria can speak four languages.
I can't swim, but my sister can.

To say that something is possible or impossible:

Leaarning English can be difficult [=Learning English is sometimes difficult.]
Children can be very naughty [=Children are sometimes very naughty.]
It's still light. It can't be bedtime.

For requests and refusals of requests

Can I go home now?
You can go whenever you like.
You can borrow the car today, but you can't have it tomorrow.

To offer to help someone:

Can I help you?
Can I carry that bag for you?

We use COULD and COULDN'T as the past tense of can/can't

To talk about ability:

I could run very fast when I was younger.
She couldn't get a job anywhere.

To say that something was possible or impossible:

Our teacher could be very strict when we were at school. [= Some teachers were very strict.]
People could strave in those days. [= People sometimes starved.]
You couldn't use computers in the nineteenth century.

To make a polite request:

Could I go now please?
Could you lend me a dictionaary please?

To make a polite offer:

Could I give you a lift?
I could carry that for you.

We use could have:

to show that something is possible now or was possible at some time in the past:

It's ten o'clock. They could have arrived now.
They could have arrived hours ago.

****** Will or would

We use will:

to talk about the fuure - to say what we believe will happen
to talk about what people want to do or are willing to do
to make promises and offers

Would is the past tense form of will. Because it is a past tense it is used:

to talk about the past
to talk about hypotheses - things that are imagined rather than true
for politeness

Beliefs

We use WILL
to say what we believe will happen in the future:

We'll be late.
We will have to take the train.

We use WOULD as the past tense of will:

to say what we believed would happen:

I thought I would be late ... so I would have to take the train.

 Offers and promises

We use I will or We will to make offers and promises:

I'll give you a lift home after the party.
We will come and see you next week.

Willingness

to talk about what people want to do or are willing to do:

We'll see you tomorrow.
Perhaps dad will lend me the car.

We use WOULD as the past tense of will:

to talk about what people wanted to do or were willing to do:

We had a terrible night.The baby wouldn't go to sleep. He kept waking up and crying.
Dad wouldn't lend me the car, so we had to take the train.

to talk about something that we did often in the past because we wanted to do it:

When they were children they used to spend their holidays at their grandmothers at the seaside. They would get up early every morning and they'd have a quick breakfast then they would run across the road to the beach.
Conditionals
We use will in conditionals with if and unless to say what we think will happen in the future or present:

I’ll give her a call if I can find her number.
You won’t get in unless you have a ticket.

We use would to talk about hypotheses, about something which is possible but not real:

to talk about the result or effect of a possible situation:
It would be very expensive to stay in a hotel.

in conditionals with words like if and what if. In these sentences the main verb is usually in the past tense:
I would give her a call if I could find her number.
If I had the money I'd buy a new car.
You would lose weight if you took more exercise.
If he got a new job he would probably make more money.
What if he lost his job. What would happen then?

We use conditionals to give advice:

Dan will help you if you ask him.

Past tenses are more polite:

Dan would help you if you asked him.

Phrases with would:
would you…, would you mind (not) -ing, for requests:
Would you carry this for me please?
Would you mind carrying this?
Would you mind not telling him that?

would you like ...; would you like to ...,  for offers and invitations:
Would you like to come round to morrow?
Would you like another drink?

I would like …; I’d like … (you)(to) ..., to say what we want or what we want to do:
I’d like that one please.
I’d like to go home now.

I’d rather… (I would rather) to say what we prefer:
I’d rather have that one.
I’d rather go home now.

I would think, I would imagine, I'd guess, to give an opinion when we are not sure or when we want to be polite:
It’s very difficult I would imagine.
I would think that’s the right answer.


****** Will have or would have
We use the perfective WILL HAVE when we are looking back from a point in time when something will have happened.

By the end of the decade scientists will have discovered a cure for influenza.
I will phone at six o'clock. He will have got home by then.

or looking "back" from the present:

Look at the time. he match will have started.
It's half past five. Dad will have finished work.

We use WOULD HAVE as the past tense form of will have:

I phoned at six o'clock. I knew he would have got home by then.
It was half past five. Dad would have finished work.

We use WOULD HAVE in past conditionals to talk about something hat did not happen:

If it had been a little warmer we would have gonefor a swim.
He would ave been ver angry if he had seen you.

***** Double object verbs
1. Some verbs have two objects - an indirect object and a direct obeject:
| Subject | Verb    | Indirect object | Direct object    |
|---------+---------+-----------------+------------------|
| My wife | sent    | me              | an email         |
| He      | brought | his mother      | some flowers     |
| He      | cooked  | all his friends | a delicious meal |

These clauses have the structure: V + N (indirect object) + N (direct object)

2. We can use a prepositional phrase with TO or FOR with an indirect object:

| Subject | Verb    | Direct object    | Prepositional phrase |
|---------+---------+------------------+----------------------|
| My wife | sent    | an email         | to me                |
| He      | brought | some flowers     | for his mother       |
| He      | cooked  | a delicious meal | for all his friend   |

These clauses have the structure: V + N (direct object) + Prepositional phrase (indirect object)

3. Common verbs with FOR and an indirect object are:
book, buy, get, cook, keep, bring, make, pour, save, find

They booked a table for me at the restaurant.
We made toys for all the cildren.

4. Common verbs with TO and an inderect object are:
give, led, offer, pass, post, read, sell, send, show, promise, tell

He gave his programme to the man sitting next to him.
They sent Christmas cards to all their customers.

5. If the indirect object is a long phrase we normally use to or for:

He showed his ticket to the policeman standing by the door.
We kept something to eat and drink for all the people who arrived late.

6. If the indirect object is a pronoun we normally use the N + V + N + N pattern:

I poured him another drink.
Their mother read them another story.

***** Phrasal verbs
Some verbs are two part verbs. They consist of a verb and a partice:

grow + up
The children are going up.

Often this givesthe verb a new meaning:

take + after
She takes after her mother = She looks like her mother, or She behaves like her mother.

count + on
I know I can count on you
I know I can trust you, or I know I can believe you.

Some transitive two part verbs have only one pattern:

N(subject) + V + p + N (object)

N = noun; V = verb; p = particle

| N (Subject) | Verb     | Particle | N (Object) |
|-------------+----------+----------+------------|
| She         | takes    | after    | her mother |
| I           | can cunt | on       | you        |
| My father   | comes    | from     | Madrid     |

Some transitive two part verbs are phrasal verbs.
Phrasal verbs have two different patterns:

N + V + N + p

| N (Subject) | Verb            | (N) Object                 | Partcle |
|-------------+-----------------+----------------------------+---------|
| She         | gave            | the money                  | back    |
| He          | knocked         | the glass                  | over    |
| We          | will be leaving | our friends and neighbours | behind  |

But sometimes these verbs have the pattern: N (subject) + V + p + N (object)

| N (Subject) | Verb            | Particle | N (Object)                 |
|-------------+-----------------+----------+----------------------------|
| She         | gave            | back     | the money                  |
| He          | knocked         | over     | the glass                  |
| We          | will be leaving | behind   | our friends and neighbours |

When the object is a personal pronoun, these verbs always have the pattern:

N + V + N + p:

She gave it back
He knocked it over
We will be leaving them behind

Phrasal verbs are nearly always made up of a transitive ver and particle. Common verbs with their most frequent particles are:

| bring: | about, along, back, forward, in, off, out, round, up             |
| buy:   | out, up                                                          |
| call:  | off, up                                                          |
| carry: | off, out                                                         |
| cut:   | back, down, off, out, up                                         |
| give:  | away, back, off                                                  |
| hand:  | back, down, in, on out, over, round                              |
| knock: | down, out, over                                                  |
| leave: | behind, out                                                      |
| let:   | down, in, off, out                                               |
| pass:  | down, over, round                                                |
| point: | out                                                              |
| push:  | about, around, over                                              |
| put:   | across, away, down, forward, off, on, out, through, together, up |
| read:  | out                                                              |
| set:   | apart, aside, back, down                                         |
| shut:  | away, in, off, out                                               |
| take:  | apart, away, back, down, in, on, up, over                        |
| think: | over, through, up                                                | 
  
***** Reflexive and ergative verbs
Reflexive verbs

1.Te reflexive pronouns are:

| Singular | myself, yourself, himself, herself, itself |
| Plural   | ourselves, yourselves, themselves          |

We use a reflexive pronoun after a transitive verb when the direct object is the same as the subject of the verb:

I am teaching myself to play the piano.
Be careful with that knife. You might cut yourself.

There are the verbs most often found with reflexive pronouns:
cut, dry, enjoy, hurt, introduce, kill, prepare, teach

some verbs change their meaning slightly when they have a reflexive pronoun as direct object:

amuse, apply, busy, content, behave, blame, distance, express, find, help, see.

Would you like to help yourself to another drink? = Would you like to take another drink?
I wish the children would behave themselves. = I wish the children would behave well.
He found himself lying by the side of the road. = He was surprised when he realised that he was at the side of the road.
I saw myself as a famous actor. = I imagined that I was a famous actor.
She applied herself to the job of mending the lights. = She worked very hard to mend the light.
He busied himself in the kitchen. = He worked busily in the kitchen.
I had to content myself with a few Euros. = I had to be satisfied with a few Euros.

The verb enjoy always has an object:

We all enjoyed the party.
I really enjoyed my lunch.

If enjoy has no other object, we use a reflexive pronoun:

They all enjoyed themselves.
I really enjoyed myself.

NOTE: We do not use a reflexive pronoun after verbs which describe things people usually do for themselves:

He washed in cold water.
He always shaved before going out in the evening.
Michael dressed and got ready for the party.

We only use reflexives with these verbs for emphasis:

He dressed himself in spite of his injuries.
She's old enough to wash herself.

Ergative verbs

1. Ergative verbs are both transitive and intransitive:

Peter closed the door (Transitive: N + V + N)
The door closed (Intransitive: N + V)
I boiled a pan of water (Transitive: N + V + N)
The pan boiled (Intransitive: N + V)


2. Common ergative verbs are:
begin, break, change, close, drop, crack, dry, end, finish, grow, improve, increase, move, open, shake, start, stop, tear, turn

I broke the glass.
I dropped the glass and it broke.

The referee blew his whistle and started the match.
The match started at 2.30

3. Many verbs to do with cooking are ergative verbs:

bake
boil
cook
defrost
freeze
melt
roast
You should roast the meat at 200 degrees centigrade.
The meat was roasting in a hot oven.

I always defrost meat before I cook it.
I am waiting for the meat to defrost.

Melt the chocolate and pour it over the ice cream.
The chocolate was melting in a pan.

4. Verbs to do with vehicles are often ergative:

back
crash
drive
fly
reverse
run
sail
start
stop
I’m learning to fly a plane.
The plane flew at twice the speed of sound.

 He crashed his car into a tree.
 His car crashed into a tree.

5. We use some ergative verbs with only a few nouns:

catch: dress, coat, clothes, trousers etc.
fire : Gun, pistol, rifle, rocket.
play: guitar, music, piano, violin, CD, DVD etc.
ring: bell, alarm
She caught her dress on a nail.
Her dress caught on a nail.

He fired a pistol to start the race.
A pistol fired to start the race.
***** Verbs followed by to + infinitive
      1. Some verbs are followed by the to-infinitive

	 I decided to go home as soon as possible.
	 We all wanted to have more English classes.
	 

      Common verbs followed by the to-infinitive are:
      Verbs of thinking and feeling:

      * choose
      * decide
      * expect
      * forget
      * hate
      * hope
      * intend
      * learn
      * like
      * love
      * mean
      * plan
      * prefer
      * remember
      * would like
      * would love
      

      Verbs of saying:
      
      * agree
      * promise
      * refuse
      

      Other common verbs are:

      * arrange
      * attempt
      * fail
      * help
      * manage
      * tend
      * try
      * want


      2. Some verbs are followed by a noun and the to-infinitive:

      She asked him to send her a text message.
      He wanted all his friends to come to his party.
      
                
      Common verbs with this pattern are:
      Verbs of saying:
      * advise
      * ask
      * encourage
      * invite
      * order
      * persuade
      * remind
      * tell
      * warn *
      *Note: The verb warn is normally used with not
      The police warned everyone not to drive too fast.
      
      Verbs of wanting or liking:
      * expect
      * intend
      * would
      * prefer
      * want
      * would like


      3. Passive infinitive

      Many of these verbs are sometimes followed by a passive infinitive
      (to be + past participle):

      I expected to be met when I arrived at the station.
      They wanted to be told if anything happened.
      I don’t like driving myself. I prefer to be driven.

***** Verbs followed by -ing clauses
      Common verbs followed by -ing nouns are:
      Verbs of liking and disliking:
      * detect
      * dislike
      * enjoy
      * hate
      * fancy
      * like
      * love
	I love swimming but I hate jogging.
	They always enjoyed visiting their friends.
	A: Do you fancy going for a walk?
	B: I wouldn't mind.
      
      Phrases with mind:
      * wouldn't mind (= would like)
      * don't mind (= I am willing to)
      * would you mind (= will you please...?)
	I wouldn't mind having some fish and chips.
	I don't mind waiting for a few minutes.
	Would you mind holding this for me?

      Verbs of saying and thinking:
      * admit
      * consider
      * deny
      * imagine
      * remember
      * suggest
	Our guide suggested waiting until the storm was over.
	Everyone denied seeing the accident.
      
      Other common verbs are:
      * avoid
      * begin
      * finish
      * keep
      * miss
      * practise
      * risk
      * start
      * stop
	I haven't finished writing this letter.
	Let's practise speaking English.
      
      Passive form o -ing
      
      Many of these verbs are sometimes followed by the passive form of -ing: being + past participle
        I don't like being interrupted.
	Our dog loves being stroked under the chin.
      
      Noun + -ing clause

      Some verbs are followed by a noun and an -ing clause:

      Verbs to do with the senses:
      * see
      * watch
      * hear
      * smell
      * listen to
      * etc.
	We saw everybody running away.
	I could hear someone singing.
	
	Other common verbs:
      * catch
      * find
      * imagine
      * leave
      * prevent
      * stop

	I caught someone trying to break into my house.
	We couldn't prevent them getting away.
  
***** Verbs followed by that clause
      With "that"
      We can use clauses with "that"
      * after verbs of thinking:
	- think
	- believe
	- expect
	- decide
	- hope
	- know
	- understand
	- suppose
	- guess
	- imagine
	- feel
	- remember
	- forget
	    I hope that you will enjoy your holiday.
	    She didn't really think that it would happen.
	    I knew that I had seen her somewhere before.
      * after verbs of saying:
	- say
	- admit
	- argue
	- reply
	- agree
	- claim
	- deny
	- mention
	- answer
	- complain
	- explain
	- promise
	- suggest
	  They admitted that they had made a mistake.
	  She argued that they should invest more in the business.
	  The children complained that they had nothing to do.
	Note: "tell" and some other verbs of saying almost always have a direct object. There are also 
	some fixed expressions with "tell" such as tell the truth, tell a lie, tell a story, tell it
	like it is.
	  - tell
	  - convince
	  - persuade
	  - inform
	  - remind
	    We tried to tell them hat they should stop what they were doing.
	    The police informed everybody that the danger was over.
        - as postmodifiers after nouns to do with thinking or saying:
	  - advice
	  - belief
	  - claim
	  - feeling
	  - argument
	  - hope
	  - promise
	  - report
	  - guess
	  - opinion
	  - idea
	    He made a promise that he would do all he could to help.
	    I had a funny feeling that something was wrong.
          after some nouns to say more about the noun:
	  * fact
	  * advantage
	  * effect
	  * possibility
	  * chance
	  * danger
	  * evidence
	  * problem
	  * difficulty
	    She pointed out the danger that they might be left behind.
	    There was a chance that we would succeed.
 
	    Note: We often use a that clause to define one of these nouns after the verb be:
            * danger
	    * problem
	    * chance
	    * possibility
	    * fact
	      The danger is that we will be left behind 
	      The fact is that it is getting very late
	  * after some adjectives which describe feeling to give a reason for our feelings:
	    * pleased
	    * sorry
	    * happy
	    * unhappy
	    * sad
	    * excited
	    * glad
	    * disappointed
	    * afraid
	      I am sorry that you can't come.
	      Everybody was pleased that the danger was past.
	      It is lucky that you were able to drive us home.

	      No "that"

	      NOTE: We can always use a clause without the word "that"
	      They admitted [that] they had made a mistake.
	      The police informed everybody [that] the danger was over.
	      I am sorry [that] you can’t come.
	      There was chance [that] we would succeed.	      

**** Clause, phrase and sentence
     The basic unit of English grammar is the clause:

     [An unlucky student almost lost a 17th century violin worth almost $200.000]
     [when he left it in the waiting room of a London station.]
     
     [William Brown inherited the 1698 Stradivarius violin from his mother]
     [and had just had it valued by a London dealer at $180.000.]
     
     Clauses are made up of phrases:
     
     [An unlucky student] + [almost lost] + [a 17th century violin worth almost $200.000]
     [when] + [he] + [left] + [it] + [in the waiting room of a London station.]
     [William Brown] + [inherited] + [the 1698 Stradivarius violin] + [from his mother]
     [and] [had just had it valued] + [by a London dealer] + [at $180.000.]
     
     We can join two or more clauses together to make sentences.
     
     An unlucky student almost lost a 17th century violin worth almost $200.000 when he left 
     it in the waiting room of a London station.

     William Brown inherited the 1698 Stradivarius violin from his mother and had just had it
     valued by a London dealer at $180.000.
     
***** DONE Clause structure                                           :STUDY:

      All clauses in English have at least two parts: a noun phrase and a verb phrase:
      | Noun phrase(subject)      | Verb phrase   |
      |---------------------------+---------------|
      | The children              | laughed       |
      | All the people in the bus | were watching |

      But most clauses have more than two parts:
      | Noun phrase (subject) | Verb phrase  |               |         |
      |-----------------------+--------------+---------------+---------|
      | The children          | laughed      |               |         |
      | John                  | wanted       | a new bicycle |         |
      | All of the girls      | are learning | English       |         |
      | This soup             | tasted       | awful         |         |
      | Mary and the family   | were driving | to Madrid     |         |
      | She                   | put          | the flowers   | in vase |
     
      The first noun phrase is the subject of the sentence:
        The children laughed.
	John wanted a new bicycle.
	All the girls are learning English.
	She put the flowers in the vase.
      English clauses always have a subject:
        His father has just retired. He was a teacher.
	I'm waiting for my wife. She is late.
      ... except for the imperative which is used to give orders:
        Stop!
	Go away.
      ... and for "soft imperatives" like invitation and requests:
        Please come to dinner tomorrow.
	Play it again please.
      If we have no other subject we use "there" or "it" as a subject. We call this "dummy subject":
        There were twenty people at the meeting.
	There will be an eclipse of the moon tonight.
	
	It's a lovely day.
	It's nearly one o'clock.
	I have toothache. It hurt a lot.
***** TODO Verb patterns [33%]                                        :STUDY:
      - [X] description
      - [X] intransitive verbs
      - [X] transitive verbs
      - [X] link verbs
      - [X] double object verbs
      - [ ] verbs with -ing forms
      - [ ] vers with to + infinitive
      - [ ] reporting verbs with that, wh- and if clauses
      - [ ] two- and three-part verbs
      - [ ] verb patterns - adverbials
      - [ ] clauses: short forms
      - [ ] relative clauses
      - [ ] reporting: report and summaries
      - [ ] verbs - questions and negatives
      - [ ] wh- clauses
	
      The structure of the clause depends on the verb. For example:

      * An intransitive verb has the structure: N(=noun) + V(=verb): (John) + (smiled).
      * A transitive verb has the structure: N + V + N: (We) + (had been playing) + (football)
      * A link verb has the structure: N + V + Adj: (She) + (looked) + (happy)
      * A phrasal verb has the structure: N + V +p +N (She) + (gave) + (back) + (the money)
	or
	N + V + N + p (She) + (gave) + (the money) + (back)
          
******  Intransitive verbs
       Intransitive verbs have the pattern N + V (noun + verb). The clause is complete without anything else:
       | Noun Phrase(subject) | Verb phrase  |
       |----------------------+--------------|
       | John                 | smiled       |
       | Nothing              | happened     |
       | The baby             | was sleeping |
       
       (John) (smiled).
       (Nothing) (has happened).
       (The baby) (was sleeping).
****** Transitive verbs
       transitive verbs have a noun phrase as object:
       
       | Noun phrase (Subject) | Verb phrase      | Noun phrase (Object) |
       |-----------------------+------------------+----------------------|
       | John                  | wanted           | a new bicycle.       |
       | We                    | had been playing | football.            |
       | Some of the children  | are learning     | English.             |
       
       This pattern is N + V + N (noun + verb + noun).
****** Link verbs
       Some verbs are followed by an adjective phrase. The adjective phrase is called the complement:
       | Noun phrase (Subject) | Verb phrase | Adjective phrase (complement) |
       |-----------------------+-------------+-------------------------------|
       | I                     | am feeling  | hungry                        |
       | Everyone              | looked      | very happy                    |
       | This soup             | tastes      | awful                         |
       | The milk              | has gone    | sour                          |

       This pattern is N + V + Adj (noun + verb + adjective phrase).
       These verbs are called link verbs.

       Some link verbs (for example be; become; seem) can have a noun phrase as a complement:
       | Noun phrase (Subject) | Verb phrase | Noun phrase (complement) |
       |-----------------------+-------------+--------------------------|
       | Our neighbour         | was         | a strange man            |
       | He                    | became      | a geologist              |
       | She                   | seems       | a nice girl              | 
  
****** Double object verbs
       Some verbs, like "give" and "bring" can have two different patterns after them:

       | Noun Phrase (Subject) | Verb Phrase | Noun Phrase       | Prepositional   |
       |                       |             | (Direct object)   | phrase          |
       |-----------------------+-------------+-------------------+-----------------|
       | She                   | gave        | some money        | to the old man  |
       | They                  | brought     | a lot of food     | for the animals |
       |-----------------------+-------------+-------------------+-----------------|
       |-----------------------+-------------+-------------------+-----------------|
       | Noun phrase (Subject) | Verb Phrase | Noun Phrase       | Noun Phrase     |
       |                       |             | (Indirect object) | (Direct object) |
       |-----------------------+-------------+-------------------+-----------------|
       | She                   | gave        | the old man       | some money      |
       | They                  | brought     | the animals       | a lot of food   |

These verbs are called double object verbs. When we have two noun phrases after the verb the first noun phrase is the indirect object and the second noun phrase is the direct object.
****** Verbs with -ing forms
       Some transitive verbs can have a noun phrase as an object:
         - Everybody likes good food.
	 - George considered the problem.
       or the -ing form of the verb:
         - Everybody likes eating.
	 - George considered starting again.
        
******  Verbs with to + infinitive
       Some verbs have the pattern N + V + to + infinitive:
         - They agreed to help.
	 - We decided to go.
       Some verbs have the pattern N + V + N + to + infinitive:
         - She told him to go home.
	 - They advised us to wait.

****** Reporting verbs with that, wh- and if clauses

       Reporting verbs with THAT clauses:

       Some verbs introduce a report, an idea or a summary. These verb have
       the pattern:

       N + V + (that) + clause

       When we want to say what someone says or thinks we can use a clause
       with "that"

       - He said that I had to see a doctor.
       - I thought that he was being silly.

       We can leave out the word "that":

       - He said I had to see a doctor.
       - I thought he was being silly.

       With some verbs we can mention the hearer as the object of the verb:

       - She reminded him that it was time to go.
       - He told me he was a friend of yours.

       These verbs have the pattern:

       N + V + N + (that) + clause

       Reporting verbs with wh- and if clauses

       Some verbs introduce summaries, reports, questions or problems:

       - She explained what we had to do.
       - He asked if I was ready.
       - I didn't know what to do.

       These verbs have the pattern:

       N + V + wh- + clause:
       - She wondered where she was.

       or

       N + V + if + clause:
       - Ken asked if we wanted to go.

       With some verbs we can mention the hearer the object of the verb:

       - She asked me if I was ready.
       - He told me what I had to do.

       These verbs have the pattern:

       N + V + N + wh- + clause:
       - I told them what he was doing.

       or

       N + V + N + if + clause:
       Ken asked us if we wanted to go.

****** two- and three-part verbs

       Two part verbs

       Some verbs consist of two words - a verb and particle (p). These verbs
       have a number of patterns:

       - Peter came in. (N + V + p)
       - He took out his diary. (N + V + p + N)
       - He gave the money back. (N + V + N + p)

       Phrasal verbs

       Some transitive two part verbs are phrasal verbs. They have two
       different patterns.

       N + V + N + p

       - She gave the money back
       - He knocked the vase over
       - We will be leaving our friends behind

       or

       N + V + p + N

       - She gave back the money
       - He knocked over the vase
       - We will be leaving behind our friends

       When the object is a pronoun these verbs always have the first
       pattern N + V + N + p:

       - She gave it back
       - He knocked it over
       - We will be leaving them behind

       Three part verbs

       Some verbs are made up of three parts - a verb and two particles.
       They have the pattern:

       N + V + p + p + N:

       - His girl friend walked out on him.
       - She soon caught up with the other runners.
       - Children should look up to their parents.

****** Verb patterns - adverbials
       A clause often has one or more adverbial phrases:

       - The children laughed happily.
	 (N + V + Adv)

       - All the girls are learning English at school in the second year.
	 (N + V + N + Adv + Adv)

       - Last year Mary and the family were driving to Madrid in the old bus.
	 (Adv + N + V + Adv + Adv)

       - She put the flowers carefully in a vase.
	 (N + V + N + Adv + Adv)

****** Clauses: short forms

       A: Short forms as answers

       1. We often use short forms to answer questions. Usually we repeat the
	  first word of the verb phrase:

	  A: Can you come round tomorrow?
	  B: Yes, I can/ No I can't.

	  A: Have you seen Jack lately?
	  B: Yes, I have/No I haven't.

	  A: Do you like living here?
	  B: Yes, I do/ No I don't.

	Sometimes we change the modal verb:

	  A: Will you come?
	  B: Yes, wee might.

	  A: Do you think they night come?
	  B. Yes, I think they will.

       2. We often use verbs like think, suppose, expect and hope, to answer
	  questions.

	  - when the answer is yes we add so (I expect so, I hope so, etc.).
	  - if we answer is no we say I don't think so, I don't suppose so.
	  - but with hope we say I hope not.

          A: Can you come tomorrow?
	  B: I hope so.

	  A: Will they be at home?
	  B: I expect so.

	  A: Is Amsterdam the capital of the Netherland?
	  B: I don't think so.

	  A: Do you think it's going rain?
	  B: I hope not.

       3. We often use adverbials of probability like peharps, probably,
	  possibly, maybe, definitely and certainly as short answers:

	  A: Do you think it's going to rain?
	  B: Yes, possibly.

	  A: Can you come round tomorrow?
	  B: Definitely!

       When the answer is negative we put not after the adverbial:

          A: Do you think it's going to rain?
	  B: Probably not.

	  A: Can you come round tomorrow?
	  B: Maybe not.

       1. We can use short forms to agree or disagree with what someone says.
	  Usually we use the first word in the verb phrase:

	  A: It's a lovely day.
	  B: Yes, it is.

	  A: I think they might have missed their rain.
	  B: Yes, I think they might.

	  A: The children will be coming to see us next week.
	  B: No they won't. They are going to their grandparents.

        Sometimes we change the modal:
          A: The children will be coming to see us next week.
	  B: Yes, they might.

	  A: The children might be coming to see us next week.
	  B: No they won't. They are going to their grandparents.

	We use do/does//don't/doesn't to agree or disagree with a statement
	in the present simple form:

	  A: Your grandmother looks very well.
	  B: Yes, she does.

	  A: I think Jack lives here.
	  B: No he doesn't

	and we use did/didn't for past simple:

	  A: Everybody really enjoyed the trip.
	  B: Yes, they did.

	  A: The children went to Malaysia last year.
	  B: No they didn't. They went to Singapore.

       5. We sometimes put a short tag at the end of a comment. We use
	  a Yes/No question form for the tag. If the comment is affirmative
	  we normally use a negative tag:

	  A: It's a lovely day.
	  B: Yes, it is, isn't it.

	  A: Your grandmother looks very well.
	  B: Yes, she does, doesn't she.

	  A: Everybody really enjoyed the trip.
	  B: Yes, they did, didn't they.

        If the comment is negative we normally use an affirmative tag:

	  A: They didn't seem to enjoy the trip very much.
	  B: They didn't, did they.

	  A: It's not a very nice day.
	  B: No, it isn't is it.

	  A: They haven't done much.
	  B: No, they haven't, have they.

	6. Sometimes we put a tag on the end of a statement:

	   It's a lovely day, isn't it?
	   Your grandmother looks very well, doesn't she?
	   They haven't done much, have they?
	   They all seemed to enjoy the trip, didn't they?

	7. We use affirmative tags with so and neither or nor to add to what
	   someone has said.

	   We use so to add to an affirmative:

	   A: John is working in Barcelona.
	   B: And so is Maria [= Maria is working in Barcelona, too]

	   A: I love Indian food.
	   B: So do I = [I love Indian food, too]

	   A: They've just bought a new computer.
	   B: Really? So have we. [= We also bought a new computer.]

	   We use neither or nor to add to a negative:

	   A: I don't smoke any more.
	   B: Neither do I. [= I also don't smoke]

	   A: They haven't written ti us for ages.
	   B: Nor has Peter.[= Peter hasn't written to us for ages, too.]

	   A: We won't be taking a holiday this year.
	   B: Neither will we. [= We also won't be taking a holiday
	    this year.]

	   B: Short forms for questions

	   1. We often use short forms to ask questions when we want some
	      more information;

	      A: I’ll see you on Monday.
	      B: What time?

	      A: We are going on holiday next week.
	      B: Where?

	      A: You can get a new computer very cheaply.
	      B: How?

	      If we want to be more polite we can use a longer question:

	      A: I’m going to London on Monday.
	      B: What time are you going?

	      A: We are going on holiday next week.
	      B: Where are you going?

	      A: You can get a new computer very cheaply.
	      B: How can I do that?

	      2. We often use questions with What about… or How about …
		  to refer back to what someone has said:

	      A: I love the Beatles. What about you?
	      B: Yes, I love their music too.

	      A: Your father seems to be working hard. What about your
	      mother?
	      B: Yes she’s working hard too.

	      A: I’m exhausted. How about you?
	      B: No, I’m fine.

	      A: I really enjoyed the film. How about you?
	      B: No, I didn’t like it very much.

	      3. We use short questions to check what someone has said:

		 A: George phoned last week.
		 B: Did he?

		 A: They’ve just had a baby.
		 B: Have they?

		 A: He’ll be here soon.
		 B: Will he?

	C: Leaving words out

	1. When we are speaking we sometimes leave words out if our
	    meaning is still clear:

	   We could use any of these to offer someone a cup of coffee:

	   Would you like a cup of coffee?
	   You like a cup of coffee?
	   Like a cup of coffee?
	   A cup of coffee?
	   Cup of coffee?
	   Coffee?

	   And someone could reply:

	   Yes, please. I would like a cup.
	   Yes, please. I would.
	   Yes please.
	   Please.

	2. We often leave words out if we think they are just repeating
	   things that don't need repeating:

	   I asked him to come but he wouldn't. = ... he wouldn't come.
	   Jack wanted to come but Jill didn't. = ... Jill didn't want
	   to come.
	   Jack can come but Jill can't. = ...Jill can't come.

        3. We leave words out in compound sentences if we think people
	   will still understand the idea:

	   He opened the door and went in = He opened the door and he
	   went in.

	   They play billiards, but not snooker = They play billiards
	   but they do not play snooker.

	   I know George, but not his brother = I know George, but I do
	   not know his brother,

****** Relative clauses
       1. The relative pronouns are:

	  | Object | Subject | Possessive |
	  |--------+---------+------------|
	  | whom,  | Who     | whose      |
	  | who    |         |            |
	  | which  | which   | whose      |
	  | that   | that    |            |

       We use *who* and *whom* for people, and *which* for things.
       We use *that* for people or things.

       We use relative pronouns to introduce relative clauses, which tell
       us more about people and things.

       2. Relative clauses to postmodify a noun

	  We use relative clauses to postmodify a noun - to make clear which
	  person or thing we are talking about. In these clauses we can have
	  the relative pronoun *who*, *which*. *whose* or *that*:

	  * as subject
	    Isn't that the woman who live across the road from you?
	    The police said the accident that happened last night was
	    unavoidable.
	    The newspaper reported that the tiger which killed its keeper
	    has been put down.

	    WARNING:
	    The relative pronoun is the subject of the clause.
	    We do not repeat the subject:

	    The woman who [she] lives across the road ...
	    The tiger which [it] killed its keeper ...

	  * as object of a clause

	    Have you seen those people who we met on holiday?
	    You shouldn't believe everything that you read in the newspaper.
	    The house that we rented in London was fully furnished.
	    The food was definitely the thing which I enjoyed most about
	    our holiday.

	    - Sometimes we use *whom* instead of *who* when the relative
	      pronoun is the object:

	      Have you seen those people whom we met on holiday?

	    - When the relative pronoun is object of its clause we sometimes
	      leave it out:

	      Have you seen those people we met on holiday?
	      You shouldn't believe everything you read in the newspaper.
	      The house we rented in London was fully furnished.

	      WARNING:

	      The relative pronouns is the object of the clause.
	      We do not repeat the object:

	      Have you seen those people who we met [them] on holiday?
	      The house that we rented [it] in London was fully furnished.

	  * as object of a preposition. When the relative pronoun is the
	    object of a preposition we usually put the preposition after
	    the verb:

	    You were talking to a woman >>> Who was the woman who you were
	    talking to?
	    My parents live in that house >>> That's the house that my
	    parents live in.

	    - When the relative pronoun is the object of a preposition
	      we usually leave it out:

	      Who was the woman you were talking to?
	      That's the house my parents live in.

	    - Sometimes we use *whom* instead of *who*:

	      Who was that woman whom you were talking about.

	    - When we use *whom* or *which* the preposition sometimes comes
	      at the beginning of the clause:

	      I haven't read the book about which you were talking.

	    - We can use the possessive form, *whose*, in a relative clause:

	      I always forget that woman's name >>> That's the woman whose
	      name I always forget.
	      I met a man whose brother works in Moscow.

       3. Times and places

	  We also use *when* with times and *where* with places to
          make it clear which time or place we are talking about:

	  - England won the world cup in 1996. It was the year when we
	    got married.
	  - I remember my twentieth birthday. It was the day when the
	    tsunami happened.
	  - Do you remember the place where we caught the train?
	  - Stratford-upon-Avon is the town where Shakespeare was born.

	  ... but we can leave out the word *when*:

	  - England won the world cup in 1996. It was year we got
	    married.
	  - I remember my twentieth birthday. It was the day the
	    tsunami happened.
       4. Giving additional information

	  We use *who*, *whom*, *whose*, and *which* (but not *that*)
          in relative clauses to tell us more about a person or thing.

	  - as subject

	    My uncle, who was born in Hong Kong, lived most of his
            life overseas.
	    I have just read Orwell's 1984, which is one of the most
	    frightening books ever written.

	    WARNING:
	    The relative pronoun is the subject of the clause.
	    We do not repeat the subject:

	    My uncle, who was born in Hong Kong, lived most of his
            life overseas.
	    I have just read Orwell's 1984, which is one of the most
	    frightening books ever written.

	  - as object

	    We saw the latest Harry Potter film, which wee really
            enjoyed.
	    My favourite actor is Marlon Brando, who I saw in "On the
	     Waterfront".

	    * we can use *whom* instead of *who* as object:

	      My favourite actor was Marlon Brando, whom I saw in "On
              the Waterfront".

	    WARNING:
	    The relative pronoun is the object of the clause.
	    We do not repeat the object:

	    We saw the latest Harry Potter film, which we really
            enjoyed.
	    My favourite actor is Marlon Brando, who I saw in "One the
	    Waterfront".

	  - as object of a clause:

	    He finally met Paul McCartney, whom he had always
            admired.
	    We are going back to Venice, which we first visited
            thirty years ago.

	    We can also use *who* as the object.

	    He finally met Paul McCartney, who he had always admired.

	    WARNING:

	    The relative pronoun is the object of the clause.
	    We do not repeat the object:

	    He finally met Paul McCartney, whom he had always
            admired.
	    We are going back to Venice, which we first visited
            thirty years ago.

	  - as object of a preposition:

	    He decide to telephone Mrs. Jackson, who he had read about
            the newspaper.
	    That's the programme which we listened to last night.

	    * We sometimes use *whom* instead of *who*:

	      He decided to telephone Mrs. Jackson, whom he had read
              about the newspaper.

	    * The preposition sometimes comes in front of the relative
	      pronoun *whom* or *which*:

	      He decided to telephone Mrs. Jackson, about whom he had
              read in the newspaper.
	      That's the programme to which we listened last night.

       5. Quantifiers and numbers with relative pronouns

	  We often use quantifiers and numbers with relative pronouns:

	  many of whom - most of whom - one of which - none of whom
	  some of which - lost of whom - two of which - etc.

	  We can use them as subject, object or object of a
          preposition.

	  She has three brothers, two of whom are in army.
	  I read three books last week, one of which I really enjoyed.
	  There were some good programmes on the radio, none of which
          I listened to.

       6. Using "which" to give more information

	  We often use the relative pronoun *which* to say something
          about a clause:

	  He was usually late, which always annoyed his father.
	  We've missed our train, which means we may be late.


****** Reporting: reports and summaries
       "Reporting speech" follows exactly the same rules as the rest
       of the language.
       1. When we report what people say or think we use:
	  - clause with *that*:
	    Everybody knew that it was Henry's birthday tomorrow.
	    She explained that she would do as much as she could to
            help.

	    but we can leave out the word that:

	    Everybody knew it was Henry’s birthday tomorrow.
	    She explained she would do as much as she could to help.

	  - wh-clauses and clauses with *if*
	    He was asked what he had been doing the previous night.
	    She explained why she went by train rather than by car.

	  - to-infinitives:
	    We all agreed to do as much as we could.
	    Who told you to come?

       2. We very rarely try to report exactly what someone has said.
          We usually give a summary:

	  Mary: Oh dear, we've been walking for hours. I am exhausted.
          I don't think I can go any further. I really need to stop
          for a rest.

	  Peter: Don't worry. I'm not surprised that you're tired. I'm
          tired too. I'll tell you what. I'll see if I can find a
          place to sit down, and then we can stop and have our picnic.

	  >>>>
	  When Mary complained that she was tired out after walking so
          far, Peter said they could stop for a picnic.

       3. Tense forms in reports and summaries.

	  When we are reporting what people say or think in English we
          need to remember:

	  - that the tense forms in reports and summaries are the same
            as in the rest of the language:

	    This is a letter that Andrew Brown wrote then years ago:
	    I *am* twenty-two years old and I *am* at University studying
            engineering. I *take* my final exams next month and I *will*
            finish university in July.

	    I *want* to take a year off and travel round the world. I
            *will need* to make some money while I am travelling so I
            *would like* to learn to teach English as a second language
            so that I *can make* some money while I am abroad. A friend
            of mine *has recommended* your course very highly. She also
            *gave* me some details, but I *would like* to ask a few more
            questions.

	    What courses *do you have* in the summer and when do they
            start? How much *do the courses cost*? Is there an
            examination at the end?

	    I *look forward* to hearing from you.

	    Regards,
	    Andrew Brown.

	    If you were telling a story about Andrew then you might
            write something like this:
	    When Andrew *was* 22 he *was* an engineering student at
            the university. He *wanted* to travel abroad after he
            *had finished* his course at the university, but *he
            would need* to earn some money while *he was* abroad so
            *he wanted* to learn to teach English as a foreign
            language. A friend *had recommended* a course but Andrew
            *needed* more information. So *he wrote* to the school and
            *asked* them when their *courses started* and how much
            *they were*. He also wanted to know if *there was* an
            examination at the end of the course.

	    You would use past tense forms to talk about something
            that happened ten years ago.

	    If you were reporting or summarising what Andrew wrote you
            might start off by saying:
	    Andrew *told* me that when he *was* 22 he *was* an
            engineering student in his last month...
	    ... and you could go on in the same way. You would use
            past tense forms to talk about something which happened
            ten years ago. So tense forms in reports and summaries in
            English are the same as in the rest of the language.

	  - Sometimes you have to choose between a *past tense* form
            and a *present tense* form.

	    If you are talking about the *past* but you mention
            something that is *still true* you could use a *present
            tense* form to show you agree that it is true:

	    John said he had stayed at the Shangri-la because *it is
            the most comfortable hotel* in town.
	    Mary said she enjoyed the film because *Robert de Niro is
            her favourite actor*.
	    Helen said she *loves visiting New York*.

	  - If we are talking about something that *everybody knows
            is true* we normally use a *present tense*:

	    Michel said he had always wanted to climb Everest because
            *it is the highest mountain in the world*.
	    Mary said she loved visiting New York because *it is such
            an exciting city*.

       4. to-infinitives in reports and summaries:

	  We often use the to-infinitive after verbs of *thinking* and
          *feeling* to report or summarise actions:

	  decide - hope - intend

	  - "I think I will start all over again" >>>
	    He *decided to start* all over again.
	  - "I am going to write to the newspaper about it" >>>
	    She *intended to write* to the newspaper about it.

          ... and verbs of saying:

	  agree - promise - refuse

	  - "I can do the shopping for you if you like" >>>
	    He *agreed to do* the shopping for me.
	  - I'm sorry. I would love to help you but I'm afraid
	    I can't >>>
	    She *refused to help* me.

          After some verbs we use a *direct object* and the  *infinitive*:

	  advice - ask - encourage - invite - order - remind -
	  tell - warn - expect - intend - want - would like - would
	  prefer

	  - "I think you should turn the light out now" >>>
	    She *reminded me to turn* the lights out.
	  - "Be very careful, children. The sea can be very dangerous
            so please don't go in the water." >>>
	    She warned the children not to go in the water.

****** Verbs -questions and negatives

       1. Yes/No questions

	  Yes/No questions are questions to which the answer is Yes or No

	  Look at these statements:

	  They are working hard.
	  They will be working hard.
	  They had worked hard.
	  They have been working hard.
	  They might have been working hard.

	  We make Yes/No questions by putting the subject, *they*, after the
	  first part of the verb:

	  Are they working hard?
	  Will they be working hard?
	  Had they worked hard?
	  Have they been working hard?
	  Might they have been working hard?

       2. Negatives

	  We make negatives by putting *not* after the first part of the verb:

	  They are not working hard.
	  They will not be working hard.
	  They had not worked hard.
	  They have not been working hard.
	  They might not have been working hard.

	  In spoken English we often reduce not to n't:

	  They aren't working hard.
	  They won't be working hard.
	  They hadn't been working hard.

****** wh- clauses

       Wh-words are *what*, *when*, *where*, *who*, *which*, *why* and *how*.

       We use clauses with a wh- word:

       - In wh-questions:

	 *What* are you doing?
	 *Who* ate all the pies?
	 *Why* did you do that?

       - After verbs of thinking:

	 know - understand - suppose - remember - forget - wonder

	 I know *where* you live.
	 She couldn't remember *who* he was.
	 John wondered *what* was going to happen next.

	 NOTE: We also use clauses with *if*

	 I wonder *if* we'll see Peter.
	 She couldn't remember *if* she had posted the letter.

       - After verbs of saying:

	 ask - say - admit - argue - reply - agree - mention - explain -
	 suggest

	 I asked *what* she wanted.
	 He tried to explain *how* the accident had happened.
	 She wouldn't admit *what* she had done.
	 Did he say *when* he would come?

	 *tell* and some others verbs of saying must have a direct object:

	 tell - remind

	 We tried to *tell* them what they should do.
	 She *reminded* me where I had left the car.

       - After some verbs of thinking and saying we use wh-words and the
	 to-infinitive:

	 We didn't *know* what to do.
	 We will *ask* when to set off.
	 Nobody *told* me what to do.
	 Can anyone *suggest* where to go for lunch?

	 NOTE: We use the to-infinitive:

	 When the subject of the to-infinitive is the same as the subject
	 of the main verb:

	 He didn't know *what to do* >>> He didn't know what he should do
	 We will ask *when to set off* >>> We will ask when we should set off

	 When the subject of the to-infinirtive is the same as the person
	 spoken to:

	 Nobody told me *what to do*. >>> Nobody told me what I should do.
	 Can anyone suggest *where to go* for lunch? >>> Can anyone suggest
	 where we should go for lunch.

       - After some nouns to say *more* about the *noun*:

	 Is there any reason *why* I should stay?
	 Do you remember the day *when* we went to Edinburg.
	 That was the town *where* I grew up.

	 We often use a wh-clause after *is*:

	 I missed my bus. That's *why* I was late.
	 This is *where* I live.
	 That's *what* I thought.
	 Paris - that's *where* we are going for our holidays.

***** Noun phrases

      Often a *noun phrase* is just a *noun* or a *pronoun*:

      *People* like to have money.
      *I* am tired.
      *It* is getting late.

      or a determiner and a noun ...:

      *Our* friends have bought a house in the village.
      *Those houses* are very expensive.

      ... perhaps with an adjective:

      Our *closest* friends have just bought *a new* house in the village.

      Sometimes the noun phrase begins with a *quantifier*:

      *All* those children go to school here.
      *Both of* my younger brothers are married.
      *Some* people spend a lot of money.

      Numbers:

      Quantifiers come *before* determiners, but *numbers* come *after*
      determiners:

      *My four* children go to school here. (*All my* children go to
      school here.)
      *Those two* suitcases are mine. (*Both those* suitcases are mine.)

      So the noun phrase is built up in this way:

      Noun: *people*; *money*

      Determiner + noun: *the village*, *a house*,
      *our friends*; *those houses*

      Quantifiers + noun: *some people*; *a lot of money*

      Determiner + adjective + noun: *our closest friends*; *a new house*

      Quantifiers + determiner + noun: *all those children*

      Quantifiers + determiner + adjective + noun:
      *both of my younger brothers*
      
***** Prepositional phrase

      A prepositional phrase is made up of a preposition and a noun phrase.
      We use prepositional phrases for many purposes, for example:

      - as adverbials of time and place:

	We will be back in a *few days*.
	They drove to *Glasgow*.

      - as a postmodifier in a noun phrase:

	Helen is the girl *in the red dress*.
	We've got a new television *with a thirty one inch screen*.

      - to show who did something:

	The lion was killed *by the hunter*.
	I saw a wonderful painting *by Van Gogh*.

      - with double object verbs like give and get:

	We gave five pounds *to the woman on the corner*.
	They got a drink *for me*.

      - after certain verbs, nouns and adjectives:

	The book belongs *to me*.
	I had an argument *with my brother*.
	I feel sorry *for you*.

***** Sentence structure

      Simple sentences:

      A simple sentence has only one clause:

      The children were laughing.
      John wanted a new bicycle.
      All the girls are learning English.

      Compound sentences:

      A compound sentence has two or more clauses:

      (We stayed behind) and (finished the job)
      (we stayed behind) and (finished the job), then (we went home)

      The clauses in a compound sentence are joined by
      coordinating conjunctions:

      John shouted and everybody waved.
      We looked everywhere but we couldn't find him.
      They are coming by car so they should be here soon.

      The common coordinating conjunctions are:

      and - but - or - nor - so - then - yet

      Complex sentences:

      A complex sentence has a main clause and one or more adverbial clauses.
      Adverbial clauses usually come after the main clause:

      Her father died when she was very young
      >>>
      Her father died (main clause)
      when (subordinating conjunction)
      she was very young (adverbial clause)

      She had a difficult childhood because her father died when she was
      very young.
      >>>
      She had a difficult childhood (main clause)
      because (subordinating conjunction)
      her father died (adverbial clause)
      when (subordinating conjunction)
      she was very young (adverbial clause).

      Some subordinate clauses can come in front of the main clause:

      Although a few snakes are dangerous most of them are quite harmless
      >>>
      Although(subordinating conjunction)
      some snakes are dangerous(adverbial clause)
      most of them are harmless (main clause).
** Jargon

**** Programming collocations

**** Trade law in the world

**** Your CV

**** Job proposal

***** LinkedIn
     #+BEGIN_QUOTE
     Senior Python Backend Developer
     Вимоги: - комерційний досвід розробки на Python 3+ роки,
     5+ років досвіду в розробці в цілому - досвід роботи з
     non-trivial data structure (graphs, spatial search trees) і
     відповідними алгоритмами - досвід розробки для Linux

     Буде плюсом: - досвід роботи з:
     - HTML5, 
     - JavaScript,
     - AJAX та / або C ++,
     - PostgreSQL, SQLite, MongoDB та ElasticSearch, Git,
     - Gerrit, Jenkins, AWS, Docker, Kanban, Lean
     #+END_QUOTE

     #+BEGIN_QUOTE
     Думала предложить Вам вакансию PYTHON/DJANGO DEVELOPER : 

     Feature-rich solutions for digital media providers, enabling high-quality user
     experience and seamless access to the content for their subscribers, with typical
     userbase of 500 million users  Web solutions to support world-scale events,
     including conferences, congresses, forums, sport events, enabling and facilitating
     multi-channel access to information, social networking and collaboration features
     for visitors and presenters   Qualifications to succeed in tasks mentioned above:

     Preferably 2+ years of Python web development experience
     Strong Python and Django technical knowledge
     Solid experience of REST webservices development

     Front-end HTML5, CSS3, JS knowledge  Test Driven Development and other Agile practices experience  Ability to assume ownership of the evolution of a whole application landscape   или data engineer: What we expect from you: · Bachelor’s Degree (might be final course student) from Computer Science, Statistics, Applied Mathematics, or other related field. · Knowledge of programming languages, e.g. Python, Java, Scala. · Experience with SQL, Linux or Unix shell scripting. · Understanding about Machine Learning, ETL, data warehousing, BI. · Basic knowledge of Big Data. · Be a team player. · Strong verbal and written communication skills in English.  What will be considered as an advantage: · M.sc or PhD in corresponding fields. · At least 1 year of hands-on experience with either Python and/or Java and/or Scala. · At least 1 year of hands-on experience with Bid Data systems, like Hadoop, Spark, Storm. · Experience with noSQL, Machine Learning, ETL, data warehousing, BI. · Knowledge of Scrum, Agile. · Experience with version control systems such as SVN and Git.
At 5:21 PM, Yulia Yanik said the following:зп - если максимальный левел - 2700 евро чистый доход. 30% налоги компания сама оплачивает
At 5:22 PM, Yulia Yanik said the following:и о предложении: Компания международная. Есть в 56 странах мира. Это America/ Asia/ Pacific/ Europe/ Africa/ Middle East/ All Locations.   При получении офера и приступлении к работе под Ваши навыки подбирают проект. Если их несколько - Вы выбираете тот, который Вам более всего интересен и страну где бы Вы хотели работать. Изначально все релоцируются в Латвию, Ригу, потом, в зависимости от проекта, страна. Вы можете работать как в стране где проект так и в Риге удаленно. Когда начинаете работать в компании Вы указываете свои пожелание о своем желаемом развитии. То есть, если Вы хотите развиваться в сторону менеджмента - делают план на год с развитием в эту сторону( после года работы новый план, если Ваши стремления изменили русло) и так же, если Вы хотите больше тех часть - то, соответственно, план на развитие в тех русло.  При релокации компания все оплачивает, делает документы, Вы только в посольство пойдете. + дают реелтора на поиски квартиры. Цены +- такие же как в Киеве( на еду, квартиру и все нужды). есть русскоговорящие школы, садики.  ВАЖНО! Если Вы выбрали проект в другой стране, Вы переезжаете в эту страну как в командировку. Вам оплачивают полностью командировочный пакет( квартиру, деньги на питание, проезд) Конечно же есть страховка и все эти плюшки  Компания очень хорошо развивает как себя так и своих сотрудников. Если Вы хотите кого то менторить - все это оплачивается, поощряется , все по правильному  Открывают Блю карт на 5 лет. + после 4-х лет работы получаете резидента ЕС.
     #+END_QUOTE

***** UpWork
Hello,

I need a web developper to make me a small script that will:
- scrap 12 fields of data on an HTML page for each of the urls (using xpath for example)
- allow me to use proxies
- give a .csv result

It's better if you write that with Scrapy (Python) but i'm open to other languages as long as it's easy to run for me (so please nothing that will require complex server setups)

As you'll see on my profile, i know what i want, i'm fast to answer and loyal to the good freelances.
Let's make some good work.
Yann


You will be asked to answer the following questions when submitting a proposal:
Do you know how to deal with proxies with Scrapy ?


Hello, Yann.
My name is Viktoriia Kosinova. I recently in Upwork. But I am very interested in getting my first job. I have been studying Python Scrapy past few months. And I would like to apply my knowledge in practice.

Let me clarify a link to a site that you want to parse, please. This will allow me to start writing code and provide you with the first results in .csv. I look forvard to working with you, if you are satisfied with the quality of work.

upw
The answer to the question:

Single proxy support:

1. Enable HttpProxyMiddleware in settings.py, like this:
DOWNLOADER_MIDDLEWARES = {
'scrapy.contrib.downloadermiddleware.httpproxy.HttpProxyMiddleware': 1,
}

2. pass proxy to request via request.meta:
request = Request(url="http://example.com")
request.meta['proxy'] = "host:port"
yield request

Viktoriia Kosinova

Need to scrape and download a specific website ~approx 60,000 links on the wesbite.  All are of the same type like as follows: www.example.com/abc/1
where the only thing to be changed is the parameter abc to all possible alphanumeric combinations. Every page thus generated will have a set of tabular info which has to be extracted and downloaded. Some of the pages will result into no results. Nothing is to be extracted from them. The bidder can chose to download and provide the data in any popular format as per the developers choice (json, csv, xml etc.) . 


I have already tried to get the data with scrapy package and other python modules etc and have successfully done it for around 20% of the pages. But I am getting stuck at the following. Some of the pages have data (as can be seen on the browser) but while extracting through scraping programs they return as result same as the blank pages. 

Based on the bid amount and profile of the bidder, I will share the exact website to be scraped.

Deliverables:  1. The scraped data. 2. The source code for scraping.


My name is Viktoriia Kosinova. I recently in Upwork. But I am very interested in getting my first job. 
I got acquainted with the project description. In this case I would apply Python Scrapy, like this:

import scrapy 

class FutheadSpider(scrapy.Spider):                                                                     
        name = "example"                                                                                
        allowed_domains = ["example.com"]                                                               
        max_pages = 100                                                                                                                                                                                          
        def start_requests(self):                                                                 
                for i in range(self.max_pages):                                                         
                        yield scrapy.Request('http://www.example.com/abc/%d' % i, callback=self.parse)    

Let me clarify a link to a site that you want to parse, please. This will allow me to start writing code and provide you with the first results in .csv. I look forward to working with you, if you are satisfied with the quality of work.



Hello.
My name is Viktoriia Kosinova. I recently in Upwork. But I am very interested in getting this job. 

Let me clarify a link to a site that you want to parse, please. This will allow me to start writing code and provide you with the first results in .csv. I look forward to working with you, if you are satisfied with the quality of work.



My name is Viktoriia Kosinova. I recently in Upwork. But I am very interested in getting this job. I have a good typing speed. I try to get the job done quickly and efficiently.

1. Scraper

   We have a scraper. It is scrapy right now. We are hoping to make it
   so we can scrape several things at once. We would need to have a
   different IP for each one running. Message me for details.

2. Data Extraction from an Interactive Website Database

   I'd like to scrape the data from an interactive map-based database
   and pull all the information into an excel file to be sorted.

3. Build scraper on scrapinghub.com

   Details

   I need someone to build a scraper on scrapinghub.com to scrape data
   from the local commercial register.

   Given an UID (company number) and state through an API call, scrape
   the company data and return it as json.

   Example 1:
   UID: 105794401
   state: "SO"

   url to scrape:
   https://so.chregister.ch/cr-portal/auszug/auszug.xhtml?uid=CHE-105.974.401#


   Example 2:
   UID: 101973940
   state: "AG"

   url to scrape: https://ag.chregister.ch/cr-portal/auszug/auszug.xhtml;jsessionid=7f52eae04bbcc721b4ab23a0ea9d?uid=CHE-101.973.940

   There are approx. 23 states with the same website layout, only the URL is different.

   Attached is one possible data model, which may need to be revised. 

   Please state your fixed price for ready to press the button (i.e. including setting up on scrapinghub.com).

   In addition (for future project and screening purposes whether you read the instructions), there are four states that use a different website layout, please state the additional costs for each additional website to be scrapped.

   The scraper needs to be run daily for changes in the commercial register.

   Thanks for applying. I will read each application unless done by a
   bot.


   4. Create a PDF catalog for a client

      Details

      Hello, I have a client that wants a PDF created.

      Very easy project. Please create a sample when you apply 1 pages of a
      PDF catalog showing these items it would be great.

      Please make it look branded to the sample website:
      https://www.fabric.com/apparel-fashion-fabric-chevron-apparel-fabric.aspx

      Please do a front page with logo & 6, item & 12 items per page as a test.

      Please grab the first 18items from this page for the example: 
      https://www.fabric.com/apparel-fashion-fabric-chevron-apparel-fabric.aspx

      Please make sure that it would show picture of product, sku#, and
      regularprice price. If it is on sale, use regular price instead.

      Lastly, please let me know how much a per page rate would be for
      a long-term project like this for your team. I think we can
      create a template as we make them, so it should be very quick as
      we make more and more. Please also let me know how long it takes
      per page to create. 
     
* Emacs
** Distrib::             
** Intro::               
		       
** General Concepts
*** Screen::
    On a text terminal, Emacs occupies the entire terminal screen.
    We will use the term “frame” to mean a graphical window or terminal
    screen occupied by Emacs.  Emacs behaves  similarly on both kinds of
    frames.  It normally starts out with  one frame, but you can create
    additional frames if you wish.

    Each frame consists of several distinct regions.  At the top of the
    frame is a “menu bar”.
    On a graphical display, directly below the menu bar is a
    “tool bar”, a row of icons that perform editing commands if you click on
    them.  At the very bottom of the frame is an “echo area”, where
    informative messages are displayed and where you enter information when
    Emacs asks for it.
    The main area of the frame, below the tool bar (if one exists) and
    above the echo area, is called “the window”.
    An Emacs window is where the “buffer”—the text you are editing—is
    displayed.

*** User Input::          

    GNU Emacs is primarily designed for use with the keyboard.  While it is
    possible to use the mouse to issue editing commands through the menu bar
    and tool bar, that is not as efficient as using the keyboard.
    Therefore, this manual mainly documents how to edit with the keyboard.
    Emacs also recognizes control characters that are entered using
    “modifier keys”.  Two commonly-used modifier keys are <Control> (usually
    labeled <Ctrl>), and <META> (usually labeled <Alt>).
    You can also type Meta characters using two-character sequences
    starting with <ESC>.  Thus, you can enter ‘M-a’ by typing ‘<ESC> a’.
*** Keys::                

    Some Emacs commands are invoked by just one input event; for example,
    ‘C-f’ moves forward one character in the buffer.  Other commands take
    two or more input events to invoke, such as ‘C-x C-f’ and ‘C-x 4 C-f’.

    A “key sequence”, or “key” for short, is a sequence of one or more
    input events that is meaningful as a unit.  If a key sequence invokes a
    command, we call it a “complete key”; for example, ‘C-f’, ‘C-x C-f’ and
    ‘C-x 4 C-f’ are all complete keys.  If a key sequence isn’t long enough
    to invoke a command, we call it a “prefix key”; from the preceding
    example, we see that ‘C-x’ and ‘C-x 4’ are prefix keys.  Every key
    sequence is either a complete key or a prefix key.

    By default, the prefix keys in Emacs are ‘C-c’, ‘C-h’, ‘C-x’, ‘C-x
    <RET>’, ‘C-x @’, ‘C-x a’, ‘C-x n’, ‘C-x r’, ‘C-x v’, ‘C-x 4’, ‘C-x 5’,
    ‘C-x 6’, <ESC>, ‘M-g’, and ‘M-o’.

*** Commands::
    This manual is full of passages that tell you what particular keys do.
    But Emacs does not assign meanings to keys directly.  Instead, Emacs
    assigns meanings to named “commands”, and then gives keys their meanings
    by “binding” them to commands.

    Every command has a name chosen by a programmer.  The name is usually
    made of a few English words separated by dashes; for example,
    ‘next-line’ or ‘forward-word’.  Internally, each command is a special
    type of Lisp “function”, and the actions associated with the command are
    performed by running the function.

    The bindings between keys and commands are recorded in tables called
    “keymaps”.


*** Entering Emacs::
       When Emacs starts up, the initial frame displays a special buffer
       named ‘*GNU Emacs*’.  This “startup screen” contains information about
       Emacs and “links” to common tasks that are useful for beginning users.
       For instance, activating the ‘Emacs Tutorial’ link opens the Emacs
       tutorial; this does the same thing as the command ‘C-h t’
       (‘help-with-tutorial’).  To activate a link, either move point onto it
       and type ‘<RET>’.

       Generally, it is unnecessary and wasteful to start Emacs afresh each
       time you want to edit a file.  The recommended way to use Emacs is to
       start it just once, just after you log in, and do all your editing in
       the same Emacs session.

*** Exiting::             
*** Exiting::
    ‘C-x C-c’
     Kill Emacs (‘save-buffers-kill-terminal’).

    ‘C-z’
     On a text terminal, suspend Emacs; on a graphical display, iconify
     (or “minimize”) the selected frame (‘suspend-emacs’).

    In most shells, you can resume Emacs after suspending it with the
    shell command ‘%emacs’.

*** Basic::
**** Inserting text
     'C-h t' ('help-with-tutorial')
     ‘C-q’ ('quoted-insert')
     ‘C-x 8 <RET>’ (‘insert-char’)

        For example, the following all insert the same character:

     C-x 8 <RET> left single quotation mark <RET>
     C-x 8 <RET> left sin <TAB> <RET>
     C-x 8 <RET> 2018 <RET>
     C-x 8 [
     A-[  (if the Alt key works)
     `    (in Electric Quote mode)

**** Changing the location of point

     ‘C-f’
     Move forward one character (‘forward-char’).

     ‘C-b’
     Move backward one character (‘backward-char’).

     ‘C-n’
     ‘<DOWN>’
     Move down one screen line (‘next-line’).  This command attempts to
     keep the horizontal position unchanged, so if you start in the
     middle of one line, you move to the middle of the next.

     ‘C-p’
     ‘<UP>’
     Move up one screen line (‘previous-line’).  This command preserves
     position within the line, like ‘C-n’.

     ‘C-a’
     ‘<Home>’
     Move to the beginning of the line (‘move-beginning-of-line’).

     ‘C-e’
     ‘<End>’
     Move to the end of the line (‘move-end-of-line’).


     ‘M-f’
     Move forward one word (‘forward-word’).


     ‘C-<RIGHT>’
     ‘M-<RIGHT>’
     This command (‘right-word’) behaves like ‘M-f’, except it moves
     backward by one word if the current paragraph is right-to-left.

     ‘M-b’
     Move backward one word (‘backward-word’).


     ‘C-<LEFT>’
     ‘M-<LEFT>’
     This command (‘left-word’) behaves like ‘M-b’, except it moves
     forward by one word if the current paragraph is right-to-left.

     ‘M-r’
     Without moving the text on the screen, reposition point on the left
     margin of the center-most text line of the window.

     ‘C-v’
     ‘<PageDown>’
     ‘<next>’
     Scroll the display one screen forward, and move point onscreen if
     necessary (‘scroll-up-command’).

     ‘M-v’
     ‘<PageUp>’
     ‘<prior>’
     Scroll one screen backward, and move point onscreen if necessary
     (‘scroll-down-command’).

     ‘M-g c’
     Read a number N and move point to buffer position N.  Position 1 is
     the beginning of the buffer.

     ‘M-g M-g’
     ‘M-g g’
     Read a number N and move point to the beginning of line number N
     (‘goto-line’).  Line 1 is the beginning of the buffer.  If point is
     on or just after a number in the buffer, that is the default for N.
     Just type <RET> in the minibuffer to use it.  You can also specify
     N by giving ‘M-g M-g’ a numeric prefix argument.  *Note Select
     Buffer::, for the behavior of ‘M-g M-g’ when you give it a plain
     prefix argument.

     ‘M-g <TAB>’
     Read a number N and move to column N in the current line.  Column 0
     is the leftmost column.  If called with a prefix argument, move to
     the column number specified by the argument’s numeric value.

     ‘C-x C-n’
     Use the current column of point as the “semipermanent goal column”
     for ‘C-n’ and ‘C-p’ (‘set-goal-column’) in the current buffer.
     When a semipermanent goal column is in effect, those commands
     always try to move to this column, or as close as possible to it,
     after moving vertically.  The goal column remains in effect until
     canceled.

     ‘C-u C-x C-n’
     Cancel the goal column.  Henceforth, ‘C-n’ and ‘C-p’ try to
     preserve the horizontal position, as usual.

**** Erasing text
     ‘<DEL>’
     ‘<BACKSPACE>’
     Delete the character before point, or the region if it is active
     (‘delete-backward-char’).

     ‘<Delete>’
     Delete the character after point, or the region if it is active
     (‘delete-forward-char’).

     ‘C-d’
     Delete the character after point (‘delete-char’).

     ‘C-k’
     Kill to the end of the line (‘kill-line’).

     ‘M-d’
     Kill forward to the end of the next word (‘kill-word’).

     ‘M-<DEL>’
     Kill back to the beginning of the previous word
     (‘backward-kill-word’).

**** Undoing changes
     ‘C-/’
     Undo one entry of the undo records—usually, one command worth
     (‘undo’).
     ‘C-x u’
     ‘C-_’ The same.

**** Blank lines
     'C-o' ('open-line')
     'C-x C-o' ('delete-blank-lines')
*** Help::
    ‘C-h C-h’ ('help-for-help')
    ‘C-h a TOPICS <RET>’ (‘apropos-command’).
    ‘C-h i d m emacs <RET> i TOPIC <RET>’
    ‘C-h i d m emacs <RET> s TOPIC <RET>’
    ‘C-h C-f’
    ‘C-h p’ (‘finder-by-keyword’)
    ‘C-h b’ (‘describe-bindings’)
    ‘C-h e’ (‘view-echo-area-messages’).
    ‘C-h d TOPICS <RET>’ (‘apropos-documentation’)
    ‘C-h k KEY’ (‘describe-key’)
    ‘C-h P PACKAGE <RET>’ (‘describe-package’)
                        

*** Mark::
    Setting the mark
    ‘C-<SPC>’ (‘set-mark-command’)
    ‘C-@’     The same.
    ‘C-x C-x’ (‘exchange-point-and-mark’)
    ‘C-g’ deactivate

    Commands to Mark Textual Objects

    ‘M-@’ (‘mark-word’)
    ‘C-M-@’ (‘mark-sexp’)
    ‘M-h’ (‘mark-paragraph’)
    ‘C-M-h’ (‘mark-defun’)
    ‘C-x C-p’ (‘mark-page’)
    ‘C-x h’ (‘mark-whole-buffer’)

    Operating on the Region

   • Kill it with ‘C-w’
   • Copy it to the kill ring with ‘M-w’
   • Convert case with ‘C-x C-l’ or ‘C-x C-u’
   • Undo changes within it using ‘C-u C-/’
   • Replace text within it using ‘M-%’
   • Indent it with ‘C-x <TAB>’ or ‘C-M-\’
   • Fill it as text with ‘M-x fill-region’
   • Check the spelling of words within it with ‘M-$’
   • Evaluate it as Lisp code with ‘M-x eval-region’
   • Save it in a register with ‘C-x r s’
   • Save it in a buffer or a file

   The Mark Ring

   ‘C-<SPC> C-<SPC>’
   Set the mark, pushing it onto the mark ring, without activating it.
   ‘C-u C-<SPC>’
   Move point to where the mark was, and restore the mark from the
   ring of former marks.

*** Killing::
    ‘M-\’
    Delete spaces and tabs around point (‘delete-horizontal-space’).

    ‘M-<SPC>’
    Delete spaces and tabs around point, leaving one space
    ‘just-one-space’).

    ‘C-x C-o’
    Delete blank lines around the current line (‘delete-blank-lines’).

    ‘M-^’
    Join two lines by deleting the intervening newline, along with any
    indentation following it (‘delete-indentation’).

*** Registers::
    ‘M-x view-register <RET> R’
    ‘C-x r <SPC> R’ (‘point-to-register’)
    ‘C-x r j R’ (‘jump-to-register’).
    ‘C-x r s R’(‘copy-to-register’)
    ‘C-x r i R’ (‘insert-register’).
    ‘M-x append-to-register <RET> R’
    ‘M-x prepend-to-register <RET> R’
    ‘C-x r r R’ (‘copy-rectangle-to-register’)
    ‘C-x r w R’ (‘window-configuration-to-register’)
    ‘C-x r f R’ (‘frameset-to-register’)
    ‘C-u NUMBER C-x r n R’ (‘number-to-register’)
    ‘C-u NUMBER C-x r + R’ (‘increment-register’)
*** Display::

    Scrolling commands

    ‘C-l’ (‘recenter-top-bottom’) Typing ‘C-l’ twice in a row (‘C-l
    C-l’) scrolls the window so that point is on the topmost screen
    line. Typing a third ‘C-l’ scrolls the window so that point is on
    the bottom-most screen line. Each successive ‘C-l’ cycles through
    these three positions.

    ‘C-x <’ ('scroll-left')
    ‘C-x >’ ('scroll-right')

    ‘C-v’
    ‘<next>’
    ‘<PageDown>’

    ‘M-v’
    ‘<prior>’
    ‘<PageUp>’

    ‘M-x recenter’
    ‘C-x n n’ (‘narrow-to-region’)
    ‘C-x n w’ (‘widen’)
    ‘C-x n p’ (‘narrow-to-page’)
    ‘C-x n d’ (‘narrow-to-defun’)

*** Search::              
*** Fixit::               
*** Keyboard Macros::     
                        
Major Structures of Emac
*** DONE Checking spelling
    CLOSED: [2017-05-28 Sun 12:58]
    Ispell
    Type: Esc x ispell-buffer(word, region ...) Enter
*** Files::               
*** Buffers::
    ‘C-x b BUFFER <RET>’  (‘switch-to-buffer’).
    ‘C-x 4 b BUFFER <RET>’ (‘switch-to-buffer-other-window’).
    ‘C-x 5 b BUFFER <RET>’ (‘switch-to-buffer-other-frame’).
    ‘C-x <LEFT>’ (‘previous-buffer’).
    ‘C-x <RIGHT>’ (‘next-buffer’)
    ‘C-x C-b’  (‘list-buffers’).
    ‘C-x C-q’  (‘read-only-mode’)
    ‘M-x rename-buffer <RET> NAME <RET>’
    ‘C-x k BUFNAME <RET>’ ('kill-buffer’).
    ‘M-x kill-some-buffers’
     Offer to kill each buffer, one by one.
    ‘M-x kill-matching-buffers’
     Offer to kill all buffers matching a regular expression.

     Buffer's Menu commands

     'd' - flag the buffer for deletion (killing)
     's' - flag the buffer for saving
     'x' - perform all flagged deletions and saves
     'u' - remove all flags from current line and move down
           ('Buffer-menu-unmark').
     '<DEL>' - Move to the previous line and remove all flags on that line
     (‘Buffer-menu-backup-unmark’).


*** Windows::
    C-M-v scroll-other-window
    C-x 4 f find-file-other-window
    C-x 4 b switch-to-buffer-other-window
*** Frames::
    C-x 5 2 (for make-frame)
    C-x 5 o Move to other frame.
    C-x 5 0 Delete current frame.
    C-x 5 f Find file in a new frame
    C-x 5 r
    C-x 5 b Make frame and display other buffer in it.

*** International::       
                        
Advanced Features       
*** Modes::               
*** Indentation::         
*** Text::                
*** Programs::            
*** Building::            
*** Maintaining::         
*** Abbrevs::             
*** Dired::               
*** Calendar/Diary::      
*** Sending Mail::        
*** Rmail::               
*** Gnus::                
*** Host Security::       
*** Network Security::    
*** Document View::       
*** DONE EWW::                 
    “EWW”, the Emacs Web Wowser, is a web browser package for Emacs.  It
    allows browsing URLs within an Emacs buffer.  The command ‘M-x eww’ will
    open a URL or search the web.  You can open a file using the command
    ‘M-x eww-open-file’.  You can use EWW as the web browser for
    ‘browse-url’, *note Browse-URL::.  For full details, *note EWW:
    (eww)Top.

    ‘M-x browse-url <RET> URL <RET>’
     Load a URL into a Web browser, prompts for a URL, and follows it.

     How to open new website in new buffer?

     Call rename-buffer to rename the first one. Then, call eww again to open a new site.

*** Embedded WebKit Widget
*** Shell::               
*** Emacs Server::        
*** Printing::            
*** Sorting::             
*** Picture Mode::        
*** Editing Binary Files::  
*** Saving Emacs Sessions:: 
*** Recursive Edit::      
*** Hyperlinking::        
*** Amusements::          
*** Packages::            
*** Customization::       
*** Dired and find
    To search for files with names matching a wildcard pattern use
    M-x find-name-dired. It reads arguments directory and pattern, and
    chooses all the files in directory or its subdirectories whose
    individual names match pattern.
** Learning GNU Emacs (Debra Cameron)
*** User interface changes, basic commands(Chapter 1)

    'C-x C-v' find alternate file
    'C-x i' insert file at cursor position
    'C-x C-w' write buffer contents to file
    'C-h f' online help for a given command line
    'C-h k' online help for a given keystroke sequence
    'C-h t' Emacs tutorial



*** How Emacs interacts with the operating system clipboard, including  specific clipboard-related commands (Chapter 2)

    Editing text

    M-x refill-mode Enter
    M-x auto-fill-mode Enter
    M-x paragraph-indent-text-mode

    Moving the cursor
    If you're at the end of a line, C-f moves to the first character
    on the next line.
    Likewise, if you're at the beginning of a line, C-b moves to the last
    character of the previous line.

    C-f forward-char Move forward one character (right).
    C-b backward-char Move backward one character (left).
    C-p previous-line Move to previous line (up).
    C-n next-line Move to next line (down).
    M-f forward-word Move one word forward.
    M-b backward-word Move one word backward.
    C-a beginning-of-line Move to beginning of line.
    C-e end-of-line Move to end of line.
    M-e forward-sentence Move forward one sentence.
    M-a backward-sentence Move backward one sentence.
    M-} forward-paragraph Move forward one paragraph.
    M-{ backward-paragraph Move backward one paragraph.
    C-v scroll-up Move forward one screen.
    M-v scroll-down Move backward one screen.
    C-x ] forward-page Move forward one page.
    C-x [ backward-page Move backward one page.
    M-< beginning-of-buffer Move to beginning of file.
    M-> end-of-buffer Move to end of file.
    (none) goto-line Go to line n of file.
    (none) goto-char Go to character n of file.
    C-l recenter Redraw screen with current line in the
    center.
    M-n digit-argument Repeat the next command n times.
    C-u n universal-argument Repeat the next command n times

    Deletion commands

    Keystrokes Command name Action
    C-d delete-char Delete character under cursor.
    Del delete-backward-char Delete previous character.
    M-d kill-word Delete next word.      M-Del backward-kill-word Delete previous word.
    C-k kill-line Delete from cursor to end of line.
    M-k kill-sentence Delete next sentence.
    C-x Del backward-kill-sentence Delete previous sentence.
    C-y yank Restore what you've deleted.
    C-wEdit kill-region Delete a marked region
    (none) kill-paragraph Delete next paragraph.
    (none) backward-kill-paragraph Delete previous paragraph.

    Commands for working with regions

    Keystrokes Command name Action
    C-@ or C- Space  set-mark-command Mark the beginning (or end) of a region.
    C-x C-x exchange-point-and-mark Exchange location of cursor and mark.
    C-w kill-region Delete the region.
    C-y yank Paste most recently killed or copied text.
    M-w kill-ring-save Copy the region (so it can be pasted with C-y).
    M-h mark-paragraph Mark paragraph.
    C-x C-p mark-page Mark page.
    C-x h mark-whole-buffer Mark buffer.
    M-y yank-pop After C-y, pastes earlier deletion.

    Transposition commands

    Keystrokes    Command name Action
    C-t      transpose-chars Transpose two letters.
    M-t      transpose-words Transpose two words.
    C-x C-t  transpose-lines Transpose two lines.

    Capitalization commands

    M-c          capitalize-word
    M-u          upcase-word
    M-l          downcase-word
    Meta - M-c  negative-argument; capitalize-word
    Meta - M-u  negative-argument; upcase-word
    Meta - M-l  negative-argument; downcase-word


    Undoing changes and text recovering

    C-_or C-x u (undo)
    M-x revert-buffer Enter
    C-x C-f filename~ Enter C-x C-w filename Enter


    Emacs doesn't provide any special commands forxo restoring a buffer from
    the backup copy. The easiest way to do this is to edit the backup copy
    and then save it as the real file. For example, if you were working
    with a file called text, you could: exit Emacs by typing C-x C-c, then
    start Emacs again by typing emacs text~. After the backup file is
    displayed, save it as the real file by typing C-x C-w text Enter. As a
    safeguard, Emacs asks you before it writes over the original file:

    File text exists; overwrite? (y or n)

    Type y to overwrite the original file with the backup file.


    To recover text from an auto-save file, type M-x recover-file Enter.
    Emacs opens a window that lists both the file and its associated
    auto-save file so that you can compare the time at which they were
    created, their size, and so forth. Emacs asks you the following
    question:

    Recover auto-save file #text#? (yes or no)


*** Dynamic abbreviations (Chapter 3)

    Incremental search commands

    C-s  isearch-forward
    C-r isearch-backward
    C-g keyboard-quit
    Del isearch-delete-char
    C-s C-w isearch-yank-word
    C-s C-y isearch-yank-line
    C-s M-y isearch-yank-kill
    C-s C-s isearch-repeat-forward
    C-r C-r isearch-repeat-backward

    Responses during query-replace

    | Space or y | Replace searchstring with newstring                 |
    | Del or n   | Don't replace; move to next instance.               |
    | .          | Replace the current instance and quit.              |
    | ,          | Replace and let me see the result before moving on. |
    | !          | Replace all the rest and  don't  ask.               |
    | ^          | Back up to the previous instance.                   |
    | Enter or q | Exit query-replace.                                 |
    | E          | Modify the replacement  string.                     |

*** Chapter 4

    Frame commands

    C-x 5 o
    other-frame
    Move to other frame.

    C-x 5 0
    delete-frame
    Delete current frame.

    C-x 5 2
    make-frame
    Create a new frame on
    the current buffer.

    C-x 5 f
    find-file-other-frame
    Find file in a new
    frame.

    C-x 5 r
    find-file-read-only-other-frame
    Finds a file in a new
    frame, but it is
    read-only.

    C-x 5 b
    switch-to-buffer-other-frame
    Make frame and display
    other buffer in it.

*** Expanded coverage of the directory editor, Dired, to help you organize and
 work with files more efficiently (Chapter 5)

*** Changes to the way Emacs handles tabs and indentation and how to get Emacs
 to do what you want it to (Chapter 7)

*** Artist mode for drawing with the mouse (Chapter 7)

*** Inserting characters from other character sets in HTML files (Chapter 8)

*** Using font-lock mode for coloring text for easier editing (Chapter 9)

*** Expanded Java coverage, including how to install and use the Java
 Development Environment for Emacs (JDEE) (Chapter 9)

*** Perl support with Cperl mode (Chapter 9)

*** Managing changes to large, multiple file projects more effectively using
 etags (Chapter 9)

*** Customizing Emacs through the interactive Custom interface or through the
 .emacs startup file (Chapter 10)

*** Expanded coverage of how version control mode connects with a variety of
 change control systems, including CVS, RCS, Subversion, and SCCS (Chapter
 12)

*** A new chapter on platform-specific considerations, including details on
 how to install the latest version of Emacs on Unix, Windows, and Mac OS X
 (Chapter 13)

** Basics
*** The Kill Ring

The kill ring is a list of blocks of text that were previously killed. There is only one kill ring, shared by all buffers, so you can kill text in one buffer and yank it in another buffer. This is the usual way to move text from one buffer to another. (There are several other methods: for instance, you could store the text in a register; see Registers. See Accumulating Text, for some other ways to move text around.)

The maximum number of entries in the kill ring is controlled by the variable kill-ring-max. The default is 60. If you make a new kill when this limit has been reached, Emacs makes room by deleting the oldest entry in the kill ring.

The actual contents of the kill ring are stored in a variable named kill-ring; you can view the entire contents of the kill ring with C-h v kill-ring.

As explained in Yanking, you can use a numeric argument to C-y to yank text that is no longer the most recent kill. This is useful if you remember which kill ring entry you want. If you don’t, you can use the M-y (yank-pop) command to cycle through the possibilities.

If the previous command was a yank command, M-y takes the text that was yanked and replaces it with the text from an earlier kill. So, to recover the text of the next-to-the-last kill, first use C-y to yank the last kill, and then use M-y to replace it with the previous kill. M-y is allowed only after a C-y or another M-y.

You can understand M-y in terms of a “last yank” pointer which points at an entry in the kill ring. Each time you kill, the “last yank” pointer moves to the newly made entry at the front of the ring. C-y yanks the entry which the “last yank” pointer points to. M-y moves the “last yank” pointer to a different entry, and the text in the buffer changes to match. Enough M-y commands can move the pointer to any entry in the ring, so you can get any entry into the buffer. Eventually the pointer reaches the end of the ring; the next M-y loops back around to the first entry again.

M-y moves the “last yank” pointer around the ring, but it does not change the order of the entries in the ring, which always runs from the most recent kill at the front to the oldest one still remembered.

M-y can take a numeric argument, which tells it how many entries to advance the “last yank” pointer by. A negative argument moves the pointer toward the front of the ring; from the front of the ring, it moves “around” to the last entry and continues forward from there.

Once the text you are looking for is brought into the buffer, you can stop doing M-y commands and it will stay there. It’s just a copy of the kill ring entry, so editing it in the buffer does not change what’s in the ring. As long as no new killing is done, the “last yank” pointer remains at the same place in the kill ring, so repeating C-y will yank another copy of the same previous kill.

When you call C-y with a numeric argument, that also sets the “last yank” pointer to the entry that it yanks.

**** "Undo" commands reverses recent changes in the buffer's text.
'C-/'
'C-x u'
'C-_'

**** Deletion

Deletion means erasing text and not saving it in the kill reng.

‘<DEL>’
‘<BACKSPACE>’
     Delete the previous character, or the text in the region if it is
     active (‘delete-backward-char’).

‘<Delete>’
     Delete the next character, or the text in the region if it is
     active (‘delete-forward-char’).

‘C-d’
     Delete the next character (‘delete-char’).

‘M-\’
     Delete spaces and tabs around point (‘delete-horizontal-space’).
‘M-<SPC>’
     Delete spaces and tabs around point, leaving one space
     (‘just-one-space’).
‘C-x C-o’
     Delete blank lines around the current line (‘delete-blank-lines’).
‘M-^’
     Join two lines by deleting the intervening newline, along with any
     indentation following it (‘delete-indentation’).

**** Some kill commands 

‘C-w’
     Kill the region (‘kill-region’).
‘M-w’
     Copy the region into the kill ring (‘kill-ring-save’).
‘M-d’
     Kill the next word (‘kill-word’).  *Note Words::.
‘M-<DEL>’
     Kill one word backwards (‘backward-kill-word’).
‘C-x <DEL>’
     Kill back to beginning of sentence (‘backward-kill-sentence’).
     *Note Sentences::.
‘M-k’
     Kill to the end of the sentence (‘kill-sentence’).
‘C-M-k’
     Kill the following balanced expression (‘kill-sexp’).  *Note
     Expressions::.
‘M-z CHAR’
     Kill through the next occurrence of CHAR (‘zap-to-char’).

**** Yanking

‘C-y’
     Yank the last kill into the buffer, at point (‘yank’).
‘M-y’
     Replace the text just yanked with an earlier batch of killed text
     (‘yank-pop’).  *Note Earlier Kills::.
‘C-M-w’
     Cause the following command, if it is a kill command, to append to
     the previous kill (‘append-next-kill’).  *Note Appending Kills::.

**** The Mark and the Region

 You can also explicitly deactivate the mark
at any time, by typing ‘C-g’

Here are some commands for setting the mark:

‘C-<SPC>’
     Set the mark at point, and activate it (‘set-mark-command’).
‘C-@’
     The same.
‘C-x C-x’
     Set the mark at point, and activate it; then move point where the
     mark used to be (‘exchange-point-and-mark’).


‘C-<SPC> C-<SPC>’
     Set the mark, pushing it onto the mark ring, without activating it.
‘C-u C-<SPC>’
     Move point to where the mark was, and restore the mark from the
     ring of former marks.

   The variable ‘mark-ring-max’ specifies the maximum number of entries
to keep in the mark ring.  This defaults to 16 entries.  If that many
entries exist and another one is pushed, the earliest one in the list is
discarded.  Repeating ‘C-u C-<SPC>’ cycles through the positions
currently in the ring.

**** Moving commands
‘M-<’
    
 to the top of the buffer (‘beginning-of-buffer’).  With
     numeric argument N, move to N/10 of the way from the top.

‘M->’
     Move to the end of the buffer (‘end-of-buffer’).

‘C-e’
‘<End>’
     Move to the end of the line (‘move-end-of-line’).


**** Windows
‘C-x 2’
     Split the selected window into two windows, one above the other
     (‘split-window-below’).
‘C-x 3’
     Split the selected window into two windows, positioned side by side
     (‘split-window-right’).
‘C-Mouse-2’
     In the mode line of a window, split that window.

‘C-x o’
     Select another window (‘other-window’).
‘C-M-v’
     Scroll the next window (‘scroll-other-window’).
‘Mouse-1’
     ‘Mouse-1’, in the text area of a window, selects the window and
     moves point to the position clicked.  Clicking in the mode line
     selects the window without moving point in it.

Displaying in Another Window
=================================

‘C-x 4’ is a prefix key for a variety of commands that switch to a
buffer in a different window—either another existing window, or a new
window created by splitting the selected window.  *Note Window Choice::,
for how Emacs picks or creates the window to use.

‘C-x 4 b BUFNAME <RET>’
     Select buffer BUFNAME in another window
     (‘switch-to-buffer-other-window’).

‘C-x 4 C-o BUFNAME <RET>’
     Display buffer BUFNAME in some window, without trying to select it
     (‘display-buffer’).  *Note Displaying Buffers::, for details about
     how the window is chosen.

‘C-x 4 f FILENAME <RET>’
     Visit file FILENAME and select its buffer in another window
     (‘find-file-other-window’).  *Note Visiting::.

‘C-x 4 d DIRECTORY <RET>’
     Select a Dired buffer for directory DIRECTORY in another window
     (‘dired-other-window’).  *Note Dired::.

‘C-x 4 m’
     Start composing a mail message, similar to ‘C-x m’ (*note Sending
     Mail::), but in another window (‘mail-other-window’).

‘C-x 4 .’
     Find a tag in the current tags table, similar to ‘M-.’ (*note
     Tags::), but in another window (‘find-tag-other-window’).
‘C-x 4 r FILENAME <RET>’
     Visit file FILENAME read-only, and select its buffer in another
     window (‘find-file-read-only-other-window’).  *Note Visiting::.

Deleting and Rearranging Windows
=====================================

‘C-x 0’
     Delete the selected window (‘delete-window’).
‘C-x 1’
     Delete all windows in the selected frame except the selected window
     (‘delete-other-windows’).
‘C-x 4 0’
     Delete the selected window and kill the buffer that was showing in
     it (‘kill-buffer-and-window’).  The last character in this key
     sequence is a zero.
‘C-x ^’
     Make selected window taller (‘enlarge-window’).
‘C-x }’
     Make selected window wider (‘enlarge-window-horizontally’).
‘C-x {’
     Make selected window narrower (‘shrink-window-horizontally’).
‘C-x -’
     Shrink this window if its buffer doesn’t need so many lines
     (‘shrink-window-if-larger-than-buffer’).
‘C-x +’
     Make all windows the same height (‘balance-windows’).



*** Emacs Lisp Packages

M-x list-packages brings up a buffer named *Packages* with a list of all packages. You can install or uninstall packages via this buffer. See Package Menu.

The command C-h P (describe-package) prompts for the name of a package, and displays a help buffer describing the attributes of the package and the features that it implements.

**** Package Installation
Packages are most conveniently installed using the package menu (see Package Menu), but you can also use the command M-x package-install. This prompts for the name of a package with the ‘available’ status, then downloads and installs it.

**** Upgrade packages
Within Emacs, use M-x list-packages to list all packages which will automatically refresh the archive contents. Afterwards use U to mark all upgradable packages to be upgraded, and x to actually perform thenew updates

*** Custom Themes
Custom themes are collections of settings that can be enabled or disabled as a unit. You can use Custom themes to switch easily between various collections of settings, and to transfer such collections from one computer to another.

A Custom theme is stored as an Emacs Lisp source file. If the name of the Custom theme is name, the theme file is named name-theme.el.

Type M-x customize-themes to switch to a buffer named *Custom Themes*, which lists the Custom themes that Emacs knows about. By default, Emacs looks for theme files in two locations: the directory specified by the variable custom-theme-directory (which defaults to ~/.emacs.d/), and a directory named etc/themes in your Emacs installation (see the variable data-directory). The latter contains several Custom themes which are distributed with Emacs, which customize Emacs’s faces to fit various color schemes. (Note, however, that Custom themes need not be restricted to this purpose; they can be used to customize variables too.)

If you want Emacs to look for Custom themes in some other directory, add the directory name to the list variable custom-theme-load-path. Its default value is (custom-theme-directory t); here, the symbol custom-theme-directory has the special meaning of the value of the variable custom-theme-directory, while t stands for the built-in theme directory etc/themes. The themes listed in the *Custom Themes* buffer are those found in the directories specified by custom-theme-load-path.

**** Set Color Theme
Emacs 24 comes with color themes.

The main function to use is ‘color-theme-select’. It creates the Color Theme Selection buffer that allows you to test the themes before choosing one.


M-x load-library RET color-theme RET M-x color-theme-select RET



Call customize-themes to set a color theme (M-x customize-themes)
Alternatively, call load-theme, then press Tab ↹ to show a list of available themes.

To clear theme, call disable-theme. Press Tab ↹ for completion.

To find enabled themes, call describe-variable then type custom-enabled-themes
Set a Color Theme Permanently

To set it permanently, put this in your emacs init file.

(load-theme 'misterioso)

Here's list of emacs 24.3 themes.

adwaita
deeper-blue
dichromacy
light-blue
manoj-dark
misterioso
tango
tango-dark
tsdh-dark
tsdh-light
wheatgrass
whiteboard
wombat

**** Simple Setting of Background Color

Sometimes a color theme is too much. All you need is a mild background color.

To set background color, call set-background-color then type “honeydew”.

Call list-colors-display to see colors names.

For permanent setup, put the following in your emacs init file.

;; initial window settings
(setq initial-frame-alist
      '((width . 92)
        (height . 54)
        (background-color . "honeydew")))

;; subsequent window settings
(setq default-frame-alist
      '((menu-bar-lines . 1)
        (tool-bar-lines . 0)
        (width . 92)
        (height . 52)
        (background-color . "honeydew")))

**** Simple White on Black, Reverse Video

In terminal, emacs --reverse-video will start emacs with white text on black background. This is usefulunder bright sunlight.

*** Key-chord
Add to your ~/.emacs
;;
;;      (require 'key-chord)
;;      (key-chord-mode 1)
;;
;; and some chords, for example
(key-chord-define-global "hj"     'undo)
(key-chord-define-global "44"     "$")
(key-chord-define-global "the "     "the ")

;;press M-x eval-buffer in *scratch* after each combination

*** How activate venv inside Emacs
To activate venv inside Emacs use ~M-x pyvenv-activate /path/to/your/dir/venv/~
To deactivate venv inside Emacs use ~M-x pyvenv-deactivate

*** Copy and Paste
| Common name | Common key | Emacs Name     | Emacs Key |
|-------------+------------+----------------+-----------|
| Cut         | C-x        | Kill           | C-w       |
| Copy        | C-c        | Kill-ring-save | M-w       |
| Paste       | C-v        | Yank           | C-y       |
| -           | -          | Yank next      | M-y       |
   
** Org-mode
*** Document structure
    Org is based on Outline mode and provides flexible command to edit the
    structure of the document.
    Outlines allow a document to be organized in a hierarchical structure,
    which (at least for me) is the best representation of notes and thoughts.
    An overview of this structure is achieved by folding (hiding) large parts
    of the document to show only the general document structure and the parts
    currently being worked on.  Org greatly simplifies the use of outlines by
    compressing the entire show/hide functionality into a single command,
    `org-cycle', which is bound to the <TAB> key.

    Headlines define the structure of an outline tree.  The headlines in Org
    start with one or more stars, on the left margin.

    Outlines make it possible to hide parts of the text in the buffer.  Org
    uses just two commands, bound to <TAB> and `S-<TAB>' to change the
    visibility in the buffer.

    C-u <TAB>
    _Global cycling_: Rotate the entire buffer among the states

          ,-> OVERVIEW -> CONTENTS -> SHOW ALL --.
          '--------------------------------------'

     When `S-<TAB>' is called with a numeric prefix argument N, the
     CONTENTS view up to headlines of level N will be shown.  Note that
     inside tables, `S-<TAB>' jumps to the previous field.


    `C-c C-k'     (`outline-show-branches')
     Expose all the headings of the subtree, CONTENT view for just one
     subtree.


    `C-c <TAB>'     (`outline-show-children')
     Expose all direct children of the subtree.  With a numeric prefix
     argument N, expose all children down to level N.
**** Initial visibility
    'C-u C-u Tab' - Switch back to the startup visibility of the buffer, i.e.,
     whatever is requested by startup options and `VISIBILITY'
     properties in individual entries.

   ***  Org-mode plain-list shortcuts
  
[[http://orgmode.org/manual/Plain-lists.html][Org-mode plain list]]   (to open link - C-c C-o)
- <TAB> 
  Items can be folded just like headline levels. Normally this works only if the cursor is on a plain
  list item. For more details, see the variable org-cycle-include-plain-lists. If this variable is set
  to integrate, plain list items will be treated like low-level headlines. The level of an item is then
  given by the indentation of the bullet/number. Items are always subordinate to real headlines, howev
  er; the hierarchies remain completely separated. In a new item with no text yet, the first <TAB> 
  demotes the item to become a child of the previous one. Subsequent <TAB>s move the item to meaningful  levels in the list and eventually get it back to its initial position. 
- M-<RET>  
  Insert new item at current level. With a prefix argument, force a new heading (see
  Structure editing). If this command is used in the middle of an item, that item is split in two,
  and the second part becomes the new item6. If this command is executed before item's body, the new it  em is created before the current one.
- M-S-<RET>
  Insert a new item with a checkbox 
- S-up
- S-down
  Jump to the previous/next item in the current list7, but only if org-support-shift-
  select is off. If not, you can still use paragraph jumping commands like C-<up> and
  C-<down> to quite similar effect.
- M-up
- M-down
  Move the item including subitems up/down (swap with previous/next item of same indentetion).
- M-left
- M-right
  Decrease/increase the indentation of an item, leaving children alone. 
- M-S-<left>
- M-S-<right>
  Decrease/increase the indentation of the item, including subitems.
- C-c C-c
  If there is a checkbox (see Checkboxes) in the item line, toggle the state of the 
  checkbox. In any case, verify bullets and indentation consistency in the whole list. 
- C-c -
  Cycle the entire list level through the different itemize/enumerate bullets (‘-’, ‘+’, ‘*’, ‘1.’, ‘1)’)
**** Motion
     The following commands jump to other headlines in the buffer.

     `C-c C-n'     (`org-next-visible-heading')
     Next heading.

     `C-c C-p'     (`org-previous-visible-heading')
     Previous heading.

     `C-c C-f'     (`org-forward-same-level')
     Next heading same level.

     `C-c C-b'     (`org-backward-same-level')
     Previous heading same level.

     `C-c C-u'     (`outline-up-heading')
     Backward to higher level heading.

     `C-c C-j'     (`org-goto')
     Jump to a different place without changing the current outline
     visibility.  Shows the document structure in a temporary buffer,
     where you can use the following keys to find your destination:
          <TAB>         Cycle visibility.
          <down> / <up>   Next/previous visible headline.
          <RET>         Select this location.
          /           Do a Sparse-tree search
          The following keys work if you turn off `org-goto-auto-isearch'
          n / p        Next/previous visible headline.
          f / b        Next/previous headline same level.
          u            One level up.
          0-9          Digit argument.
          q            Quit
**** Structure Editing
    `M-RET'  insert new heading/item at current level

    `C-RET'  insert new heading after subtree

    `M-S-RET'  insert new TODO entry/checkbox item

    `C-S-RET'  insert TODO entry/ckbx after subtree

    `C-c -'  turn (head)line into item, cycle item type

    `C-c *' turn item/line into headline

    `M-LEFT/RIGHT'  promote/demote heading

    `M-S-UP/DOWN'  move subtree/list item up/down

    `C-c ^' sort a subtree

    `C-c C-x c' clone a subtree
**** Sparse trees

     `C-c /'     (`org-sparse-tree')
     `C-c / r'  or  `C-c / /'     (`org-occur')
     `M-g n'  or  `M-g M-n'     (`next-error')
     `M-g p'  or  `M-g M-p'     (`previous-error')
     `C-c C-c' highlight disappearing
**** Plain-list
     `<TAB>'     (`org-cycle')
     `M-<RET>'     (`org-insert-heading') Insert new item at current level.
     `M-S-<RET>' Insert a new item with a checkbox
     `S-up'
     `S-down'
     Jump to the previous/next item in the current list

     `M-up'
     `M-down'
     Move the item including subitems up/down

     `M-left'
     M-right'
     Decrease/increase the indentation of an item, leaving children
     alone.

     `M-S-<left>'
     `M-S-<right>'
     Decrease/increase the indentation of the item, including subitems.

     `C-c *'
     Turn a plain list item into a headline

     `C-c C-*'
     Turn the whole plain list into a subtree of the current heading.

     `C-c ^'
     Sort the plain list.
**** Drawers
     :Test:
This is a test

:END:
     `org-insert-drawer'  to <C-c C-x d>
      Add a time-stamped note to the LOGBOOK drawer `C-c C-z'
**** Org-mode footnotes

     `C-c C-x f'
     The footnote action command.
     `C-c C-c'

     [fn:1]
**** Handling links
     `C-c l     (`org-store-link')'
     `C-c C-l     (`org-insert-link')'
     `C-c C-l  (with cursor on existing link)'
     When the cursor is on an existing link, `C-c C-l' allows you to
     edit the link and description parts of the link.

     `C-c C-o (`org-open-at-point')'
     `C-c C-x C-n     (`org-next-link')'
     `C-c C-x C-p     (`org-previous-link')'
**** DONE 'TODO' functionality
     CLOSED: [2017-05-07 Sun 09:31] DEADLINE: <2017-05-07 Sun 09:40> SCHEDULED: <2017-05-07 Sun>
     `C-c C-t     (`org-todo')'
     `C-c / t     (`org-show-todo-tree')'
     `C-c a t     (`org-todo-list')'
     `S-M-<RET>     (`org-insert-todo-heading')'
     `C-c C-s'    schedulled
     `C-c C-d'    deadline
     `C-c a a'    Schedule for the current week
     `l'          log mode on

*** Tables
    `C-c |     (`org-table-create-or-convert-from-region')'
    `C-c SPC     (`org-table-blank-field')'
    `M-a     (`org-table-beginning-of-field')'
    `M-e     (`org-table-end-of-field')'

    Column and row editing
    ......................

    `M-<left>     (`org-table-move-column-left')'
    `M-<right>     (`org-table-move-column-right')'
    `M-S-<left>     (`org-table-delete-column')'
    `M-S-<right>     (`org-table-insert-column')'
    `C-c -     (`org-table-insert-hline')'
    `C-c <RET>     (`org-table-hline-and-move')'
    `C-c ^     (`org-table-sort-lines')'
*** Org-mode capture
Capture lets you quickly store notes with little interruption of your work flow. Org's method for capturing new items is heavily inspired by John Wiegley excellent remember.el package.0

***** Setting up capture
The following customization sets a default target file for notes, and                                                                                                                                              
defines a global key(1)  for capturing new material.                                                                                                                                                                                                                                                                                                                                                                               
     (setq org-default-notes-file (concat org-directory "/notes.org"))                                                                                                                                             
     (define-key global-map "\C-cc" 'org-capture) 

***** Using capture

C-c c     (org-capture)
Call the command org-capture. Note that this keybinding is global and not active by default: you need to install it. If you have templates defined see Capture templates, it will offer these templates for selection or use a new Org outline node as the default template. It will insert the template into the target file and switch to an indirect buffer narrowed to this new node. You may then insert the information you want.


C-c C-c     (org-capture-finalize)
Once you have finished entering information into the capture buffer, C-c C-c will return you to the window configuration before the capture process, so that you can resume your work without further distraction. When called with a prefix arg, finalize and then jump to the captured item.


C-c C-w     (org-capture-refile)
Finalize the capture process by refiling (see Refile and copy) the note to a different place. Please realize that this is a normal refiling command that will be executed—so the cursor position at the moment you run this command is important. If you have inserted a tree with a parent and children, first move the cursor back to the parent. Any prefix argument given to this command will be passed on to the org-refile command.


C-c C-k     (org-capture-kill)
Abort the capture process and return to the previous state.

***** DONE Use org-capture to write notes quickly		      :STUDY:

org-capture can help you take notes quickly by popping up a window or leading you through prompts. When you’re done taking the note, it will return you to whatever you were looking at before you started. In order to take advantage of this, though, you’ll need to customize org-capture.

The Org Mode manual recommends giving org-capture a global keyboard shortcut such as C-c c.

Add in init.el file code:

#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file (concat org-directory "/notes.org"))
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC

Make sure that the file exists and is automatically opened in Org Mode.

If you type C-c c org-capture will display a prompt. "t" is a simple task template. It will show you a buffer with a simple TODO entry. When you're done, type C-c C-c to automatically save it to your default notes file (notes.org). 

***** DONE Define your own org-capture-templates for greater convenience [100%]:STUDY:
- [X] description
- [X] examples of practical use
If you find yourself capturing different kinds of notes often or you want to capture in another format (table entry? list item?), invest the time in customizing org-capture-templates.

Add in init.el file code like this (for example):

#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("p" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
	 "* TODO %?\n  %i\n  %a")
	("i" "Idiom" entry (file+datetree "/home/vikky/Desktop/DVCS/org/idioms.org")
	 "* %i\n %U")
	;;
	("t" "Thought" entry (file+datetree "/home/vikky/Desktop/DVCS/org/thoughts.org")
	 "* %?%c\n%i\n %l")
	;;
	("j" "Journal" entry (file+datetree "~/org/journal.org")
	    "* %?\nEntered on %U\n  %i\n  %a")))
#+END_SRC
Then you type C-c c you can see a menu of locations where you can shoot quick notes with keys. 
Select a capture template                                                                               
=========================                                                                                                                                                                                     
[p]     Todo                                                                                            
[i]     Idiom                                                                                           
[t]     Thought                                                                                         
[j]     Journal                                                                                         
----------------------------------------                         
[C]     Customize org-capture-templates                                                                 
[q]     Abort  

For example, if you type "p" it will show you a buffer with a simple TODO entry.

#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      '(("p" "Todo" entry (file+headline "~/org/gtd.org" "Tasks")
 "* TODO %?\n  %i\n  %a")
#+END_SRC

You can fill in the rest of the details. When you’re done, type C-c C-c to automatically save it in ~/org/gtd.org or type C-c C-k to cancel. 
** OrgMode Tutorial: Source Code Markup 

Emacs's org-mode allows you embed language source code in the file, and you can intercactively 
evaluate it, edit it, or export to HTML with evaluated result embedded/updated in the exported file.

Org mode supports insertion of empty structural elements (like #+BEGIN_SRC and #+END_SRC pairs).
To insert a structural element, type a ‘<’, followed by a template selector and <TAB>. Completion takes effect
only when the above keystrokes are typed on a line by itself.

The following template selectors are currently supported.


#+END_SRC
s#+BEGIN_SRC ... #+END_SRC 
e#+BEGIN_EXAMPLE ... #+END_EXAMPLE
q#+BEGIN_QUOTE ... #+END_QUOTE 
v#+BEGIN_VERSE ... #+END_VERSE 
c#+BEGIN_CENTER ... #+END_CENTER 
l#+BEGIN_LaTeX ... #+END_LaTeX 
L#+LaTeX: 
h#+BEGIN_HTML ... #+END_HTML 
H#+HTML: 
a#+BEGIN_ASCII ... #+END_ASCII 
A#+ASCII: 
i#+INDEX: line 
I#+INCLUDE: line 
For example, on an empty line, typing "<e" and then pressing
TAB, will expand into a complete EXAMPLE template.

To evaluate code block, put cursor in the cide block, then press Ctrl+C Ctrl+C

#+BEGIN_SRC python
return 3 + 7
#+END_SRC

#+RESULTS:
: 10

      #+begin_src python :results output :session test
	# Example from Slatkin's book
	a = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
	print('First four:', a[:4])
	print('Last four: ', a[-4:])
	print('Middle two:', a[3:-3])
      #+end_src

      #+RESULTS:
      : 
      : ... >>> First four: ['a', 'b', 'c', 'd']
      : Last four:  ['e', 'f', 'g', 'h']
      : Middle two: ['d', 'e']

      #+BEGIN_SRC python :results output :session test
	import sys
	# it's the session test
	print('This is a session variable a : ', a)
      #+END_SRC

      #+RESULTS:
      : 
      : ... This is a session variable a :  ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']


  /All necessary subtleties you could find in Emacs innate help system
  (C-h i) --> OrgMode --> Working with source code/

*** Bookmarks

‘C-x r m <RET>’                                                                                          
     Set the bookmark for the visited file, at point.                                                    
                                                                                                         
‘C-x r m BOOKMARK <RET>’                                                                                 
     Set the bookmark named BOOKMARK at point (‘bookmark-set’).                                          
                                                                                                         
‘C-x r b BOOKMARK <RET>’                                                                                 
     Jump to the bookmark named BOOKMARK (‘bookmark-jump’).                                              
                                                                                                         
‘C-x r l’                                                                                                
     List all bookmarks (‘list-bookmarks’).                                                              
                                                                                                         
‘M-x bookmark-save’                                                                                      
     Save all the current bookmark values in the default bookmark file.


‘M-x bookmark-load <RET> FILENAME <RET>’                                                                 
     Load a file named FILENAME that contains a list of bookmark values.                                 
     You can use this command, as well as ‘bookmark-write’, to work with                                 
     other files of bookmark values in addition to your default bookmark                                 
     file.                                                                                               
                                                                                                          
‘M-x bookmark-write <RET> FILENAME <RET>’                                                                
     Save all the current bookmark values in the file FILENAME.                                          
                                                                                                          
‘M-x bookmark-delete <RET> BOOKMARK <RET>’                                                               
     Delete the bookmark named BOOKMARK.                                                                 
                                                                                                          
‘M-x bookmark-insert-location <RET> BOOKMARK <RET>’                                                      
     Insert in the buffer the name of the file that bookmark BOOKMARK                                    
     points to.                                                                                          
                                                                                                          
‘M-x bookmark-insert <RET> BOOKMARK <RET>’                                                               
     Insert in the buffer the _contents_ of the file that bookmark                                       
     BOOKMARK points to.     

*****  Tables

Org makes it easy to format tables in plain ASCII. Any line with ‘|’ as the first non-whitespace character is considered part of a table. ‘|’ is also the column separator1. A table might look like this:

     | Name  | Phone | Age |
     |-------+-------+-----|
     | Peter |  1234 |  17 |
     | Anna  |  4321 |  25 |
A table is re-aligned automatically each time you press <TAB> or <RET> or C-c C-c inside the table. <TAB> also moves to the next field (<RET> to the next row) and creates new table rows at the end of the table or before horizontal lines. The indentation of the table is set by the first line. Any line starting with ‘|-’ is considered as a horizontal separator line and will be expanded on the next re-align to span the whole table width. So, to create the above table, you would only type

     |Name|Phone|Age|
     |-
and then press <TAB> to align the table and start filling in fields. Even faster would be to type |Name|Phone|Age followed by C-c <RET>.


****** Scrapy Tutorial
Scrapy is an application framework for crawling web sites and extracting structured data which can be used
for a wide range of useful applications, like data mining, information processing or historical archival.

In order to show what Scrapy brings to the table, we'll walk through an example of a Scrapy Spider
using the simplest way to run spider.

import scrapy


class StackOverflowSpider(scrapy.Spider):
    name = 'stackoverflow'
    start_urls = ['http://stackoverflow.com/questions?sort=votes']

    def parse(self, response):
        for href in response.css('.question-summary h3 a::attr(href)'):
            full_url = response.urljoin(href.extract())
            yield scrapy.Request(full_url, callback=self.parse_question)

    def parse_question(self, response):
        yield {
            'title': response.css('h1 a::text').extract()[0],
            'votes': response.css('.question .vote-count-post::text').extract()[0],
            'body': response.css('.question .post-text').extract()[0],
            'tags': response.css('.question .post-tag::text').extract(),
            'link': response.url,
        } 

Put this in a file, name it to stackoverflow_spider.py and run the spider using the runspider comand:


scrapy runspider stackoverflow_spider.py -o top-stackoverflow-questions.json

Result:

[{
    "body": "... LONG HTML HERE ...",
    "link": "http://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-an-unsorted-array",
    "tags": ["java", "c++", "performance", "optimization"],
    "title": "Why is processing a sorted array faster than an unsorted array?",
    "votes": "9924"
},
{
    "body": "... LONG HTML HERE ...",
    "link": "http://stackoverflow.com/questions/1260748/how-do-i-remove-a-git-submodule",
    "tags": ["git", "git-submodules"],
    "title": "How do I remove a Git submodule?",
    "votes": "1764"
},
...]

******* Creating a project

Defor you start scraping, you will have to set up a new Scrappy project. Enter a directory where you'd 
like to store your code and run:

scrapy startproject tutorial

This will create a 'tutorial' directory with the following contents:

tutorial/
    scrapy.cfg            # deploy configuration file

    tutorial/             # project's Python module, you'll import your code from here
        __init__.py

        items.py          # project items file

        pipelines.py      # project pipelines file

        settings.py       # project settings file

        spiders/          # a directory where you'll later put your spiders
            __init__.py
            ...

******* Defining our Item

Items are containers that will be loaded with the scraped data; they work like simple Python dict. While
you can use plain Python dicts with Scrapy, Items provide additional protection against populating undeclared
fields, preventing typos. They can also be used with Item Loaders, a mechanism with helpers to conveniently
populate Items.

They are declared by creating a scrapy.Item class and defining its attributes as scrapy.Field objects,
much like in an ORM.

We begin by modeling the item that we use to hold the site's data obtained from dmoz.org. As we want to
capture the name, url abd description of the sites, we define fields for each of these three attributes.
To do that, we edit items.py, found in the tutorial directory. Our Item class looks like this:


import scrapy

class DmozItem(scrapy.Item):
    title = scrapy.Field()
    link = scrapy.Field()
    desc = scrapy.Field()

******* Our first Spider

Spiders are classes that you define and Scrapy uses to scrape information from a domain (or group of domain).

They define an initial list of URLs to download, how to follow links, and how to parse the contents of
pages to extract items.

To create a Spider, you must subclass scrapy.Spider and define some attributes:

name: identifies the Spider. It must be unique, that is, you can't sat the same name for different Spiders.

start_urls: a list of URLs where the Spider will begin to crawl from. The first pages downloaded will be those listed here.
The subsequent URLs will be generated successively from data contained in the start URLs.

parse(): a method of the spide, whoch will be called with the downloaded Response object of each start
URL. The respinse is passed to the method as the first and only argument.

This method is responsible for parsing the response data and extracting scrapped data (as scrapped items)
 and more URLS to follow.

The parse() method is in charge of processing the response and returning scrapped data (as Item Objects)
and more URLs to follow (as Request objects).

This is the code for our first Spider; save it in a file named dmoz_spider.py under the tutorial/spiders directory:

import scrapy

class DmozSpider(scrapy.Spider):
    name = "dmoz"
    allowed_domains = ["dmoz.org"]
    start_urls = [
        "http://www.dmoz.org/Computers/Programming/Languages/Python/Books/",
        "http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/"
    ]

    def parse(self, response):
        filename = response.url.split("/")[-2] + '.html'
        with open(filename, 'wb') as f:
            f.write(response.body)

******* Crawling

To put our spider to work, go to the project's top level directory and run:

scrapy crawl dmoz

Scrapy creates scrapy.Request objects for each URL in the start_urls attribute of the Spider, and assign
them th parse method of the sspider as their callback function.

******* Extracting Items

There are several ways to extract data from web pages. Scrapy uses a mechanism based on XPath or CSS expressions 
called Scrapy Selectors. 

For working with CSS and XPath expression, Scrapy provides Selector class and convenient shortcuts to avoid
anstantiating selectors yourself every time you need to select something from response.

Selectors have four basic methods:

xpath(): return a list of selectors, each of which represents the nodes selected by the xpath expression
given as argument.

css(): return a list of selectors, each of which represents the nodes selected by the CSS expression
given as argument.

extract(): return a unicode string with the selected data.

re(): returns a unicode strings extracted by applying the regular expression given as argument.

******* Trying Selectors in the Shell

To start a shell, you must go to the project's top level directory and run:

scrapy shell "http://www.dmoz.org/Computers/Programming/Languages/Python/Books/"


So let's try it:

n [1]: response.xpath('//title')
Out[1]: [<Selector xpath='//title' data=u'<title>Open Directory - Computers: Progr'>]

In [2]: response.xpath('//title').extract()
Out[2]: [u'<title>Open Directory - Computers: Programming: Languages: Python: Books</title>']

In [3]: response.xpath('//title/text()')
Out[3]: [<Selector xpath='//title/text()' data=u'Open Directory - Computers: Programming:'>]

In [4]: response.xpath('//title/text()').extract()
Out[4]: [u'Open Directory - Computers: Programming: Languages: Python: Books']

In [5]: response.xpath('//title/text()').re('(\w+):')
Out[5]: [u'Computers', u'Programming', u'Languages', u'Python'] 


******* Extracting the data

You could type response.body in the console, and inspect the source code to figure out the XPath you need to use.
To make it easer, you can use Firefox Developer Tools and Firebug.

After inspecting the page source, you'll find that the web site's information is inside a <ul> element,
in fact the second <ul> element.

So we can select each <li> element belonging to the site's list with this code:

response.xpath('//ul/li')
And from them, the site’s descriptions:

response.xpath('//ul/li/text()').extract()
The site’s titles:

response.xpath('//ul/li/a/text()').extract()
And the site’s links:

response.xpath('//ul/li/a/@href').extract()

As we’ve said before, each .xpath() call returns a list of selectors, so we can concatenate further .xpath() calls to dig deeper into a node. We are going to use that property here, so:

for sel in response.xpath('//ul/li'):
    title = sel.xpath('a/text()').extract()
    link = sel.xpath('a/@href').extract()
    desc = sel.xpath('text()').extract()
    print title, link, desc  

Let’s add this code to our spider:

import scrapy

class DmozSpider(scrapy.Spider):
    name = "dmoz"
    allowed_domains = ["dmoz.org"]
    start_urls = [
        "http://www.dmoz.org/Computers/Programming/Languages/Python/Books/",
        "http://www.dmoz.org/Computers/Programming/Languages/Python/Resources/"
    ]

    def parse(self, response):
        for sel in response.xpath('//ul/li'):
            title = sel.xpath('a/text()').extract()
            link = sel.xpath('a/@href').extract()
            desc = sel.xpath('text()').extract()
            print title, link, desc


Now try crawling dmoz.org again and you’ll see sites being printed in your output. Run:

scrapy crawl dmoz

******* Following links

Now that you know how to extract data from a page, why not extact the
links for the pages you are interested, follow them and then
extract the data eou want for all of them?

import scrapy

from tutorial.items import DmozItem

class DmozSpider(scrapy.Spider):
    name = "dmoz"
    allowed_domains = ["dmoz.org"]
    start_urls = [
        "http://www.dmoz.org/Computers/Programming/Languages/Python/",
    ]

    def parse(self, response):
        for href in response.css("ul.directory.dir-col > li > a::attr('href')"):
            url = response.urljoin(href.extract())
            yield scrapy.Request(url, callback=self.parse_dir_contents)

    def parse_dir_contents(self, response):
        for sel in response.xpath('//ul/li'):
            item = DmozItem()
            item['title'] = sel.xpath('a/text()').extract()
            item['link'] = sel.xpath('a/@href').extract()
            item['desc'] = sel.xpath('text()').extract()
            yield item

Now the parse() method only extract the interesting links from the page,
builds a full absolute URL using the response.urljoin method (since the links
can be relative) and yields new requests to be sent later, registering as callback the method parse_dir_contents()
that will ultimately scrape the data we want.

******* Storing the scraped data

The simplest way to store the scraped data is by using Feed export, with the following command:

scrapy crawl dmoz -o items.json

That will generate an items.json file containing all scrapped items, 
serialized in JSON.

******* Command line tool

Scrapy is controlled through th scrapy command-line tool. The Scrapy tool provides several commands, for
multiple purposes, and each one accepts a different set of arguments and options.

******* Configuration settings

Scrapy will look for configuration parameters in ini-style scrapy.cfg files in standart locations:

1. /etc/scrapy.cfg or c:\scrapy\scrapy.cfg (system-wide)
2. ~/.config/scrapy.cfg ($XDG_CONFIG_HOME) and ~/scrapy.cfg ( $HOME ) for global (user-wide) settings, and
3. scrapy.cfg inside a scrapy project's root

Scrapy also understands, and can be configured through, number of environment variables. Currently these are:

SCRAPY_SETTINGS_MODULE
SCRAPY_PROJECT 

******* Default structure of Scrapy projects

All Scrapy projects have the same file structure by default, similar to this:

scrapy.cfg
myproject/
    __init__.py
    items.py
    pipelines.py
    settings.py
    spiders/
        __init__.py
        spider1.py
        spider2.py
        ...

The directory where the scrapy.cfg file resides is know as the project root directory. That file contains
the name of the python module that defines the project setting:

[setting]
default = myproject.setting

******* Available tool commands

We can always get more info about each command by running:

scrapy <command> -h

And we can see all available commands with:

scrapy -h

There are two kinds of commands, those that only work from inside a Scrapy project (Project-specific commands)
and those that also work without an active Scrapy project (Global commands), though they may behave slightly
different when running from ind=side a project.

Global commands:

startproject
setting
runspider
shell
fetch
view
version


Project-only commands:

crawl
check
list
edit
parse
genspider
bench

******* Spiders

Spiders are classes which define how a certain site(or group of sites) will be scraped, including how to 
perform the crawl(i.e. follow links) and how to extract structured data from their pages (i.e. scraping items).

For spiders, the scraping cycle goes throgh something like this:

1. You start by generating the initial Request  to crawl the first URLs, and specify a callback function
with the response downloaded from those requests.
The first requests to perform are obtained by calling the start_request() method which(by default) generates
Request for the URLs specified in the start_url and the parse method as callback function for the Requests.

2. In the callback function, you parse the response (web page) and return either dict with extracted data, Item objects,
Request objects, or an itereble of these objects. 

3. In callback functions, you parse the page contents, typically using Selectors (but you can also use BeautifulSoup, lxml or whatever mechanism
you prefer) and generate items with the parsed data.

4 Finally, the items returned from the spider will be typically persisted to a database(in some Pipeline) or written to a file
using Feed export.

******* scrapy.Spider

class scrapy.spiders.Spider

This is the siplest spider, and the one from which every other spider must inheit. It doesn't provide
any special functionality. It just provides a default start_request implementation which sends request
from the start_urls spider attribute and calls the spider's method parse for each of the resulting respondses.


NAME

A string which defines the name for this spider. The spider name is how the spider is located(and instantiated)
by Scrapy, so it must be unique. However, nothing prevents you from instantiating more than one instance
of the same spider. This is most important spider attribute and it's required.

If the spider scrapes a single domain, a common practice is to name the spider after the domain. So, for
example, a spider that crawl mywebsite.com would often be called mywebsite.

ALLOWED_DOMAINS

An optional list of string containing domains that this spider is allowed to crawl. Request for URLs not
belonging to the domain names specified in this list be followed if OffsiteMiddleware is enabled.


START_URLS


A list of URLs where the spider will begin to crawl from, when no particular URLs are specified.
So the first pages downloaded will be those lested here. The subsequent URLs will be generated successively
from data contained in the start URLs.


CRAWLER

This attribute is set by the from_crawler() class method after initializating the class, and links to the 
Crawler object to which this spider instance is bound.
Crawlers encapsulate a lot of components in the project for their single entry access.


SETTINGS

Configuration for running this spider.


LOGGER

Python logger created with the Spider's name.


FROM_CRAWLER(crawler, *args, **kwargs)

This is the class method used by Scrapy to create your spiders.

You probably won't need to override this directly because the default
implementation acts as proxy to the __init__() method, calling it with
the given arguments args and named arguments kwards.

Nonetheless, this method sets the crawler and settings attributes in
the new instance so they can be accessed later inside the spider's code.

Parameters:
crawler(Crawler instance) - crawler to which the spider will be bound

args(list) - arguments passed to the __init__() method

kwards(dict) - keyword arguments passed the __init__() method


START_REQUESTS()

This method must return an iterable with the first Request to crawl for 
this spider.

This is the method called by Scrapy when the spider is opened for scraping
when no particular URLs are specified. If particular URLs are specified, the
make_request_from_url() is used instead to create the Requests. This method
is also called only once from Scrapy, so it's safe to implement it as a
generator.

The default implementation uses make_request_from_url() to generate 
Requests for each url in start_urls.


MAKE_REQUESTS_FROM_URL(url)

A method that recieves a URL and return a Request object (or a list of Request
objects) to scrape. This method is used to construct the initial request
in the start_request() method, and is typically used to convert urls
to requests.

Unless overriden, this method returns Requests with the parse() method
as their callback function, and with dont_filter parameter enabled.

PARSE(response)

This is the default callback used by Scrapy to process downloaded responses,
when their requests don't specify a callback.

The parse method is in charge of processing the response and returning
scraped data and/or more URLs to follow. O
ther Requests callbacks have the same requirements as the Spider class.

This method, as well as any other Request callback, must return an iterable
of Request and/or dicts or Item objects.

Parameters: response(Responsse) - the response to parse

LOG(message[,level, component])

Wrapper that sends a log message through the Spider's logger, kept for
backwards compatibility. 


CLOSED(reason)

Called when the spider closes. This method provides a shortcut to 
signals.content() for the spider_closed signal.

import scrapy


class MySpider(scrapy.Spider):
    name = 'example.com'
    allowed_domains = ['example.com']
    start_urls = [
        'http://www.example.com/1.html',
        'http://www.example.com/2.html',
        'http://www.example.com/3.html',
    ]

    def parse(self, response):
        self.logger.info('A response from %s just arrived!', response.url)



******* Spider arguments

Spider can receive arguments that modify their behavior. Some common
uses spider arguments are to define the start URLs or to restrict the crawl
to certain section of the site, but they can be used to configure any
functionality of the spider.

Spider arguments are passed through the crawl command using the -a option.

scrapy crawl myspider -a category=electronics

Spiders recieve arguments in their constructors:

import scrapy

class MySpider(scrapy.Spider):
    name = 'myspider'

    def __init__(self, category=None, *args, **kwargs):
        super(MySpider, self).__init__(*args, **kwargs)
        self.start_urls = ['http://www.example.com/categories/%s' % category]
        # ...

Spider arguments can also be passed through the Scrapyd schedule.json API. 

******* Generic Spiders

Scrapy comes with some useful generic spiders that you can use to subclass
your spiders from. Their aim is to provide convenient functionality for
a few common scraping cases, like following all links on a site based on
certain rules, crawling from Sitemaps, or parsing an XML/CSV feed.

import scrapy

class TestItem(scrapy.Item):
    id = scrapy.Field()
    name = scrapy.Field()
    description = scrapy.Field()


******* CrawlSpider

class scrapy.spiders.CrawlSpider

This iss the most commonly used spider for crawling regular websites,
as it provides a convenient mechanism for following links by defining
a set of rules. It may not be the best suited for your particular web
sites project, but it's generic enough for several cases, so you can 
start from it and override it as needed for more custom functionality,
or just implement your own spider.

Apart from the attributes inherited from Spider (that you must specify),
this class supports a new attribute:

rules

Which is a list of one (or more) Rule objects. Each rule defines a 
certain behavior for crawling the site. Rules objects are described bellow.
If multiplerules match the same link, the first one will be used,
according to the order they're defined in this attribute.

This spider also exposes an overrideable method:

parse_start_url(response)

This method is called for the start_urls responses. It allow to parse the
initial responses and must return either an Item object, a Request
object, or an iterable containing any of them.


******** Crawling rules

class scrapy.spiders.Rule(link_extractor, callback=None, cb_kwargs=None,
follow=None, process_links=None, process_request=None)

link_extractor is a LinkExtractor object which defines how links
will be extracted from each crawled page.

callback is callable or a string (in which case a method from the spider
object with that name will be used) to be called for each link extracted
with the specified link_extractor. This callback receives a response
as its first argument and must return a list containing Item and/or
Request objects (or any subclass of them).

Warning

When writing crawl spider rules, avoid using parse as callback, since the
CrawlSpider uses the parsse method itself to implement its logic. So if
you override the parse method, the crawl spider will no longer work.is a callable or a string (in which case a method from the spider object with that name will be used) to be called for each link extracted with the specified link_extractor. This callback receives a response as its first argument and must return a list containing Item and/or Request objects (or any subclass of them).


CB_KWARDS  is a dict containing the keyword arguments to be passed to the
callback function.


FOLLOW is a boolean which specifies if links should be followed from 
each response extracted with this rule. If callback is None follow default
to True, otherwise it default to False.


PROCESS_LINKS is a callable, or a string (in which case a method from the spider
object with that name will be used) which will be called for each list of links extracted
from each response using the specified link_extractor. This is mainly used for filtering purposes.


PROCESS_REQUEST is a callable, or a string (in which case a method from the spider object
with that name will be used) which will be called with every request extracted by this rule,
and must return a request or None (to filter out the request).


******** XMLFeedSpider

class scrapy.spiders.XMLFeedSpider

XMLFeedSpider is designed for parsing XML feeds by itereting throgh them by a certain node name. The iterator can be
chosen from: iternodes, xml, and html. It's recomended to use the iternodes iterator for perfomance reasons,
since the xml and html iterators generate the whole DOM at once in order to parse it. However, using html as
the iterator may be useful when parsing XML with bad markup.

To set the iterator and the tag name, you must define the following class attributes:

ITERATOR

A string which defines the iterator to use. It can be either:

'ITERNODES' - a fast iterator based on regular expression

'HTML' - an iterator which uses Selector. Keep in mind this uses DOM parsing and must load all DOM in memory
which could be a problem for big feeds.

'XML' - an iterator which uses Selector. Keep in mind this uses DOM parsing and must load all DOM in memory
which could be a problem for big feeds.

ITERTAG

A string with the name of the node (or element) to iterate in. Example:

iterag = 'product'

NAMESPACES

A list of (prefix, uri) tuples which define the namespaces available in that document that willl be processed
with this spider.The prefix and uri will be used to automatically register namespaces using the 
register_namespace() method.

You can then specify nodes with namespaces in the itertag attribute.

class YourSpider(XMLFeedSpider):

    namespaces = [('n', 'http://www.sitemaps.org/schemas/sitemap/0.9')]
    itertag = 'n:url'
    # ...


ADAPT_RESPONSE(response)

A method that receives the response as soon as it arrives from the spider middleware, before the spider
startsparsing it. It can be used to modify the response body before parsing it. This method recieve
a response and also returns a response (it could be the same or another one).


PARSE_NODE(response, selector)

This method is called for the nodes matching the provided tag name (itertag). Receives the response and an
Selector for each node. Overriding this method is mandatory. Otherwise, you spider won't work. This method 
must return either a Item object, a Request object, or an iterable containing any of them.


PROCESS_RESULTS(response, results)
This method is called for each result (item or request) returned by the spider, and it’s intended to
perform any last time processing required before returning the results to the framework core, for example setting
the item IDs. It receives a list of results and the response which originated those results. It must return a list
of results (Items or Requests).

XMLFeedSpider example
These spiders are pretty easy to use, let’s have a look at one example:

from scrapy.spiders import XMLFeedSpider
from myproject.items import TestItem

class MySpider(XMLFeedSpider):
    name = 'example.com'
    allowed_domains = ['example.com']
    start_urls = ['http://www.example.com/feed.xml']
    iterator = 'iternodes'  # This is actually unnecessary, since it's the default value
    itertag = 'item'

    def parse_node(self, response, node):
        self.logger.info('Hi, this is a <%s> node!: %s', self.itertag, ''.join(node.extract()))

        item = TestItem()
        item['id'] = node.xpath('@id').extract()
        item['name'] = node.xpath('name').extract()

        item['description'] = node.xpath('description').extract()
        return item


******** CSVFeedSpider
class scrapy.spiders.CSVFeedSpider

This spider is very similar to the XLFeedSpider, except that it iterates over
rows, instead of nodes. The method that gets called in each iteration is
parse_row().


DELIMITER

A string with the separator character for each field in the CSV file Default
to ',' (comma).


QUOTECHAR

A string with the enclosure character for each field in the CSV file Default
to '"'(quotation mark).


HEADERS

A list of the rows contained in the file SCV feed which will be used to extract
fields from it.


PARSE_ROW(response, row)

Recieves a response and a dict(representing each row) with a key for each
provided (or detected) geader of the CSV file. This spider also gives the opportunity to 
override adapt_response and process_results methods for pre- and post-processing purposes.


CSVFeedSpider example:


from scrapy.spiders import CSVFeedSpider
from myproject.items import TestItem

class MySpider(CSVFeedSpider):
    name = 'example.com'
    allowed_domains = ['example.com']
    start_urls = ['http://www.example.com/feed.csv']
    delimiter = ';'
    quotechar = "'"
    headers = ['id', 'name', 'description']

    def parse_row(self, response, row):
        self.logger.info('Hi, this is a row!: %r', row)

        item = TestItem()
        item['id'] = row['id']
        item['name'] = row['name']
        item['description'] = row['description']
        return item


******** SitemapSpider

Sitemap are an easy way to inform search engines about pages on their sites that are aviable for crawling. In its simplest form, a Sitemap is an XML file that lists URLs for a site along with addirional metadata about each URL (when it was last updated, how often it usually changes, and howimportant it is, relative to other URLs in the site) so that search engines can more intelligently crawl the site.

Web crawlers usually discover pages from links within the site and from other sites. Sitemaps supplement this data to allow crawlers that support Sitemaps to pick up all URLs in the Sitemap and learn about those URLs using the associated metadata. Using the Sitemap protocol does not guarantee that web pages ae included in the search engines, v=but provides hints for web crawlers to do a bette job of crawling your site.

class scrapy.spiders.SitemapSpider

A list of tuples (regex, callback) where:

regex is a regular expression to match urls extracted from sitemaps.
regex can be either a str or a compiled regex object.

callback is the callback to use for processing the urls that match the
regular expression. callback can be a string (indicating the name of a spider method) or
a callable.

For example:

sitemap_rules = [('/product/', 'parse_product')]

Rules are applied in order, and only the first one that matches will be used.

If you omit this attribute, all urls found in sitemaps will be processed with 
the parse callback.


sitemap_follow

A list of regex of sitemap that should be followed. This is only for sites that
use Sitemap index files that point to other sitemap files.

By default, all sitemaps are followed.

sitemap_alternate_links

Specifies if alternate links for one url should be followed. These are links for 
the same website in another language passed within the same url block.

For example:

<url>
    <loc>http://example.com/</loc>
    <xhtml:link rel="alternate" hreflang="de" href="http://example.com/de"/>
</url>

With sitemap_alternate_links set, this would retrieve both URLs. With sitemap_alternate_links disabled, only http://example.com/
would be retrieved.

Default is sitemap_alternate_links disabled.


SitemapSpider examples
Simplest example: process all urls discovered through sitemaps using the parse callback:

from scrapy.spiders import SitemapSpider

class MySpider(SitemapSpider):
    sitemap_urls = ['http://www.example.com/sitemap.xml']

    def parse(self, response):
        pass # ... scrape item here ...
Process some urls with certain callback and other urls with a different callback:

from scrapy.spiders import SitemapSpider

class MySpider(SitemapSpider):
    sitemap_urls = ['http://www.example.com/sitemap.xml']
    sitemap_rules = [
        ('/product/', 'parse_product'),
        ('/category/', 'parse_category'),
    ]

    def parse_product(self, response):
        pass # ... scrape product ...

    def parse_category(self, response):
        pass # ... scrape category ...
Follow sitemaps defined in the robots.txt file and only follow sitemaps whose url contains /sitemap_shop:

from scrapy.spiders import SitemapSpider

class MySpider(SitemapSpider):
    sitemap_urls = ['http://www.example.com/robots.txt']
    sitemap_rules = [
        ('/shop/', 'parse_shop'),
    ]
    sitemap_follow = ['/sitemap_shops']

    def parse_shop(self, response):
        pass # ... scrape shop here ...
Combine SitemapSpider with other sources of urls:

from scrapy.spiders import SitemapSpider

class MySpider(SitemapSpider):
    sitemap_urls = ['http://www.example.com/robots.txt']
    sitemap_rules = [
        ('/shop/', 'parse_shop'),
    ]

    other_urls = ['http://www.example.com/about']

    def start_requests(self):
        requests = list(super(MySpider, self).start_requests())
        requests += [scrapy.Request(x, self.parse_other) for x in self.other_urls]
        return requests

    def parse_shop(self, response):
        pass # ... scrape shop here ...

    def parse_other(self, response):
        pass # ... scrape other here ...

******* Selectors

When your're scraping web pages, the most common task you need to perform is to extract data from the HTML source.
There are several libraries availsble to achieve this:

BeautifulSoup is a very popular web scraping library among Python programmers which constructs a Python
object based on the structure of the HTML code also deals with bad markup reasonably well, but it has 
one drawback: it's slow.

lxml is an XML parsing library (which also parses HTML) with a pythonic API based on ElementTree.(lxml is not
part of the Python standart library.)


Scrapy comes with its own mechanism for extracting data. They're called selectors because they "select" certain parts of the HTML
document specified either by XPath or CSS expressions.

XPath is the language for selecting nodes in XML documents, which can also be used with HTML.

CSS is a language for applying styles to HTML documents. It defines selectors to associate those styles
with specific HTML elements.

Scrapy selectors are built over the lxml library, which means they're very similar in speed and parsing
accuracy.

******** Constructing selectors

Scrapy selectors are instaces of Selector class constructed by passing text or TextResponse object. It automatically
chooses the best parsing reles (XML vs HTML) based on input type:

>>> from scrapy.selector import Selector
>>> from scrapy.http import HtmlRespose

Constructing from text:

>>> body = '<html><body><span>good</span></body></html>'
>>> Selector(text=body).xpath('//span/text()').extract()
[u'good']


Constructing from response:

>>> response = HTMLResponse(url = 'http://example.com', body=body)
>>> Selector(response=response).xpath('//span/text()').extract()
[u'good']

For convenience, response objects exposse a selector on.selector attribute, it's totally OK to use this shortcut when
possible:

>>> response.selector.xpath('//span/text()').extract()
[u'good']

To explain how yo use the selectors we'll use the Scrapy shell and an example page located in the Scrapy 
documentation server:

http://doc.scrapy.org/en/latest/_static/selectors-sample1.html

Its HTML code:

<html>
 <head>
  <base href='http://example.com/' />
  <title>Example website</title>
 </head>
 <body>
  <div id='images'>
   <a href='image1.html'>Name: My image 1 <br /><img src='image1_thumb.jpg' /></a>
   <a href='image2.html'>Name: My image 2 <br /><img src='image2_thumb.jpg' /></a>
   <a href='image3.html'>Name: My image 3 <br /><img src='image3_thumb.jpg' /></a>
   <a href='image4.html'>Name: My image 4 <br /><img src='image4_thumb.jpg' /></a>
   <a href='image5.html'>Name: My image 5 <br /><img src='image5_thumb.jpg' /></a>
  </div>
 </body>
</html>

Then, after the shell loads, you'll have the response available as response shell variable, and its attached selector
in response.selector attribute.

Since we're dealing with HTML, the selector will automatically use an HTML parser.
So, by looking at the HTML code of that page, let's construct an XPath for selecting the text inside the
title tag:

oIn [1]: response.selector.xpath('//title/text()')
Out[1]: [<Selector xpath='//title/text()' data=u'Example website'>] 

Quering responses using XPath and CSS is so common that responses include two convencience shortcuts: 
response.xpath() and response.css()

In [1]: response.xpath('//title/text()')
Out[1]: [<Selector xpath='//title/text()' data=u'Example website'>]

In [2]: response.css('title::text')
Out[2]: [<Selector xpath=u'descendant-or-self::title/text()' data=u'Example website'>]

As we can see, .xpath() and .css() method return a SelectorList instance, which is a list of new selectors.
This API can be used for quickly selecting nested data:

In [3]: response.css('img').xpath('@src').extract()
Out[3]: 
[u'image1_thumb.jpg',
 u'image2_thumb.jpg',
 u'image3_thumb.jpg',
 u'image4_thumb.jpg',
 u'image5_thumb.jpg']

To actually extract the textual data, you must call the selector .extract() method, as follows:

In [4]: response.xpath('//title/text()').extract()
Out[4]: [u'Example website']

If you want to extract only first matched element, you can call the selector .extract_first()

In [5]: response.xpath('//div[@id="images"]/a/text()').extract_first()
Out[5]: u'Name: My image 1 '

It returns None if no element was found:

In [6]: response.xpath('//div[@id="not-exists"]/text()').extract_first(default='not-found')
Out[6]: 'not-found'

Notice that CSS selectors can select text or attribute nodes using CSS3 pseudo-elements:

In [7]: response.css('title::text').extract()
Out[7]: [u'Example website']

Now we're going to get the base URL and some image links:

In [8]: response.xpath('//base/@href').extract()
Out[8]: [u'http://example.com/']

Now we're going to get the base URL and some image links:

In [2]: response.css('base::attr(href)').extract()
Out[2]: [u'http://example.com/']

In [4]: response.xpath('//a[contains(@href, "image")]/@href').extract()
Out[4]: 
[u'image1.html',
 u'image2.html',
 u'image3.html',
 u'image4.html',
 u'image5.html']

In [5]: response.css('a[href*=image]::attr(href)').extract()
Out[5]: 
[u'image1.html',
 u'image2.html',
 u'image3.html',
 u'image4.html',
 u'image5.html']

In [6]: response.xpath('//a[contains(@href, "image")]/img/@src').extract()
Out[6]: 
[u'image1_thumb.jpg',
 u'image2_thumb.jpg',
 u'image3_thumb.jpg',
 u'image4_thumb.jpg',
 u'image5_thumb.jpg']

In [7]: response.css('a[href*=image] img::attr(src)').extract()
Out[7]: 
[u'image1_thumb.jpg',
 u'image2_thumb.jpg',
 u'image3_thumb.jpg',
 u'image4_thumb.jpg',
 u'image5_thumb.jpg']

******** Nesting selectors

The selection methods (.xpath() or .css()) return a list of selectors of the same type, so you can call 
the selection methods for those selectors too.

In [11]: links = response.xpath('//a[contains(@href, "image")]')

In [12]: links.extract()
Out[12]: 
[u'<a href="image1.html">Name: My image 1 <br><img src="image1_thumb.jpg"></a>',
 u'<a href="image2.html">Name: My image 2 <br><img src="image2_thumb.jpg"></a>',
 u'<a href="image3.html">Name: My image 3 <br><img src="image3_thumb.jpg"></a>',
 u'<a href="image4.html">Name: My image 4 <br><img src="image4_thumb.jpg"></a>',
 u'<a href="image5.html">Name: My image 5 <br><img src="image5_thumb.jpg"></a>']

In [13]: for index, link in enumerate(links):
   ....: args = (index, link.xpath('@href').extract(), link.xpath('img/@src').extract())
   ....: print 'Link number %d points to url %s and image %s' %args
   ....: 
Link number 0 points to url [u'image1.html'] and image [u'image1_thumb.jpg']
Link number 1 points to url [u'image2.html'] and image [u'image2_thumb.jpg']
Link number 2 points to url [u'image3.html'] and image [u'image3_thumb.jpg']
Link number 3 points to url [u'image4.html'] and image [u'image4_thumb.jpg']
Link number 4 points to url [u'image5.html'] and image [u'image5_thumb.jpg']

******** Using selectors with regular expressions

Selector also has a .rel() method for extracting data using regular expressions. Howewer, unlike using
.xpath() or .css() methods, .re() returns a list of unicode strings. So you can't construct nested .re() calls.

In [1]: response.xpath('//a[contains(@href, "image")]/text()').re_first(r'Name:\s*(.*)')
Out[1]: u'My image 1 '

******** Working with relative XPAth

Keep in mind that you are nesting selectors and use an XPath that starts with / , that XPath will be absolute
to the document and not relative to the Selector you're calling it from.

For example, suppose you want to extract all <p> elements inside <div> elements. First, you would get all
<div> elements:

At first, you may be tempted to use the following approach, which is wrong, as it actually extract all <p> elements
from the document, not only those inside <div> elements:

In [2]: divs = response.xpath('//div')

In [3]: for p in divs.xpath('//p'):  # this is wrong - gets all <p> from the whole document
   ...: print p.extract()
   ...: 
This is proper way to do it (note the dot prefixing the .//p XPath):

In [5]: for p in divs.xpath('.//p'): # extract all <p> inside 
   ...:     print p.extract()

Another common case would be to extract all direct <p> children:

In [6]: for p in divs.xpath('p'):
   ...: print p.extract()

******** Regular expressions

The test() function, for example, can prove quite useful when XPath's starts-with() or contains() are not
sufficient.

Example selecting links in list item with a "class" atttribute ending with a digit:

In [1]: from scrapy import Selector

In [2]: doc = """
   ...: <div>
   ...:    <ul>
   ...:       <li class="item-0"><a href="link1.html">first item</a></li> 
   ...:       <li class="item-1"><a href="link2.html">second item</a></li> 
   ...:       <li class="item-inactive"><a href="link3.html">third item</a></li> 
   ...:       <li class="item-1"><a href="link4.html">fouth item</a></li> 
   ...:       <li class="item-0"><a href="link5.html">fifth item</a></li> 
   ...:    </ul>
   ...: <div>
   ...: """

In [3]: sel = Selector(text=doc, type="html")

In [4]: sel.xpath('//li//@href').extract()
Out[4]: [u'link1.html', u'link2.html', u'link3.html', u'link4.html', u'link5.html']

In [5]: sel.xpath('//li[re:test(@class, "item-\d$")]//@href').extract()
Out[5]: [u'link1.html', u'link2.html', u'link4.html', u'link5.html']

******** Set operations

These can be handy for excluding part of a document tree before extracting
text elements for example.

Example extracting microdata (smple content taken from http://schema.org/Product)
with groups of itemscopes and corresponding itemprops:

>>> sel = Selector(text=doc, type="html")
>>> for scope in sel.xpath('//div[@itemscope]'):
...     print "current scope:", scope.xpath('@itemtype').extract()
...     props = scope.xpath('''
...                 set:difference(./descendant::*/@itemprop,
...                                .//*[@itemscope]/*/@itemprop)''')
...     print "    properties:", props.extract()
...     print

******** Using text nodes in a condition

When you need to use the text content as argument to an XPath string function,
avoid using .//text() and use just . instead.

In [2]: from scrapy import Selector

In [3]: sel = Selector(text='<a href="#">Click here to go to the <strong>Next Page</strong></a>')

In [4]: sel.xpath('//a//text()').extract()
Out[4]: [u'Click here to go to the ', u'Next Page']

In [5]: sel.xpath("string(//a[1]//text())").extract()
Out[5]: [u'Click here to go to the ']

A node converted to a string, however, puts together the text of itself plus of all its descendants:

In [6]: sel.xpath("//a[1]").extract()
Out[6]: [u'<a href="#">Click here to go to the <strong>Next Page</strong></a>']

In [7]: sel.xpath("string(//a[1])").extract()
Out[7]: [u'Click here to go to the Next Page']

Beware of the difference between //node[1] and (//node)[1]

//node[1] select all the nodes occuring first under their respective psrents.

(//node)[1] select all the nodes in the document, and then gets only the first of them.

In [8]: sel = Selector(text="""
   ...:       <ul class="list">
   ...:           <li>1</li>
   ...:           <li>2</li>
   ...:           <li>3</li>
   ...:       </ul>
   ...:       <ul class="list">
   ...:           <li>4</li>
   ...:           <li>5</li>
   ...:           <li>6</li>    
   ...:       </ul>""")

In [9]: xp = lambda x: sel.xpath(x).extract()

In [10]: xp("//li[1]")
Out[10]: [u'<li>1</li>', u'<li>4</li>']

In [11]: xp("(//li)[1]")
Out[11]: [u'<li>1</li>']

In [12]: xp("//ul/li[1]")
Out[12]: [u'<li>1</li>', u'<li>4</li>']

In [13]: xp("(//ul/li)[1]")
Out[13]: [u'<li>1</li>']

******** Built-in Selectors reference

class scrapy.selector.Selector(response=None, text=None, type=None)

An instance of Selector is a wrapper over response to select certain parts
of its content.

RESPONSE is an HTMLRESPONSE or an XmlResponse object that will be used for
selecting and extracting data.

TEXT is a unicode string or utf-8 encoded text for cases when a RESPONSE
isn't available. Using TEXT and RESPONSE together is undefined behavior.

TYPE defines the selector type, it can be "html", "xml" or None (default).
If type is None, the selector automatically chooses the best type based
on RESPONSE type, or default to "html" in case it is used together
with TEXT.

If TYPE is None and a RESPONSE is passed, the selector tyoe is inferred 
from the response type as follows:

"html" for HtmlResponse type
"xml" for XmlResponse type
"html" for anything else

If type is set, the selector type will be forced and no detection will
occur.

xpath(query)
Find nodes matching the xpath query and return the result as a SelectorList
instance with all elements flattened. List elements implemented Selector
interface too.

css(query)
Apply the given CSS selector and return a SelectorList instance.

extract()
Serialize and return the matched nodes as a list of unicode strings.
Percent encoded cocntent is unquoted.

re(regex)
Apply the given regex and return a list of unicode strings the matches.

******** SelectorList objects

class scrapy.selector.SelectorList

the SelectorList class is a subclass of the builtin list class, which
provides a few additional methods.

xpath(query)
css(query)
extract()
re()
__nonzero__()

******** Selector examples on HTML response

sel = Selector(html_response)
sel.xpath("//h1") #select all <h1> elements 
sel.xpath("//h1").extract() # extract the text of all <h1> elements
sel.xpath("//h1/text()").extract()
for node sel.xpath("//p") #iterate over all <p> tags and print their class attribute
    print node.xpath("@class").extract()

******** Selector examples on XML response

sel = Selector(xml_response)
sel.xpath("//product") #select all <product> elements from an XML response body
sel.register_namespace("g", "http://base.google.com/ns/1.0") #extract all prices from Google Base XML feed
sel.xpath("//g:price").extract()

******** Removing namespaces

When dealing with scraping projects, it is often quite convenient to get rid of namespaces altogether and
just work with element names, to write more simple/convenient XPath. We can use the Selector.remove_namespaces()
method for that.

>>> response.xpath("//link")
>>> response.selector.remove_namespaces()
>>> response.xpath("//link")

******* Items

Scrapy spider can return the extracted data as Python dict. While convenient and familar, Python dicts
lsck structure: it is ease to make a typo in a field name or return incosistent data, especially in a
larger project with many spiders.
To define common output data format Scrapy provides the Item class. Item objects are simple containers
used to collect the scraped data. They provide a dictionary-like API with a convenient syntax for dexlaring
their available fields.

******** Declaring Items

Items are declared using a simple class definition syntax and Fields objects.

import scrapy

class Product(scrapy.Item):
   name = scrapy.Field()
   price = scrapy.Field()
   stock = scrapy.Field()
   last_updated = scrapy.Field(seriallizer=str)

******** Items Fields

Field objects are used to specify metadata for each field.
We can specify any kind of metadata for each field. There is no restriction on the values accepted by 
Field objects. Each key defined in Field objects could be used by a different component, and only those components 
know about it. The main goal of Field objects is to provide a way to define all field metadata in one place.
It's important to note that the Field objects used to declare the item do not stay assigned as class
attributes. Instead, they can be accessed through the Item.fields attribute.

******** Creating items, getting field values

In [1]: import scrapy

In [2]: class Product(scrapy.Item):
   ...: name = scrapy.Field()
   ...: price = scrapy.Field()
   ...: stock = scrapy.Field()
   ...: last_updated = scrapy.Field(serializer=str)
   ...: 

In [3]: product = Product(name='Desktop PC', price=1000)

In [4]: print product
{'name': 'Desktop PC', 'price': 1000}

In [5]: product['name']
Out[5]: 'Desktop PC'

In [6]: product.get('name')
Out[6]: 'Desktop PC'

In [7]: product['price']
Out[7]: 1000

In [8]: product.get('last_updated', 'not set')
Out[8]: 'not set'

In [9]: 'name' in product
Out[9]: True

In [10]: 'last_updated' in product
Out[10]: False

In [11]: product['last_updated'] = 'today'

In [12]: product['last_updated']
Out[12]: 'today'

In [13]: product.keys()
Out[13]: ['price', 'last_updated', 'name']

In [14]: product.items()
Out[14]: [('price', 1000), ('last_updated', 'today'), ('name', 'Desktop PC')]

In [15]: product2 = Product(product)

In [16]: print product2
{'last_updated': 'today', 'name': 'Desktop PC', 'price': 1000}

In [17]: product3 = product2.copy()

In [18]: print product3
{'last_updated': 'today', 'name': 'Desktop PC', 'price': 1000}

In [19]: dict(product)
Out[19]: {'last_updated': 'today', 'name': 'Desktop PC', 'price': 1000}

In [21]: Product({'name': 'Laptop PC', 'price': 1500})
Out[21]: {'name': 'Laptop PC', 'price': 1500}

******** Item objects

class scrapy.item.Item([arg])

Return a new Item optionally initialized from the given argument.
The only additional attribute provided by items is:

fields

Adictionary containing all declared fields for this item. The keys are the field names and the values 
are the Field objects used in the Item declaration.

******** Field objects

class scrapy.item.Field([arg])

The Field class is just an alias to the built-in dict class and doesn’t provide any extra functionality
or attributes. In other words, Field objects are plain-old Python dicts. A separate class is used to support
the item declaration syntax based on class attributes.

******* Item Loaders

Item Loaders provide a convenient mechanism for populating scraped Items. Even though Item can be populated
using their own dictionary-like API.

Items provide the container of scraped data, while Item Loaders provide the mechanism for populating that container.

******** Using Item Loaders to populate items

To use an Item Loader, we must first instantiate it. We can either instantiate it with a dict-like object. It
instantiated in the Itme Loader constructor using the Item class specified in the ItemLoader.default_item_class
attribute.

Then you start collecting values into the Item Loader, typically using Selectors.

Here is a typical Item Loader usage in a Spider, using the Product item:

from scrapy.loader import ItemLoader
from myproject.items import Product

def parse(self, response):
    l = ItemLoader(item=Product(), response=response)
    l.add_xpath('name', '//div[@class="product_name"]')
    l.add_xpath('name', '//div[@class="product_title"]')
    l.add_xpath('price', '//p[@id="price"]')
    l.add_css('stock', 'p#stock]')
    l.add_value('last_updated', 'today') # you can also use literal values
    return l.load_item()

******** Input and Output processors

An Item Loader contains one input processor and one output processor for each (item) field. 
Let's see an example to illustrate how the input and output processors are called for a particular field:

l = ItemLoader(Product(), some_selector)
l.add_xpath('name', xpath1) # (1)
l.add_xpath('name', xpath2) # (2)
l.add_css('name', css) # (3)
l.add_value('name', 'test') # (4)
return l.load_item() # (5)

1. Data from xpath1 is extracted, and passed through the input processor of name field. The result of the 
input processor is collected and kept in the Item Loader(but not yet assigned to the item).
2. Data from xpath2 is extracted, and passed through the same input processor used in (1). The result of the 
input processor is append to the data collected in (1) (if any).
3. This case is similar to the previous ones, exept that the data is extracted from the CSS selector.
4. This case is also similar to previous ones, exept that the value to be collected is assigned directly,
instead of being extracted from a XPath expression or a CSS selector.
5. The data collected in steps (1), (2), (3) and (4) s passed through the output processor of the name field.
The result of the output processor is the value assigned to the name field in the item.

******** Declaring Item Loaders

Item Loaders are declared like Items, by using a class definition syntax.

from scrapy.loader import ItemLoader
from scrapy.loader.processors import TakeFirst, MapCompose, Join

class ProductLoader(ItemLoader):

    default_output_processor = TakeFirst()

    name_in = MapCompose(unicode.title)
    name_out = Join()

    price_in = MapCompose(unicode.strip)

    # ...

Input processors are declared using the _in suffix while output processors are declared using the _out suffix. Declare a default input/output processors using the ItemLoader.default_input_processor and ItemLoader.default_output_processor attributes.

******** Declaring Input and Output Processors

import scrapy
from scrapy.loader.processors import Join, MapCompose, TakeFirst
from w3lib.html import remove_tags

def filter_price(value):
    if value.isdigit():
        return value

class Product(scrapy.Item):
    name = scrapy.Field(
        input_processor=MapCompose(remove_tags),
        output_processor=Join(),
    )
    price = scrapy.Field(
        input_processor=MapCompose(remove_tags, filter_price),
        output_processor=TakeFirst(),
    )
>>> from scrapy.loader import ItemLoader
>>> il = ItemLoader(item=Product())
>>> il.add_value('name', [u'Welcome to my', u'<strong>website</strong>'])
>>> il.add_value('price', [u'&euro;', u'<span>1000</span>'])
>>> il.load_item()
{'name': u'Welcome to my website', 'price': u'1000'}

1. Item Loader field-specific attributes field_in and field_out.
2. Field metadata(input_processor and output_processor key).
3. Item Loader defaults: ItemLoader.default_input_processor() and ItemLoader.default_output_processor().

******** Item Loader Context

The Item Loader Context is a dict of arbitrary key/values which is shared among
all input and output processors in the Item Loader. It can be passed when
declaring, instantiating or using Item Loader. They are used to modify the
behavior of the input/output processors.

Suppose you have a function parse_length which receives a text value
and extracts a length from it:

def parse_length(text, loader_context):
    unit = loader_context.get('unit', 'm')
    # ... length parsing code goes here ...
    return parsed_length

There are several ways to modify Item Loader context values:

1. By modifing the currently active Item Loader context(context attribute):

loader = ItemLoader(product)
loader.context['unit'] = 'cm'

2. On Item Loader instantiation (the keyword arguments of Item Loader
constructor are stored in the Item Loader context):

loader = ItemLoader(prroduct, unit='cm')

3. On Item Loader declaration, for those input/output processors that
support instantiating them with an Item Loader context. MapCompose is one of them:

class ProductLoader(ItemLoader):
    length_out = MapCompose(parse_length, unit='cm')

******** ItemLoader objects:

class scrapy.loader.ItemLoader([item, selector, response] **kwards)

Return a new Item Loader for populating the given Item.

Parameters: 

item(Item object) - the item instance to populate using subsequent calls
to add_xpath(), add_css(), or add_value().

selector(Selector object) - the selector to extract data from, when
using the add_xpath() (resp. add_css()) or replace_xpath() (resp.replace())

response(Response object) - the response used to construct the selector
using the default_selector_class.

ItemLoader instances have the following methods:

get_value(value, *processors, **kwards)

Process the given value by the given processors and keyword arguments.

Available keyword arguments:

Parameters: re(str or compiled regex) - a regular expression to use
for extracting data from the given value using extract_regex()
method, applied before processors

>>> from scrapy.loader.processors import TakeFirst
>>> loader.get_value(u'name: foo', TakeFirst(), unicode.upper, re='name: (.+)')
'FOO'




*** Command-line options

There are command-line arguments, available for all commands, that you can use to override some of the Scrapy settings regarding logging.

--logfile FILE
Overrides LOG_FILE

--loglevel/-L LEVEL
Overrides LOG_LEVEL

--nolog
Sets LOG_ENABLED to False




******* XPath Tutorial

XML was created to be a self-describing markup format. As XML matured, new XML releated creations were 
popping up. Although you could create a nicely structured document with XML, where didn't seem to be an easy
way to find information inside the document.

XML documents can be thought of as a Tree Structure, made up of parent, child and sibling relationships.
Because of this very logical layout of an XML document it seems like there should be a standart way to find 
information.

XPath is the solution to finding information in an XML document. XPath uses expressions to find elements,
attributes and other information in your XML. If you have an XML document that contained a bunch of your
favorite books, each with author children elements, you can use a one line XPath expression to find all the
authors of your favrite books.


******** XPath-expressions

XPath can locate any type of information in an XML document with one line of code. These one liners 
are referred to as "expressions", and very piece of XPath that you write will be an expression. Just to
make it cristall clear, here's the definition of an expression as it relates to our usage.


EXPRESSION - in programming, a line of source code that returns a value when executed.


An XPath expression is exactly that; it's a line of code that we use to get information from our
XML document.

XML Code, lemonade2.xml:
<inventory>
   <drink>
       <lemonade supplier="mother" id="1">
            <price>$2.50</price>
            <amount>20</amount>
       </lemonade>
       <pop supplier="store" id="2">
           <price>$1.50</price>
           <amount>10</amount>
       </pop>
   </drink>

   <snack>
       <chips supplier="store" id="3">
           <price>$4.50</price>
           <amount>60</amount>
           <calories>180</calories>
       </chips>
   </snack>

</inventory>

An XPath expression describes the /location/ of an element or attribute in our XML document. By starting at the
root element, we can select any element in the document by cerefully creating a chain of children elements.
Each element is separeted by a slash "/".

For example, if we wanted to know the number of chips we have in stock(element amount) in lemonade2.xml,
the XPath expression would be:

inventory/snack/chips/amount

1. We specified the root node, inventory, at the beginning of our XPath expression.
2. We choose inventory's child element, snack, becauseit is on the pathway towards our goal,
"number of chips in stock".
3. We chose snack's child element chips.
4. Finally, we chose chips child element amount, or in other words, "number of chips in stock".

******** XPath-element

The most common usage of XPath is for selecting elements in an XML document. This lesson will provide a
walkthrough of selecting many different elements, as different levels, in the XML Tree.

******** XPath - a path of elements

When trying to reach a specific element in your XML document, you often have to string together many elements
to get there. In XPAth you reference an element by using its name. For example, the root element's name
in lemonade2.xml is inventory, so we would type the following to reference it.

XPath Expression:

inventory

If we wanted to reference the DRINK element of INVENTORY, we would have to string together these two elements,
starting with the root element, INVENTORY.

XPath Expression:

inventory/drink

Notice: The elements are separeted by a slesh "/".

******** XPath - a path of children

If we wanted to select thi PRICE of POP, we would have to make an even longer path of elements to reach
our final destination.

XPAth EXpression:

inventory/drink/pop/price

******** XPath - attribute

XML Code, lemonade2.xml:

<inventory>
    <drink>
         <lemonade supplier="mother" id="1">
             <price>$2.50</price>
             <amount>20</amount>
         </lemonade>
         <pop supplier="store" id="2">
             <price>$1.50</price>
             <amount>10</amount>
         </pop>
   </drink>

   <snack>
      <chips supplier="store" id="3">
          <price>$4.50</price>
          <amount>60</amount>
          <calories>180</calories>
      </chips>
   </snack>

</inventory>

At the end of your XPath expression, which is normally the element you want to select, add the at 
sign "@" plus the name if the attribute you wish to select. The following XPath expression select chips 
element.

inventory/snack/chips

If we want sto select the supplier attribute of chips, we would add "@supplier" to our expression.

inventory/snack/chips@supplier

If we wanted to select the supplier attribute of pop, the XPath expression would have to be changed
slightly.

inventory/drink/pop@supplier


******** XPath - absolute location

When you are using the absolute method, your expression must start with the root element of your XML document.
If you only wanted to select the root elment, then you're done


inventory

If you wanted one of the sub-elements, like 'lemonade', then you will have to create a string of children
elements from the root node to the desired node.

inventory/drink/lemonade

******** XPath - relative location means more options

To construct an XPath expression to select every amount element, we only need to type one word:

amount

This piece of XPath will select all of the 'amount' elements in our lemonade2 XML document.


******** XPath - relative can have children too

If you wanted to select every price element that had a 'chips' parent, you would use a relative location
expression:

chips/price

******** XPath - descendants "//"

The slash "/" is used to separate parent from child in our XPath expressions. Two slashes are used to select the descendants of an element.

If you wanted to select each 'price' element that was a descendant of 'drink', you would have to write:

drink//price


******** XPath - parent 

If we wanted to select all of the product elements, 'lemonade', 'pop', 'chips' we would have to do expression:

amount/..

This expression uses a relative path location and select all of the 'amount' elements in our XML docunent. It then uses the parent sequence ".." to select the parent element of each 'amount' element. In our XML document, there are three amount elements, and their parents are 'lemonade', 'pop', chips.

*** Simpler String Substitutions
Once the Template has been created, substitutions can be performed
    by calling one of two methods:

    - substitute().  This method returns a new string which results
      when the values of a mapping are substituted for the
      placeholders in the Template.  If there are placeholders which
      are not present in the mapping, a KeyError will be raised.

    - safe_substitute().  This is similar to the substitute() method,
      except that KeyErrors are never raised (due to placeholders
      missing from the mapping).  When a placeholder is missing, the
      original placeholder will appear in the resulting string.
Here are some examples:

        >>> from string import Template
        >>> s = Template('${name} was born in ${country}')
        >>> print s.substitute(name='Guido', country='the Netherlands')
        Guido was born in the Netherlands
        >>> print s.substitute(name='Guido')
        Traceback (most recent call last):
        [...]
        KeyError: 'country'
        >>> print s.safe_substitute(name='Guido')
        Guido was born in ${country}


In [12]: name = raw_input('Who are you?')
Who are you?Antony

In [13]: print 'Hello %s' %(name,)
Hello Antony
   
* Unix

** Installing software on Linux

*** DONE What is software?
    CLOSED: [2017-05-11 Thu 06:38]
    In computer science and software engineering, computer software is
    all information processed by computer systems, programs and data.
    Computer software includes computer programs, libraries and related
    non-executable data, such as online documentation or digital
    media.

*** DONE Types of software
    CLOSED: [2017-05-11 Thu 06:38]
    Purpose, or domain of use:

    Application software
    System software:
    - Operating systems
    - Device drivers
    - Utilities
    Malicious software

    Nature or domain of execution:

    - Desktop applications such as web browsers and Microsoft Office,
      as well as smartphone and tablet applications (called "apps").
    - JavaScript
    - Server software:
      - Web applications
      - Plugins
      - Embedded software
      - Microcode

    Programming tools

*** DONE What is software on Linux?
    CLOSED: [2017-05-11 Thu 07:24] SCHEDULED: <2017-05-11 Thu> DEADLINE: <2017-05-11 Thu 07:30>
    Linux is a Unix-like computer operating system assembled under the
    model of free and open-source software development and
    distribution. The development of Linux is one of the most
    prominent examples of free and open-source software collaboration.
    The underlying source code may be used, modified and
    distributed‍—‌commercially or non-commercially‍—‌by anyone under the
    terms of its respective licenses, such as the GNU General Public
    License. Typically, Linux is packaged in a form known as a Linux
    distribution (or distro for short) for both desktop and server
    use. Some of the most popular mainstream Linux
    distributions are Arch Linux, CentOS, Debian, Fedora,
    Gentoo Linux, Linux Mint, Mageia, openSUSE and Ubuntu, together
    with commercial distributions such as Red Hat Enterprise Linux and
    SUSE Linux Enterprise Server. Distributions include the Linux
    kernel, supporting utilities and libraries, many of which are
    provided by the GNU Project, and usually a large amount of
    application software to fulfil the distribution's intended use.

    Desktop Linux distributions include a windowing system, such as
    X11, Mir or a Wayland implementation, and an accompanying desktop
    environment such as GNOME or the KDE Software Compilation; some
    distributions may also include a less resource-intensive desktop,
    such as LXDE or Xfce. Distributions intended to run on servers may
    omit all graphical environments from the standard install, and
    instead include other software to set up and operate a solution
    stack such as LAMP. Because Linux is freely redistributable,
    anyone may create a distribution for any intended use.

    Installed components of a Linux system include the following:

    - A bootloader, for example GNU GRUB, LILO, SYSLINUX, or
      Gummiboot. This is  program that loads the Linux kernel into the
      computer's main memory, by being executed by the computer when
      it is turned on and after the firmware initialization is performed.
    - An init program, such as the traditional sysvinit and the newer
      systemd, OpenRC and Upstart. This is the first process launched
      by the Linux ernel, and is at the root of the process tree: in
      other terms, all processes are launched through init. It starts
      processes such as system services and login prompts (whether
      graphical or in terminal mode).
    - Software libraries, which contain code that can be used by
      running processes. On Linux systems using ELF-format executable
      files, the dynamic linker that manages use of dynamic libraries
      is known as ld-linux.so. If the system is set up for the user to
      compile software themselves, header files will also be included
      to describe the interface of installed libraries. Besides the
      most commonly used software library on Linux systems, the GNU C
      Library (glibc), there are numerous other libraries.

    - C standard library is the library needed to run standard C
      programs on a computer system, with the GNU C Library being the
      most commonly used.
      Several alternatives are available, such as the EGLIBC (which
      was used by Debian for some time) and uClibc (which was designed for
   uClinux).

    - Widget toolkits are the libraries used to build graphical user
      interfaces (GUIs) for software applications. Numerous widget
      toolkits are available, including GTK+ and Clutter developed by
      the GNOME project, Qt developed by the Qt Project and led by
      Digia, and Enlightenment Foundation Libraries (EFL) developed
      primarily by the Enlightenment team.

    - User interface programs such as command shells or windowing
      environments.

      There are thousands of applications (software) that are
      available for the Linux operating system in categories:

      Education
      Emulation
      Games
      Graphic / Image
      Multimedia
      Office
      Other
      Science
      Virus Scan
      Web Browsers

*** DONE What is the package
    CLOSED: [2017-05-11 Thu 07:50] SCHEDULED: <2017-05-11 Thu> DEADLINE: <2017-05-11 Thu 08:05>

    A software package is an assemblage of files and information about
    those files.

    Linux distributions are usually installed as separate software
    packages, each of which is a particular application, such as a Web
    browser or a development environment. Each package includes an
    archive of files and information about the software, such as its
    name, the specific version and a description. A package management
    system (PMS), such as rpm or YUM, automates the installation process.

*** DONE What is the installation
    CLOSED: [2017-05-11 Thu 10:49] SCHEDULED: <2017-05-11 Thu> DEADLINE: <2017-05-11 Thu 11:00>
    Installation (or setup) of a computer program (including device
    drivers and plugins), is the act of making the program ready for
    execution. Because the process varies for each program and each
    computer, programs (including operating systems) often come with
    an installer, a specialized program responsible for doing whatever
    is needed for their installation. Installation may be part of a
    larger software deployment process.

    Some computer programs can be executed by simply copying them into
    a folder stored on a computer and executing them. Other programs are
    supplied in a form unsuitable for immediate execution and therefore
    need an installation procedure. Once installed, the program can be
    executed again and again, without the need to reinstall before each
    execution.

    Common operations performed during software installations include:

    - Making sure that necessary system requirements are met
    - Checking for existing versions of the software
    - Creating or updating program files and folders
    - Adding configuration data such as configuration files, Windows registry
     entries or environment variables
    - Making the software accessible to the user, for instance by
      creating links, shortcuts or bookmarks
    - Configuring components that run automatically, such as daemons
      or Windows services
    - Performing product activation
    - Updating the software versions 

*** DONE There in the hard disk package install [100%]
    CLOSED: [2017-05-14 Sun 10:15] SCHEDULED: <2017-05-13 Sat> DEADLINE: <2017-05-13 Sat 07:10>
    - [X] The Linux (virtual) file system
    - [X] User Programs (binaries)
    - [X] System Administration Programs (binaries)
    - [X] Libraries
    - [X] Documentation

    The Linux (Virtual) File System

    Linux assigns a name to each device too, but this is not how the
    files on that device are accessed. There are no drive letters in
    Linux. Instead, Linux creates one unified Virtual File System for us,
    which makes all the files on all devices appear to exist on one global
    device. In Linux, there is one root directory, and every file you have
    access to is located under it somewhere. Furthermore, the Linux root
    directory does not have to be on any particular device. It might not
    be on your first hard drive. It might not even be on your own
    computer! Linux can use a network shared resource as its root
    directory.

    User Programs (binaries)

    /bin - Essential user commands

    The /bin directory contains essential commands that every user
    will need. This includes your login shell and basic utilities like
    ls. The contents of this directory are usually fixed at the time
    you install Linux. Programs you install later will usually go
    elsewhere (read on).

    /usr/bin - Most user commands

    The /usr hierarchy contains the programs and related files meant
    for users. (The original Unix makers had a thing for abbreviation.)
    The /usr/bin directory contains the program binaries. If you just
    installed a software package and don’t know where the binary went,
    this is the first place to look. A typical desktop system will have
    many programs here.

    /usr/local/bin - “Local” commands

    When you compile software from source code, those install files
    are usually kept separate from those provided as part of your
    Linux distribution. That is what the /usr/local/ hierarchy is for.

    System Administration programs (binaries)

    /sbin - Essential System admin commands

    The /sbin directory contains programs needed by the system
    administrator, like fsck, which is used to check file systems for
    errors. Like /bin, /sbin is populated when you install your Linux
    system, and rarely changes.

    /usr/sbin - Non-essential System Administration Programs (binaries)¶

    This is where you will find commands for optional system services
    and network servers. Desktop tools will not show up here, but if you
    just installed a new mail server, this is where to look for the
    binaries.

    /usr/local/sbin - “Local” System Administration Commands¶

    When you compile servers or administration utilities from source
    code, this is where the binaries normally will go.

    Libraries

    Libraries are shared bits of code. On Windows these are called DLL
    files (Dynamic Loading Libraries). On Linux systems they are usually
    called SO (Shared Object) files. As to location, are you detecting a
    pattern yet? There are three directories where library files are
    placed: /lib, /usr/lib, and /usr/local/lib.

    Documentation

    Documentation is a minor exception to the pattern of file
    placement. Pages of the system manual (man pages) follow the same
    pattern as the programs they document: /man, /usr/man, and
    /usr/local/man. You should not access these files directly, however,
    but by using the man command.

    Many programs install addition documentation in the form of text
    files, HTML, or other things not man pages. This extra
    documentation is stored in directories under /usr/share/doc or
    /usr/local/share/doc. (On older systems you may find this under
    /usr/doc instead.)


*** DONE Standard Linux packages types
    CLOSED: [2017-05-10 Wed 13:00] DEADLINE: <2017-05-10 Wed 13:20> SCHEDULED: <2017-05-10 Wed>

    The standard Linux package format is RPM. An RPM package file
    normally will be named something like program-version-other.rpm
    Another popular package format is DEB, the Debian software package.
    Debian packages and the Advanced Packaging Tool (APT) were the
    first to introduce several advanced features that are now common.
*** DONE What are repositories
    CLOSED: [2017-05-12 Fri 07:00] SCHEDULED: <2017-05-12 Fri> DEADLINE: <2017-05-12 Fri 07:05>

    A software repository contains software packages.

    When you search via the Software Centre or use a tool like apt-get or yum
    you are shown a list of all the packages within the repositories available
    to your system.

    A software repository can store its files on one server or across many
    different servers known as mirrors.
*** DONE Tar archives
    CLOSED: [2017-05-12 Fri 07:22] SCHEDULED: <2017-05-12 Fri> DEADLINE: <2017-05-12 Fri 07:40>
    Tar balls come in files that end in .tar, .tar.gz, .tgz, or
    something along these lines. To unpack a tar ball, use this
    command:

    #+BEGIN_SRC shell :results output
    tar -xzvf ${filename}.tar.gz
    #+END_SRC

    The parameters are 'x' to extract files, 'z' to filter through gzip
    for decompression (leave this off if the file does not have a gz
    extension), 'v' for verbose mode so you can tell what’s going on, 'f'
    indicating there will be a filename to follow.

    This command will not install the software, it will only extract
    the archived files. It is your job then to find the README file or
    INSTALL file and read its instructions for installation. If the
    archive contains binaries there will usually be a setup script
    (often called install.sh) that you must execute as SuperUser.
*** DONE Compiling Linux Software from Source Code
    CLOSED: [2017-05-12 Fri 08:20] SCHEDULED: <2017-05-12 Fri> DEADLINE: <2017-05-12 Fri 08:00>
    When the programmer believes he has perfected the instructions for
    his program, he uses a special program called a compiler to
    translate his human readable text instructions into computer
    readable numbers that correspond to the same instructions. The
    resulting file is usable by computers but incomprehensible to
    humans. This is called object code. The resulting executable file
    is often called binary, after the number system used by the
    computer.

    Example

    #+BEGIN_SRC shell :results output
    tar -xzvf ${name}.tar.gz
    Unpacking ...
    cd ${name}
    more INSTALL
    ./configure
    make
    make install
    #+END_SRC

    Compiling, installing and uninstalling

    #+BEGIN_SRC shell :results output
    make
    make install
    make uninstall
    #+END_SRC
*** DONE Three stages to compiling packages
    CLOSED: [2017-05-18 Thu 08:41] SCHEDULED: <2017-05-18 Thu> DEADLINE: <2017-05-18 Thu 08:45>

    configure

    configure is a script that is used for the following things:

    1. It checks that your computer fulfils all the necessary
       requirements to build the package.
    2. It can help you change the default paths it looks for its
       requirements
    3. It is used to enable/disable various options in the compiled
       program.
    4. It can change the path that the program will be installed in.

    You can look at the various options that your specific configure
    script provides you with by executing:

    #+BEGIN_SRC shell :results output
    ./configure --help | less
    #+END_SRC

    For example, by default the configure script installs to
    /usr/local. If you want to change the path, you would execute the
    configure script as shown below:

    #+BEGIN_SRC shell :results output
    ./configure --PREFIX=/opt
    #+END_SRC

    Compiling the Package

    the configure stage should have been completed by now and the
    actual compiling can begin. This can be done simply be calling:

    #+BEGIN_SRC shell :results output
    make
    #+END_SRC

    Installing the package

    #+BEGIN_SRC shell :results output
    sudo checkinstall
    #+END_SRC
*** DONE Checkinstall
    CLOSED: [2017-05-18 Thu 07:56] SCHEDULED: <2017-05-18 Thu> DEADLINE: <2017-05-18 Thu 08:05>
    Checkinstall keeps track of all files installed by a "make
    install" or equivalent, create a Slackware, RPM, or Debian package
    with those files, and adds it to the installed packages database,
    allowing for easy package removal or distribution.

    Instead of

    #+BEGIN_SRC shell :results output
    sudo make install
    #+END_SRC

    you will use

    #+BEGIN_SRC shell :results output
    sudo checkinstall
    #+END_SRC

    Use CheckInstall with auto-apt

    You can use auto-apt when you want to build a simple package from
    source with checkinstall. You need to have auto-apt installed!


    Instead of
    #+BEGIN_SRC shell :results output
    ./configure
    #+END_SRC

    you use:

    #+BEGIN_SRC shell :results output
    auto-apt run ./configure
    #+END_SRC

*** DONE Debian, Ubuntu: APT
    CLOSED: [2017-05-10 Wed 13:20] SCHEDULED: <2017-05-10 Wed> DEADLINE: <2017-05-10 Wed 13:20>

    There is a broad array of tools for working with DEB and Ubuntu
    packages, but the one you will commonly use is apt-get. apt-get is
    so easy because it not only keeps track of that packages are
    installed, but also what other packages are available.

    To install package:

    #+BEGIN_SRC shell :results output
    apt-get install ${packagename}
    #+END_SRC

    To remove software:

    #+BEGIN_SRC shell :results output
    apt-get remove ${packagename}
    #+END_SRC

    APT keeps a local database on your hard drive with a list of all
    available packages and where to find them. This database needs to
    be explicitly updated. To update the APT database:

    #+BEGIN_SRC shell :results output
    apt-get update
    #+END_SRC

    The following command will update your package database, and then
    upgrade all the packages that have patches or security updates to
    install.

    #+BEGIN_SRC shell :results output
    apt-get update; apt-get upgrade
    #+END_SRC

*** DONE Adding file systems to the tree
    CLOSED: [2017-05-15 Mon 07:33] SCHEDULED: <2017-05-15 Mon> DEADLINE: <2017-05-15 Mon 07:46>
    To gain access to files on another device, you must first tell
    Linux where in the directory tree you would like those files to
    appear. This process is called mounting a file system.
    The directory given to Linux is called the mount point. In this case
    it is /mnt. The /mnt directory exists on all Linux systems, and it is
    intended specifically for use as a mount point for temporary media like
    floppy disks or CDROMs. It may be empty, or it may contain subdirectories
    for mounting individual devices.

    You may mount file systems anywhere in the directory tree.
    However, it is good practice to create empty directories that are
    reserved as mount points. Linux will allow you to mount a file
    system on a directory that is not empty. Any files in that
    directory will become invisible in the virtual file system. They
    will still exist on disk, but you will be unable to access them
    until the file system that obscures them is unmounted.

    /etc/fstab

*** DONE Partitions: Planning Your Linux Installation
    CLOSED: [2017-05-15 Mon 08:48] SCHEDULED: <2017-05-15 Mon> DEADLINE: <2017-05-15 Mon 08:20>

    partitions: swap, root, and home.

    Swap

    This is space on your hard drive that can be used as virtual
    memory. Virtual memory allows your computer to run large programs
    and perform complex tasks even if it does not have enough physical
    RAM to do the job. (It is a lot slower, but it works.)

    root (/)

    It is the top of the directory tree, and contains Linux and
    everything that you install with Linux. The size of your root
    partition will vary depending on what you install or plan to
    install.

    In general, you should be fine with a root partition between 2GB
    and 8GB.

    /home

    The third and final partition you should create will hold your
    /home directory. This is the place where all the user-specific
    files, your data in other words, are stored.
    
*** TODO How set your $PATH variable in Linux

    Sometimes, you may wish to install programs into other locations
    on your computer, but be able to execute them easily without
    specifying their exact location. You can do this easily by adding a
    directory to your $PATH. To see what's in your $PATH right now, type
    in:

    #+BEGIN_SRC shell :results output
    echo $PATH
    #+END_SRC

    #+RESULTS:
    : /usr/local/share/venv/amvenv3/bin
    : /usr/local/sbin:/usr/local/bin:/usr/sbin
    : /usr/bin:/sbin:/bin:/usr/games:/usr/local/games

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/test
    cat mysystem.sh
    #+END_SRC

    #+RESULTS:
    #+begin_example
    #!/bin/bash
    clear
    echo "This is information provided by mysystem.sh.  Program starts now."

    echo "Hello, $USER"
    echo

    echo "Today's date is `date`, this is week `date +"%V"`."
    echo

    echo "These users are currently connected:"
    w | cut -d " " -f 1 - | grep -v USER | sort -u
    echo

    echo "This is `uname -s` running on a `uname -m` processor."
    echo

    echo "This is the uptime information:"
    uptime
    echo

    echo "That's all folks!"
#+end_example

    #+BEGIN_SRC shell :results output
    export PATH=$PATH:/home/vikky/Desktop/test/mysystem.sh
    #+END_SRC

** Linux Tutorial
*** 1. The Command Line
*** 2. Basic Navigation
    pwd (Print Working Directory)

    #+BEGIN_SRC shell :results output
    pwd
    #+END_SRC

    #+RESULTS:
    : /home/vikky/Desktop/DVCS/stuff

    #+BEGIN_SRC shell :results output
    ls
    ls -l
    #+END_SRC

    #+RESULTS:
    #+begin_example
    1.py
    3rd
    a.py
    total 3
    -rw-rw-r--  1 vikky vikky    396 Feb 27 07:08 1.py
    drwxrwxr-x  2 vikky vikky   4096 Feb 28 10:17 3rd
    drwxrwxr-x  4 vikky vikky   4096 Nov 23 16:37 app
#+end_example

    - First character indicates whether it is a normal file ( - ) or
      directory d)
    - Next 9 characters are permissions for the file or
      directory.
    - The next file is the number of blocks.
    - The next field is the owner of the file or directory (vikky in
      this case).
    - The next field is the group the file or directory belongs to
      (vikky in is case).
    - Following this is the file size. Next up is the file
      modification time.
    - Finally we have the actual name of the file or directory.

    #+BEGIN_SRC shell :results output
    ls /etc
    #+END_SRC

    #+RESULTS:
    #+begin_example
    acpi
    adduser.conf
    alternatives
    anacrontab
    apache2
    apg.conf
    apm
    apparmor
    apparmor.d
    apport
#+end_example

    More on paths

    ~ (tilde) - This is a shortcut for your home directory. eg, if your home
   directory is /home/vikky then you could refer to the directory Documents
   with the path /home/vikky/Documents or ~/Documents
    . (dot) - This is a reference to your current directory.
    .. (dotdot)- This is a reference to the parent directory. You can use this
   several times in a path to keep going up the heirarchy. eg if you were in
   the path /home/vikky you could run the command ls ../../ and this would do
   a listing of the root directory.

   #+BEGIN_SRC shell :results output
   ls ~/Desktop/test
   #+END_SRC

   #+RESULTS:
   : dir1
   : dir2
   : dir3
   : test.txt

   #+BEGIN_SRC shell :results output
   cd ~/Desktop/test
   ls ./dir1
   #+END_SRC

   #+RESULTS:
   : ex1.txt

*** 3. More About Files
*** 4. Manual Pages
*** 5. File Manipulation
    Creating directory

    There are a few useful options available for mkdir. The first one
    is -p which tells mkdir to make parent directories as needed
    (demonstration of what that actually means below). The second one
    is -v which makes mkdir tell us what it is doing

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/test
    mkdir linuxtutorialwork
    mkdir -pv linuxtutorialwork/foo/bar
    cd linuxtutorialwork/foo/bar
    pwd
    #+END_SRC

    #+RESULTS:
    : mkdir: created directory 'linuxtutorialwork/foo'
    : mkdir: created directory 'linuxtutorialwork/foo/bar'
    : /home/vikky/Desktop/test/linuxtutorialwork/foo/bar

    Removing a directory

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/test/linuxtutorialwork
    rmdir linuxtutorialwork/foo/bar
    ls
    #+END_SRC

    #+RESULTS:
    : foo

    Creating a blank file

    touch [options] <filename>

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/test/linuxtutorialwork
    pwd
    ls
    touch example1
    ls
    #+END_SRC

    #+RESULTS:
    : /home/vikky/Desktop/test/linuxtutorialwork
    : foo
    : example1
    : foo

    Copying a file or directory

    cp [options] <source> <destination>

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/test/linuxtutorialwork
    cp example1 barney
    ls
    #+END_SRC

    #+RESULTS:
    : barney
    : example1
    : foo

    Moving a file or directory

    mv [options] <source> <destination>

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/test/linuxtutorialwork
    mv barney foo/
    ls
    #+END_SRC

    #+RESULTS:
    : example1
    : foo

    Renaming a file or directory

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/test/linuxtutorialwork
    ls
    mv foo foo3
    ls
    #+END_SRC

    #+RESULTS:
    : example1
    : foo
    : example1
    : foo3

    Removing non empty directories

    #+BEGIN_SRC shell :resulsts output
    cd /home/vikky/Desktop/test/linuxtutorialwork
    ls
    rmdir foo3
    rm foo3
    #+END_SRC

    #+RESULTS:
    : example1
    : foo3
    : rmdir: failed to remove ‘foo3’: Directory not empty
    : rm: cannot remove 'backups': Is a directory

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/test/linuxtutorialwork
    rm -r foo3
    ls
    #+END_SRC

    #+RESULTS:
    : example1

*** 6. VI - Text Editor
*** 7. Wildcards
    Wildcards are a set of building blocks that allow you to create a
    pattern defining a set of files or directories.

    Here is the basic set of wildcards:

    * - represents zero or more characters
    ? - represents a single character
    [] - represents a range of characters

    #+BEGIN_SRC shell :results output
    pwd
    ls b*
    #+END_SRC

    #+RESULTS:
    #+begin_example
    /home/vikky/Desktop/DVCS/stuff
    b.py
    b.pyc
 #+end_example

     In this example we are looking for each file whose second letter is i.

    #+BEGIN_SRC shell :results output
    ls ?i*
    #+END_SRC

    #+RESULTS:
    #+begin_example
    city_generator.py
    city_generator.pyc
    fibonacci.py
    fibonacci.pyc
    links.csv
  #+end_example

    In this example we are looking for every file whose name either
    begins with a s or v.

    #+BEGIN_SRC shell :results output
    ls [sv]*
    #+END_SRC

    #+RESULTS:
    #+begin_example
    schedule.org~
    script1.sh~
    surprise.html
    vocabulary.org
  #+end_example

  #+BEGIN_SRC shell :result output
  ls [^a-k]*
  #+END_SRC

  #+RESULTS:
  | 1.py                             |                |
  | links.csv                        |                |
  | pluralsight_first_link.py        |                |
  | pluralsight_test.py              |                |
  | poem2.txt                        |                |
  | poem.txt                         |                |

*** 8. Permissions
*** 9. Filters
    head

    Head is a program that prints the first so many lines of it's input. By
    default it will print the first 10 lines but we may modify this with a
    command line argument.

    head [-number of lines to print] [path]

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/test
    head mysampledata.txt
    #+END_SRC

    #+RESULTS:
    #+begin_example
    Fred apples 20
    Susy oranges 5
    Mark watermellons 12
    Robert pears 4
    Terry oranges 9
    Lisa peaches 7
    Susy oranges 12
    Mark grapes 39
    Anne mangoes 7
    Greg pineapples 3
#+end_example

    tail

    Tail is the opposite of head. Tail is a program that prints the
    last so many lines of it's input. By default it will print the last 10
    lines but we may modify this with a command line argument.

    tail [-number of lines to print] [path]

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/test
    tail mysampledata.txt
    #+END_SRC

    #+RESULTS:
    #+begin_example
    Mark watermellons 12
    Robert pears 4
    Terry oranges 9
    Lisa peaches 7
    Susy oranges 12
    Mark grapes 39
    Anne mangoes 7
    Greg pineapples 3
    Oliver rockmellons 2
    Betty limes 14
#+end_example

    sort

    sort [-options] [path]

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/test
    sort mysampledata.txt
    #+END_SRC

    #+RESULTS:
    #+begin_example
    Anne mangoes 7
    Betty limes 14
    Fred apples 20
    Greg pineapples 3
    Lisa peaches 7
    Mark grapes 39
    Mark watermellons 12
    Oliver rockmellons 2
    Robert pears 4
    Susy oranges 12
    Susy oranges 5
    Terry oranges 9
#+end_example

    nl

    nl [-options] [path]

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/test
    nl mysampledata.txt
    #+END_SRC

    #+RESULTS:
    #+begin_example
	 1	Fred apples 20
	 2	Susy oranges 5
	 3	Mark watermellons 12
	 4	Robert pears 4
	 5	Terry oranges 9
	 6	Lisa peaches 7
	 7	Susy oranges 12
	 8	Mark grapes 39
	 9	Anne mangoes 7
	10	Greg pineapples 3
	11	Oliver rockmellons 2
	12	Betty limes 14
#+end_example

    wc

    wc stands for word count and it does just that (as well as characters and
    lines. By default it will give a count of all 3 but using command line
    options we may limit it to just what we are after.

    wc [-options] [path]

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/test
    wc mysampledata.txt
    wc -l mysampledata.txt
    wc -lw mysampledata.txt
    #+END_SRC

    #+RESULTS:
    :  12  36 209 mysampledata.txt
    : 12 mysampledata.txt
    :  12  36 mysampledata.txt

    cut

    cut is a nice little program to use if your content is separated
    into fields (columns) and you only want certain fields.

    cut [-options] [path]

    In our sample file we have our data in 3 columns, the first is a
    name, the second is a fruit and the third an amount. Let's say we only
    wanted the first column.

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/test
    cut -f 1 -d ' ' mysampledata.txt
    #+END_SRC

    #+RESULTS:
    #+begin_example
    Fred
    Susy
    Mark
    Robert
    Terry
    Lisa
    Susy
    Mark
    Anne
    Greg
    Oliver
    Betty
#+end_example

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/test
    cut -f 1,2 -d ' ' mysampledata.txt
    #+END_SRC

    #+RESULTS:
    #+begin_example
    Fred apples
    Susy oranges
    Mark watermellons
    Robert pears
    Terry oranges
    Lisa peaches
    Susy oranges
    Mark grapes
    Anne mangoes
    Greg pineapples
    Oliver rockmellons
    Betty limes
#+end_example

    sed

    sed <expression> [path]

    s/search/replace/g

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/test
    sed 's/oranges/bananas/g' mysampledata.txt
    #+END_SRC

    #+RESULTS:
    #+begin_example
    Fred apples 20
    Susy bananas 5
    Mark watermellons 12
    Robert pears 4
    Terry bananas 9
    Lisa peaches 7
    Susy bananas 12
    Mark grapes 39
    Anne mangoes 7
    Greg pineapples 3
    Oliver rockmellons 2
    Betty limes 14
#+end_example

    uniq

    uniq stands for unique and it's job is to remove duplicate lines from
    the data. One limitation however is that those lines must be adjacent
    (ie, one after the other). (sometimes this is not the case but we'll
    see one way we can fix this in Section 11 Piping and Redirection).

    uniq [options] [path]

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/test
    cat mysampledata.txt
    #+END_SRC

    #+RESULTS:
    #+begin_example
    Fred apples 20
    Susy oranges 5
    Susy oranges 5
    Susy oranges 5
    Susy oranges 5
    Mark watermellons 12
    Robert pears 4
    Terry oranges 9
    Lisa peaches 7
    Susy oranges 12
    Mark grapes 39
    Anne mangoes 7
    Greg pineapples 3
    Oliver rockmellons 2
    Betty limes 14
#+end_example

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/test
    uniq mysampledata.txt
    #+END_SRC

    #+RESULTS:
    #+begin_example
    Fred apples 20
    Susy oranges 5
    Mark watermellons 12
    Robert pears 4
    Terry oranges 9
    Lisa peaches 7
    Susy oranges 12
    Mark grapes 39
    Anne mangoes 7
    Greg pineapples 3
    Oliver rockmellons 2
    Betty limes 14
#+end_example

    tac

    The program tac is actually cat in reverse.

    tac [path]

    #+BEGIN_SRC shell :result output
    cd /home/vikky/Desktop/test
    tac mysampledata.txt
    #+END_SRC

    #+RESULTS:
    | Betty  | limes        | 14 |
    | Oliver | rockmellons  |  2 |
    | Greg   | pineapples   |  3 |
    | Anne   | mangoes      |  7 |
    | Mark   | grapes       | 39 |
    | Susy   | oranges      | 12 |
    | Lisa   | peaches      |  7 |
    | Terry  | oranges      |  9 |
    | Robert | pears        |  4 |
    | Mark   | watermellons | 12 |
    | Susy   | oranges      |  5 |
    | Susy   | oranges      |  5 |
    | Susy   | oranges      |  5 |
    | Susy   | oranges      |  5 |
    | Fred   | apples       | 20 |

    Filters summary

    head
    View the first n lines of data.

    tail
    View the last n lines of data.

    sort
    Organise the data into order.

    nl
    Print line numbers before data.

    wc
    Print a count of lines, words and characters.

    cut
    Cut the data into fields and only display the specified fields.

    sed
    Do a search and replace on the data.

    uniq
    Remove duplicate lines.

    tac
    Print the data in reverse order.


*** 10. Grep and Regular Expressions

**** DONE eGrep
     CLOSED: [2017-05-08 Mon 11:28] DEADLINE: <2017-05-08 Mon 11:35> SCHEDULED: <2017-05-08 Mon>

     egrep is a program which will search a given set of data and
     print every line which contains a given pattern.

     egrep [command line options] <pattern> [path]

     #+BEGIN_SRC shell :results output
     cd /home/vikky/Desktop/test
     cat mysampledata.txt
     #+END_SRC

     #+RESULTS:
     #+begin_example
     Fred apples 20
     Susy oranges 5
     Susy oranges 5
     Susy oranges 5
     Susy oranges 5
     Mark watermellons 12
     Robert pears 4
     Terry oranges 9
     Lisa peaches 7
     Susy oranges 12
     Mark grapes 39
     Anne mangoes 7
     Greg pineapples 3
     Oliver rockmellons 2
     Betty limes 14
#+end_example

     Let's say we wished to identify every line which contained the
     string 'mellon'

     #+BEGIN_SRC shell :results output
     cd /home/vikky/Desktop/test
     egrep 'mellon' mysampledata.txt
     #+END_SRC

     #+RESULTS:
     : Mark watermellons 12
     : Oliver rockmellons 2

     Sometimes we want to know not only which lines matched but their
     line number as well.

     #+BEGIN_SRC shell :results output
     cd /home/vikky/Desktop/test
     egrep -n 'mellon' mysampledata.txt
     #+END_SRC

     #+RESULTS:
     : 6:Mark watermellons 12
     : 14:Oliver rockmellons 2

     Or maybe we are not interested in seeing the matched lines but wish to
    know how many lines did match.

     #+BEGIN_SRC shell :results output
     cd /home/vikky/Desktop/test
     egrep -c 'mellon' mysampledata.txt
     #+END_SRC

     #+RESULTS:
     : 2

**** DONE Regular expression overview
     CLOSED: [2017-05-09 Tue 10:32] DEADLINE: <2017-05-09 Tue 10:25> SCHEDULED: <2017-05-09 Tue>
     | .      | a single character                                |
     | ?      | the preceding character matches 0 or 1 times only |
     | '*'    | the preceding character matches 0 or more times   |
     | +      | the preceding character matches 1 or more times   |
     | {n}    | the preceding character matches exactly n times   |
     | {n,m}  | the preceding character matches at least n times  |
     |        | and not more than m times                         |
     | [agd]  | the character is one of those included within the |
     |        | square brackets                                   |
     | [^agd] | the character is not one of those included within |
     |        | the square brackets                               |
     | [c-f]  | the dash within the square brackets operates as a |
     |        | range. In this case it mean either the letters    |
     |        | c, d, e or f                                      |
     | ()     | allows us to group several characters to behave   |
     |        | as one.                                           |
     | pipe   | pipe symbol  the logical OR operation             |
     | ^      | matches the beginning of the line                 |
     | $      | matches the end of the line                       |

     Let's say we wish to identify any line with two or more vowels
     in a row.

     #+BEGIN_SRC shell :results output
     cd /home/vikky/Desktop/test
     egrep '[aeiou]{2,}' mysampledata.txt
     #+END_SRC

     #+RESULTS:
     : Robert pears 4
     : Lisa peaches 7
     : Anne mangoes 7
     : Greg pineapples 3

     #+BEGIN_SRC shell :results output
     cd /home/vikky/Desktop/test
     egrep '2.+' mysampledata.txt
     #+END_SRC

     #+RESULTS:
     : Fred apples 20

     The number 2 as the last character on the line.

     #+BEGIN_SRC shell :results output
     cd /home/vikky/Desktop/test
     egrep '2$' mysampledata.txt
     #+END_SRC

     #+RESULTS:
     : Mark watermellons 12
     : Susy oranges 12
     : Oliver rockmellons 2

     And now each line which contains either 'is' or 'go' or 'or'.

     #+BEGIN_SRC shell :results output
     cd /home/vikky/Desktop/test
     egrep 'or|is|go' mysampledata.txt
     #+END_SRC

     #+RESULTS:
     : Susy oranges 5
     : Susy oranges 5
     : Susy oranges 5
     : Susy oranges 5
     : Terry oranges 9
     : Lisa peaches 7
     : Susy oranges 12
     : Anne mangoes 7

     Maybe we wish to see orders for everyone who's name begins with A - K.

     #+BEGIN_SRC shell :results output
     cd /home/vikky/Desktop/test
     egrep '^[A-K]' mysampledata.txt
     #+END_SRC

     #+RESULTS:
     : Fred apples 20
     : Anne mangoes 7
     : Greg pineapples 3
     : Betty limes 14

*** TODO 11. Piping and Redirection [75%]
    - [X] redirecting to a file
    - [X] saving to an existing file
    - [X] redirecting from a file
    - [ ] redirecting STDERR
    SCHEDULED: <2017-05-10 Wed> DEADLINE: <2017-05-12 Wed 10:35>
    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/test
    ls
    ls >myoutput
    #+END_SRC

    #+RESULTS:
    : 1.txt
    : dir1
    : dir2
    : dir3
    : ex1.txt
    : linuxtutorialwork
    : mysampledata.txt
    : mysampledata.txt~
    : test.txt

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/test
    ls
    #+END_SRC

    #+RESULTS:
    #+begin_example
    1.txt
    dir1
    dir2
    dir3
    ex1.txt
    linuxtutorialwork
    myoutput
    mysampledata.txt
    mysampledata.txt~
    test.txt
#+end_example

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/test
    cat myoutput
    #+END_SRC

    #+RESULTS:
    #+begin_example
    1.txt
    dir1
    dir2
    dir3
    ex1.txt
    linuxtutorialwork
    myoutput
    mysampledata.txt
    mysampledata.txt~
    test.txt
#+end_example

   Saving to an existing file

   #+BEGIN_SRC shell :results output
   cd /home/vikky/Desktop/test
   cat myoutput
   #+END_SRC

   #+RESULTS:
   #+begin_example
   1.txt
   dir1
   dir2
   dir3
   ex1.txt
   linuxtutorialwork
   myoutput
   mysampledata.txt
   mysampledata.txt~
   test.txt
#+end_example

   #+BEGIN_SRC shell :results output
   cd /home/vikky/Desktop/test
   wc -l ex1.txt > myoutput
   cat myoutput
   #+END_SRC

   #+RESULTS:
   : 1 ex1.txt

   #+BEGIN_SRC shell :results output
   cd /home/vikky/Desktop/test
   ls >> myoutput
   cat myoutput
   #+END_SRC

   #+RESULTS:
   #+begin_example
   1 ex1.txt
   1.txt
   dir1
   dir2
   dir3
   ex1.txt
   linuxtutorialwork
   myoutput
   mysampledata.txt
   mysampledata.txt~
   test.txt
#+end_example

   Redirecting from a file

   If we use the less than operator ( < ) then we can send data the
   other way. We will read data from the file and feed it into the
   program via it's STDIN stream.

   #+BEGIN_SRC shell :results output
   cd /home/vikky/Desktop/test
   wc -l myoutput
   wc -l < myoutput
   #+END_SRC

   #+RESULTS:
   : 11 myoutput
   : 11

*** DONE 12. Process Management [100%]
    CLOSED: [2017-05-12 Fri 09:21]
    - [X] top
    - [X] ps [aux]
    - [X] kill

    top

    Top will give you a realtime view of the system and only show the
    number of processes which will fit on the screen.

    #+BEGIN_SRC shell :results output
    top
    #+END_SRC

    :top - 17:55:20 up 13 days, 11:48,  4 users,  load average: 0.04, 0.11, 0.24
    Tasks: 220 total,   1 running, 219 sleeping,   0 stopped,   0 zombie
    %Cpu(s):  1.0 us,  0.5 sy,  0.0 ni, 97.5 id,  0.8 wa,  0.0 hi,  0.2 si,  0.0 st
    KiB Mem:   4095504 total,  3352008 used,   743496 free,    76456 buffers
    KiB Swap:        0 total,        0 used,        0 free.  1141384
    cached Mem

    24506 root      20   0       0      0      0 S   0.0  0.0   0:01.27 kworker/u4:1                                                                               
    24885 vikky     20   0  363884  74928  28772 S   0.0  1.8   0:12.11 chrome                                                                                     
    24927 root      20   0       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0                                                                                
    25010 root      20   0       0      0      0 S   0.0  0.0   0:00.09 kworker/u4:2                                                                               
    25195 root      20   0       0      0      0 S   0.0  0.0   0:00.00 kworker/u4:0                                                                               
    25269 root      20   0    9160   2516   2020 S   0.0  0.1   0:00.00 sshd                                                                                       
    25270 sshd      20   0    9160   1180    664 S   0.0  0.0   0:00.00 sshd                                                                                       
    25684 vikky     20   0   11860   4676    820 S   0.0  0.1   0:00.14 python                                                                                     
    29613 vikky     20   0  789072 188096  17544 S   0.0  4.6
    57:26.27 gnome-shell


    ps [aux]

    ps aux seems to conveniently list all processes and their status

    a = show processes for all users
    u = display the process's user/owner
    x = also show processes not attached to a terminal

    #+BEGIN_SRC shell :results output
    ps aux | grep 'firefox'
    #+END_SRC

    #+RESULTS:
    : vikky    10378  2.3  4.2 1007200 174052 ?      Sl   09:00   0:18 /usr/lib/firefox/firefox

    kill [signal] <PID>

    #+BEGIN_SRC shell :results output
    kill -9 10378
    ps aux | grep 'firefox'
    #+END_SRC

    #+RESULTS:

*** DONE Virtual consoles
    CLOSED: [2017-05-15 Mon 06:52] SCHEDULED: <2017-05-15 Mon> DEADLINE: <2017-05-15 Mon 07:05>

    On rare occasiona, when a process crashed and locks up, it can
    lock up the entire desktop. If this happens there is still hope.

    Linux actually runs several virtual consoles (7). To switch
    between consoles: CTRL + ALT + F<Console>. CTRL + ALT F7 will get
    you back to the GUI.
*** 13. Bash Scripting
.
   #+BEGIN_SRC shell :results output
   cd /home/vikky/Desktop/DVCS/stuff/scripts
   cat myscript.sh
   ls -l myscript.sh
   chmod u+x myscript.sh
   ls -l myscript.sh
   #+END_SRC

   #+RESULTS:
   : #!/bin/bash
   : # A simple demonstration script
   : # Ryan 20/5/2017
   : echo Here are the files in your current directory:
   : ls
   : -rw-rw-r-- 1 vikky vikky 120 May 20 09:52 myscript.sh
   : -rwxrw-r-- 1 vikky vikky 120 May 20 09:52 myscript.sh

   #+BEGIN_SRC shell :results output
   cd /home/vikky/Desktop/DVCS/stuff/scripts
   ./myscript.sh
   #+END_SRC

   #+RESULTS:
   #+begin_example
   Here are the files in your current directory:
   argumente.py
   cata1.py
   cata2.py
   cata3.py
   cata4.py
   cata5.py
   count_the duplicates.py
   ex1.py
   finally.py
   likes.py
   myscript.sh
   mysystem.sh
   script1.sh
   script2.sh
   sort_the_odds.py
   test.txt
   unique_in_order.py
#+end_example

  which <program>

  #+BEGIN_SRC shell :results output
  which bash
  which ls
  #+END_SRC

  #+RESULTS:
  : /bin/bash
  : /bin/ls

  Variables

  $0 - The name of the script.
  $1 - $9 - Any command line arguments given to the script.
  $1 is the first argument, $2 the second and so on.
  $# - How many command line arguments were given to the script.
  $* - All of the command line arguments.

  #+BEGIN_SRC shell :results output
  cd /home/vikky/Desktop/DVCS/stuff/scripts
  cat morevariables.sh
  #+END_SRC

  #+RESULTS:
  : #!/bin/bash
  : # A simple demonstration of variables
  : # Ryan 22/5/2017
  : echo My name is $0 and I have been given $# command line arguments
  : echo Here they are: $*
  : echo And the 2nd command line argument is $2

  #+BEGIN_SRC shell :results output
  cd /home/vikky/Desktop/DVCS/stuff/scripts
  chmod u+x morevariables.sh
  ./morevariables.sh bob fred sally
  #+END_SRC

  #+RESULTS:
  : My name is ./morevariables.sh and I have been given 3 command line arguments
  : Here they are: bob fred sally
  : And the 2nd command line argument is fred

** Linux cURL Command Examples
cURL is a software package which consist of command line tool and a library for transferring data using URL syntax.
1. Download a Single File
The following command will get the content of the URL and display it in the STDOUT (i.e. on your terminal).

$ curl http://www.centos.org

To store the output in a file, you an refirect it as shown below. This will also display some additional download statistics.

$ curl http://www.centos.org > centos-org.html
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 27329    0 27329    0     0   104k      0 --:--:-- --:--:-- --:--:--  167k

2. Save the cURL output to a file

We can save the result of the curl command to a file by using -o/-O options.

-o (lowercase o) the result will be saved in the filename provided in the command line.
-O (uppercase O) the filename in the URL will be taken and it will be used as the filename to store result

$ curl -o mygettext.html http://www.gnu.org/software/gettext/manual/gettext.html

Now the page gettext.html will be saved in the file named 'mygettext.html'. 
When you use curl -O (uppercase O), it will save the content in the file named 'gettext,html' itself in the local machine.

$ curl -O http://www.gnu.org/software/gettext/manual/gettext.html

3. Fetch multiple files at s time

We can download multiple files in a single shot by specifying the URLs on the command line.

$ curl -O URL1 -O URL2

$ curl -O http://www.gnu.org/software/gettext/manual/html_node/index.html -O http://www.gnu.org/software/gettext/manual/gettext.html

3. Pass HTTP authentication in cURL.

Sometime, websites will require a username and password to view the content. With the help of -u option, we can pass those credentials from cURL to the web server as shown below.

$ curl -u username:password URL

** Wget Download

wget utility is the best option to download files from internet. wget can pretty much handle al complex download situations including large file downloads, recursive downloads, non-interactive downloads, multiple file downloads etc.,

1. Download single file with wget

The following example downloads a single file from internet and stores in the current directory.

$ wget http://www.openss7.org/repos/tarballs/strx25-0.9.2.1.tar.bz2

2. Download and store with a different file name using wget -O

By default wget will pick the filename from the last word after last forward slash, which may not be appropriate always.

Wrong: Following example will download and store the file with name: download_script.php?src_id=7701

$ wget http://www.vim.org/scripts/download_script.php?src_id=7701

Even though the downloaded file is in ZIP format, it will get stored in the file as shown bellow.

$ ls
download_script.php?src_id=7701

Correct: To correct this issue, we can specify the output file name using the -O option as:

$ wget -O taglist.zip http://www.vim.org/scripts/download_script.php?src_id=7701

3. Mask User Agent and Display wget like Browser Using wget-user-agent

Some websites can disallow you to download its page by identifying that the user agent is not a browser. So you can mask the user agent by using –user-agent options and show wget like a browser as shown below.

$ wget --user-agent="Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.3) Gecko/2008092416 Firefox/3.0.3" URL-TO-DOWNLOAD
** Bash
***  DONE Common shell programs [100%]
     - [X] Shell types:
       - sh or Bourne Shell;
       - bash or Bourne Again shell;
       - csh or C shell;
       - tcsh or TENEX C shell;
       - ksh or the Korn shell.

     The file /etc/shells gives an overview of known shells on a Linux system:

     #+BEGIN_SRC shell :results output
     cd /home/vikky
     cat /etc/shells
     #+END_SRC

     #+RESULTS:
     : # /etc/shells: valid login shells
     : /bin/sh
     : /bin/dash
     : /bin/bash
     : /bin/rbash

     To switch from one shell to another, just enter the name of the new shell
     inthe active terminal.
*** Executing commands
**** General
     Bash determines the type of program that is to be executed.
     Normal programs are system commands that exist in compiled form on your
     system. When such a program is executed, a new process is created
     because Bash makes an exact copy of itself. This child process has the
     same environment as its parent,only the process ID number is different.
     This procedure is called forking.

     After the forking process, the address space of the child process is
     overwritten with the new process data. This is done through an exec call
     to the system.
**** Exercises
     1. Where is the bash program located on your system?

     The file /etc/shells gives an overview of known shells on a Linux system:

     #+BEGIN_SRC shell :results output
     cat /etc/shells
     #+END_SRC

     #+RESULTS:
     : # /etc/shells: valid login shells
     : /bin/sh
     : /bin/dash
     : /bin/bash
     : /bin/rbash

     Your default shell is set in the /etc/passwd file, like this line
     for  user vikky:

     vikky:x:1001:1001:Vikky:/home/vikky:/bin/bash

     2. Use the --version option to find out which version you are
        running.

	#+BEGIN_SRC shell :results output
	bash --version
	#+END_SRC

	#+RESULTS:
	: GNU bash, version 4.3.11(1)-release (i686-pc-linux-gnu)
	: Copyright (C) 2013 Free Software Foundation, Inc.
	: License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
	:
	: This is free software; you are free to change and redistribute it.
	: There is NO WARRANTY, to the extent permitted by law.

     3. Which shell configuration files are read when you login to
        your system using the graphical user interface and then
        opening a terminal window?

	/etc/profile
	~/.bash_profile
	~/.bashrc

     4. Can you explain why bash does not exit when you type Ctrl+C on
        the command line?

	Because SIGINT is caught and handled properly, so no program
	termination is done.

     5. Display directory stack content.

	The directory stack is a list of recently-visited directories.
	The pushd built-in adds directories to the stack as it
        changes  current directory, and the popd built-in removes
        specified directories from the stack and changes the current
	directory to the directory removed.

	Content can be displayed issuing the dirs command or by
        checking content of the DIRSTACK variable.

	#+BEGIN_SRC shell :results output
	cd /home/vikky/Desktop/test
	ls
	#+END_SRC

	#+RESULTS:
	: dir1
	: dir2
	: dir3

	pushd to dir1

	#+BEGIN_SRC shell :results output
	cd /home/vikky/Desktop/test
	pushd dir1
	dirs
	popd
	#+END_SRC

	#+RESULTS:
	: ~/Desktop/test/dir1 ~/Desktop/test
	: ~/Desktop/test/dir1 ~/Desktop/test
	: ~/Desktop/test

	dirs shows we have 2 directories in the stack: dir1, and
        test. Start popping directories

	And pop again

	#+BEGIN_SRC shell :results output
	cd /home/vikky/Desktop/test
	dirs
	popd
	#+END_SRC

	#+RESULTS:
	: ~/Desktop/test
	: bash: popd: directory stack empty

     6. If it is not yet the case, set your prompt so that it displays
        your location in the file system hierarchy, for instance add
        this line to ~/.bashrc:
	export PS1="\u@\h \w> "

	\u – Username
	\h – Hostname
	\w – Full path of the current working directory

	vikky@antony-ThinkPad ~/Desktop/DVCS/stuff>

     7. Display hashed commands for your current shell session.

	hash command maintains a hash table, which has the used command’s
	path names. When you execute a command, it searches for a command in
	the variable $PATH.
	But if the command is available in the hash table, it picks up from
	there and executes it. Hash table maintains the number of hits
	encountered for each commands used so far in that shell.

	#+BEGIN_SRC shell :results output
	cd /home/vikky/Desktop/test
	ls
	touch test.txt
	hash
	#+END_SRC

	#+RESULTS:
	: dir1
	: dir2
	: dir3
	: hits	command
	:    1	/usr/bin/touch
	:    1	/bin/ls

     8. How many processes are currently running on your system?

	 #+BEGIN_SRC shell :results output
	 ps aux | wc -l
	 #+END_SRC

	 #+RESULTS:
	 : 240

	 ps - process status, information about processes running in memory.

	- The a argument means "show all processes", not just my
	  processes. (There's a bit more to it than that, but this is
	  usually close enough.)
	- The u argument adds "user information" columns to the
	  output. (Try your ps command without the 'u', and you'll see
	  a major difference in the columns that are displayed.)
	- The x lifts the BSD-style "must have a tty" restriction,
	  meaning it will show processes that are not associated with a
	  terminal (tty)>

	 wc - print byte, word, and line counts, count the number of bytes,
	 whitespace-separated words, and newlines in each given FILE, or
	 standard input if none are given or for a FILE of `-'.

	 -l    --lines

         Print only the newline counts.
     9. How to display the system hostname? Only the name, nothing more!

	#+BEGIN_SRC shell :results output
	hostname
	#+END_SRC

	#+RESULTS:
	: antony-ThinkPad
**** Creating and running a script
     An example Bash script: mysystem.sh:

     #+BEGIN_SRC shell :results output
     cat -n mysystem.sh
     #+END_SRC

     #+RESULTS:
     #+begin_example
	  1	#!/bin/bash
	  2	clear
	  3	echo "This is information provided by mysystem.sh.  Program starts now."
	  4
	  5	echo "Hello, $USER"
	  6	echo
	  7
	  8	echo "Today's date is `date`, this is week `date +"%V"`."
	  9	echo
	 10
	 11	echo "These users are currently connected:"
	 12	w | cut -d " " -f 1 - | grep -v USER | sort -u
	 13	echo
	 14
	 15	echo "This is `uname -s` running on a `uname -m` processor."
	 16	echo
	 17
	 18	echo "This is the uptime information:"
	 19	uptime
	 20	echo
	 21
	 22	echo "That's all folks!"
#+end_example
     A script always starts with the same two characters, "#!". After
     that, the shell that will execute the commands following the
     first line is defined. This script starts with clearing the
     screen on line 2. Line 3 makes it print a message, informing the
     user about what is going to happen. Line 5 greets the user. Lines
     6, 9, 13, 16 and 20 are only there for orderly output display
     purposes. Line 8 prints the current date and the number of the
     week. Line 11 is again an informative message, like lines 3, 18
     and 22. Line 12 formats the output of the w; line 15 shows
     operating system and CPU information. Line 19 gives the uptime
     and load information.

     The script should have execute permissions for the correct owners
     in order to be runnable.

     #+BEGIN_SRC shell :results output
     chmod u+x mysystem.sh
     ls -l mysystem.sh
     #+END_SRC

     #+RESULTS:
     : -rwxrw-r-- 1 vikky vikky 423 Mar 14 09:10 mysystem.sh

     #+BEGIN_SRC shell :results output
     bash mysystem.sh
     #+END_SRC

     #+RESULTS:
     #+begin_example
     This is information provided by mysystem.sh.  Program starts now.
     Hello, vikky

     Today's date is Tue Mar 14 10:12:54 EET 2017, this is week 11.

     These users are currently connected:

     vikky

     This is Linux running on a i686 processor.

     This is the uptime information:
      10:12:55 up  1:34,  3 users,  load average: 0.07, 0.18, 0.14

     That's all folks!
#+end_example
**** Debugging Bash scripts
     Debugging on the entire script

     #+BEGIN_SRC shell :results output
     bash -x mysystem.sh
     #+END_SRC

     #+RESULTS:
     #+begin_example
     + clear
     + echo 'This is information provided by mysystem.sh.  Program starts now.'
     This is information provided by mysystem.sh.  Program starts now.
     + echo 'Hello, vikky'
     Hello, vikky
     + echo

     ++ date
     ++ date +%V
     + echo 'Today'\''s date is Wed Mar 15 10:16:51 EET 2017, this is week 11.'
     Today's date is Wed Mar 15 10:16:51 EET 2017, this is week 11.
     + echo

     + echo 'These users are currently connected:'
     These users are currently connected:
     + w
     + grep -v USER
     + cut -d ' ' -f 1 -
     + sort -u

     vikky
     + echo

     ++ uname -s
     ++ uname -m
     + echo 'This is Linux running on a i686 processor.'
     This is Linux running on a i686 processor.
     + echo

     + echo 'This is the uptime information:'
     This is the uptime information:
     + uptime
      10:16:51 up 1 day,  1:38,  3 users,  load average: 0.06, 0.11, 0.13
     + echo

     + echo 'That'\''s all folks!'
     That's all folks!

#+end_example

      Debugging on part(s) of the script

      set -x			# activate debugging from here

      set +x			# stop debugging from here

      #+BEGIN_SRC shell :results output
      bash -x script1.sh
      #+END_SRC

      #+RESULTS:
      #+begin_example
      + echo 'The script starts now.'
      The script starts now.
      + echo 'Hi, vikky!'
      Hi, vikky!
      + echo

      + echo 'I will now fetch you a list of connected users:'
      I will now fetch you a list of connected users:
      + echo

      + w
       09:37:55 up 2 days, 59 min,  3 users,  load average: 0.04, 0.06, 0.13
      USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
      vikky    :0       :0               Tue08   ?xdm?   3:08m  0.36s gdm-session-wo
      vikky    pts/1    :0               Wed06    2:43m  1:54   1:05  gnome-terminal
      vikky    pts/6    :0               Wed10    1.00s  0.13s  1:05  gnome-terminal
      + set +x

      I'm setting two variables now.
      This is a string: black
      And this is a number: 9

      I'm giving you back your prompt now.

      #+end_example
**** Exercises
     1. Write a script using your favorite editor. The script should
        display the path to your homedirectory and the terminal type
        that you are using. Additionally it shows all the services
        started up in runlevel 3 on your system. (hint: use HOME, TERM
        and ls /etc/rc3.d/S*)

	#+BEGIN_SRC shell :results output
	cd /home/vikky/Desktop/DVCS/stuff/scripts
	cat script2.sh
	#+END_SRC

	#+RESULTS:
	#+begin_example
	#!/bin/bash
	clear

	echo "Hello, $USER"
	echo

	echo "Your homedirectory is: $HOME"
	echo

	echo "Your terminal type is: $TERM"
	echo

	echo "These is all the services started up in runlevel 3 on your system:"
	ls /etc/rc3.d/S*
	echo

	echo "That's all..."
#+end_example
     2. Add comments in your script.

	#+BEGIN_SRC shell :results output
	cd /home/vikky/Desktop/DVCS/stuff/scripts
	cat script2.sh
	#+END_SRC

	#+RESULTS:
	#+begin_example
	#!/bin/bash
	clear                                # clear terminal window

	echo "Hello, $USER"                  # dollar sign is used to get content of
	echo                                 # variable

	echo "Your homedirectory is: $HOME"  # show homedirectory
	echo

	echo "Your terminal type is: $TERM"
	echo

	echo "These is all the services started up in runlevel 3 on your system:"
	ls /etc/rc3.d/S*
	echo

	echo "That's all..."
#+end_example
**** Shell initialization files

     /etc/profile

     When invoked interactively with the --login option or when
     invoked as sh, Bash reads the /etc/profile instructions. These
     usually set the shell variables PATH, USER, MAIL, HOSTNAME and
     HISTSIZE.
     All settings that you want to apply to all your users'
     environments should be in this file. It might look like this:

     #+BEGIN_SRC shell :results output
     cd /etc/
     cat profile
     #+END_SRC

     #+RESULTS:
     #+begin_example
     # /etc/profile: system-wide .profile file for the Bourne shell (sh(1))
     # and Bourne compatible shells (bash(1), ksh(1), ash(1), ...).

     if [ "$PS1" ]; then
       if [ "$BASH" ] && [ "$BASH" != "/bin/sh" ]; then
	 # The file bash.bashrc already sets the default PS1.
	 # PS1='\h:\w\$ '
	 if [ -f /etc/bash.bashrc ]; then
	   . /etc/bash.bashrc
	 fi
       else
	 if [ "`id -u`" -eq 0 ]; then
	   PS1='# '
	 else
	   PS1='$ '
	 fi
       fi
     fi

     # The default umask is now handled by pam_umask.
     # See pam_umask(8) and /etc/login.defs.

     if [ -d /etc/profile.d ]; then
       for i in /etc/profile.d/*.sh; do
	 if [ -r $i ]; then
	   . $i
	 fi
       done
       unset i
     fi
#+end_example

     ~/.bashrc

     Today, it is more common to use a non-login shell, for instance
     when logged in graphically using X terminal windows. Upon opening
     such a window, the user does not have to provide a user name or
     password; no authentication is done. Bash searches for ~/.bashrc
     when this happens, so it is referred to in the files read upon
     login as well, which means you don't have to enter the same
     settings in multiple files.

     #+BEGIN_SRC shell :results output
     cd /home/vikky
     cat .bashrc
     #+END_SRC

     #+RESULTS:
     #+begin_example
     # ~/.bashrc: executed by bash(1) for non-login shells.
     # see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
     # for examples

     # If not running interactively, don't do anything
     case $- in
	 *i*) ;;
	   *) return;;
     esac

     # don't put duplicate lines or lines starting with space in the history.
     # See bash(1) for more options
     HISTCONTROL=ignoreboth

     # append to the history file, don't overwrite it
     shopt -s histappend

     # for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
     HISTSIZE=1000
     HISTFILESIZE=2000

     # check the window size after each command and, if necessary,
     # update the values of LINES and COLUMNS.
     shopt -s checkwinsize

     # If set, the pattern "**" used in a pathname expansion context will
     # match all files and zero or more directories and subdirectories.
     #shopt -s globstar

     # make less more friendly for non-text input files, see lesspipe(1)
     [ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

     # set variable identifying the chroot you work in (used in the prompt below)
     if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
	 debian_chroot=$(cat /etc/debian_chroot)
     fi

     # set a fancy prompt (non-color, unless we know we "want" color)
     case "$TERM" in
	 xterm-color) color_prompt=yes;;
     esac

     # uncomment for a colored prompt, if the terminal has the capability; turned
     # off by default to not distract the user: the focus in a terminal window
     # should be on the output of commands, not on the prompt
     #force_color_prompt=yes

     if [ -n "$force_color_prompt" ]; then
	 if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	     # We have color support; assume it's compliant with Ecma-48
	     # (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	     # a case would tend to support setf rather than setaf.)
	     color_prompt=yes
	 else
	     color_prompt=
	 fi
     fi

     if [ "$color_prompt" = yes ]; then
	 PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
     else
	 PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
     fi
     unset color_prompt force_color_prompt

     # If this is an xterm set the title to user@host:dir
     case "$TERM" in
     xterm*|rxvt*)
	 PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
	 ;;
     *)
	 ;;
     esac

     # enable color support of ls and also add handy aliases
     if [ -x /usr/bin/dircolors ]; then
	 test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
	 alias ls='ls --color=auto'
	 #alias dir='dir --color=auto'
	 #alias vdir='vdir --color=auto'

	 alias grep='grep --color=auto'
	 alias fgrep='fgrep --color=auto'
	 alias egrep='egrep --color=auto'
     fi

     # some more ls aliases
     alias ll='ls -alF'
     alias la='ls -A'
     alias l='ls -CF'

     # Add an "alert" alias for long running commands.  Use like so:
     #   sleep 10; alert
     alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

     # Alias definitions.
     # You may want to put all your additions into a separate file like
     # ~/.bash_aliases, instead of adding them here directly.
     # See /usr/share/doc/bash-doc/examples in the bash-doc package.

     if [ -f ~/.bash_aliases ]; then
	 . ~/.bash_aliases
     fi

     # enable programmable completion features (you don't need to enable
     # this, if it's already enabled in /etc/bash.bashrc and /etc/profile
     # sources /etc/bash.bashrc).
     if ! shopt -oq posix; then
       if [ -f /usr/share/bash-completion/bash_completion ]; then
	 . /usr/share/bash-completion/bash_completion
       elif [ -f /etc/bash_completion ]; then
	 . /etc/bash_completion
       fi
     fi
     export TERM=xterm-256color
     export INFOPATH=$INFOPATH:/usr/share/info/
     export INFOPATH=$INFOPATH:/usr/share/info/emacs-25/
     export PS1="\u@\h \w> "
#+end_example
**** Creating variables

     #+BEGIN_SRC shell :results output
     MYVAR1="2"
     echo $MYVAR1
     first_name="Franky"
     echo $first_name
     full_name="Franky M.Singh"
     echo $full_name
     #+END_SRC

     #+RESULTS:
     : 2
     : Franky
     : Franky M.Singh
**** Quoting characters

     #+BEGIN_SRC shell :results output
     date=20021226
     echo $date
     echo \$date
     echo '$date'
     echo "$date"
     echo "`date`"
     echo "I'd say: \"Go for it!\""
     #+END_SRC

     #+RESULTS:
     : 20021226
     : $date
     : $date
     : 20021226
     : Sat Apr 15 09:17:09 EEST 2017
     : I'd say: "Go for it!"

*** DONE Man pages
    CLOSED: [2017-05-11 Thu 09:35]
    A comprehensive source of knowledge /how it works/.
    - in shell just by typing =$ man ls=
    - in ~Emacs~ accessible by [[https://www.emacswiki.org/emacs/ManMode][M-x man]] <Return>command_name<Return>
*** ls

ls - list directory contents

List  information  about  the FILEs (the current directory by default).
       Sort entries alphabetically if none of -cftuSUX nor --sort.

       Mandatory arguments to long options are  mandatory  for  short  options
       too.
-a, --all
              do not hide entries starting with .

       -A, --almost-all
              do not list implied . and ..

       --author
              print the author of each file

       -b, --escape
              print octal escapes for nongraphic characters

       --block-size=SIZE
              use SIZE-byte blocks

       -B, --ignore-backups
              do not list implied entries ending with ~

       -c     with -lt: sort by, and show, ctime (time of last modification of
              file status information) with -l: show ctime and  sort  by  name
              otherwise: sort by ctime

       -C     list entries by columns

  --color[=WHEN]
              control  whether  color is used to distinguish file types.  WHEN
              may be ‘never’, ‘always’, or ‘auto’

       -d, --directory
              list directory entries instead of contents, and do not  derefer-
              ence symbolic links

       -D, --dired
              generate output designed for Emacs’ dired mode

       -f     do not sort, enable -aU, disable -lst

       -F, --classify
              append indicator (one of */=@|) to entries

       --format=WORD
              across  -x, commas -m, horizontal -x, long -l, single-column -1,
              verbose -l, vertical -C

       --full-time
              like -l --time-style=full-iso

       -g     like -l, but do not list owner

       -G, --no-group
              inhibit display of group information

       -h, --human-readable
              print sizes in human readable format (e.g., 1K 234M 2G)

       --si   likewise, but use powers of 1000 not 1024

       -H, --dereference-command-line
              follow symbolic links listed on the command line

       --dereference-command-line-symlink-to-dir
              follow each command line symbolic link

              that points to a directory

       --indicator-style=WORD append indicator with style WORD to entry names:
              none (default), classify (-F), file-type (-p)

       -i, --inode
              print index number of each file

       -I, --ignore=PATTERN
              do not list implied entries matching shell PATTERN

       -k     like --block-size=1K

       -l     use a long listing format

       -L, --dereference
              when showing file information for a symbolic link, show informa-
              tion  for  the file the link references rather than for the link
              itself

       -m     fill width with a comma separated list of entries

       -n, --numeric-uid-gid
              like -l, but list numeric UIDs and GIDs

       -N, --literal
              print raw entry names (don’t treat e.g. control characters  spe-
              cially)

       -o     like -l, but do not list group information

       -p, --file-type
              append indicator (one of /=@|) to entries

       -q, --hide-control-chars
              print ? instead of non graphic characters

       --show-control-chars
              show  non  graphic  characters  as-is (default unless program is
              ‘ls’ and output is a terminal)

       -Q, --quote-name
              enclose entry names in double quotes

       --quoting-style=WORD
              use quoting style WORD for entry names: literal, locale,  shell,
              shell-always, c, escape

       -r, --reverse
              reverse order while sorting

       -R, --recursive
              list subdirectories recursively

       -s, --size
              print size of each file, in blocks

       -S     sort by file size

       --sort=WORD
              extension -X, none -U, size -S, time -t, version -v

              status -c, time -t, atime -u, access -u, use -u

       --time=WORD
              show  time  as WORD instead of modification time: atime, access,
              use, ctime  or  status;  use  specified  time  as  sort  key  if
              --sort=time

       --time-style=STYLE
              show  times  using style STYLE: full-iso, long-iso, iso, locale,
              +FORMAT

              FORMAT is interpreted like ‘date’;  if  FORMAT  is  FORMAT1<new-
              line>FORMAT2, FORMAT1 applies to non-recent files and FORMAT2 to
              recent files; if STYLE is prefixed with  ‘posix-’,  STYLE  takes
              effect only outside the POSIX locale

       -t     sort by modification time

       -T, --tabsize=COLS
              assume tab stops at each COLS instead of 8

       -u     with  -lt:  sort  by, and show, access time with -l: show access
              time and sort by name otherwise: sort by access time

       -U     do not sort; list entries in directory order

       -v     sort by version

       -w, --width=COLS
              assume screen width instead of current value

       -x     list entries by lines instead of by columns

       -X     sort alphabetically by entry extension

       -1     list one file per line

       SELinux options:

       --lcontext
              Display security context.   Enable -l. Lines  will  probably  be
              too wide for most displays.

       -Z, --context
              Display  security context so it fits on most displays.  Displays
              only mode, user, group, security context and file name.

       --scontext
              Display only security context and file name.

       --help display this help and exit

       --version
              output version information and exit

       SIZE may be (or may be an integer optionally followed by) one  of  fol-
       lowing: kB 1000, K 1024, MB 1000*1000, M 1024*1024, and so on for G, T,
       P, E, Z, Y.

       By default, color is not used to distinguish types of files.   That  is
       equivalent to using --color=none.  Using the --color option without the
       optional WHEN argument is equivalent  to  using  --color=always.   With
       --color=auto,  color  codes  are output only if standard output is con-
       nected to a terminal (tty).

Examples:

vikky@antony-ThinkPad:~/Desktop/DVCS/stuff$ ls
app                   HTML5         mywebsite       README.md                        tribute_page.html
bootstrap             microblog     Personal        readme.txt                       vocabulary.org
edu.org               myfirst_blog  portfolio.html  scrapy
flaskr                myfirst_db    Practice        startbootstrap-clean-blog-1.0.3
font-awesome.min.css  MySQL         Probe.txt       surprise.html

vikky@antony-ThinkPad:~/Desktop/DVCS/stuff$ ls -a
.          flaskr                myfirst_blog    Practice                         surprise.html
..         font-awesome.min.css  myfirst_db      Probe.txt                        tribute_page.html
app        .git                  MySQL           README.md                        vocabulary.org
bootstrap  .gitignore            mywebsite       readme.txt
.#edu.org  HTML5                 Personal        scrapy
edu.org    microblog             portfolio.html  startbootstrap-clean-blog-1.0.3

vikky@antony-ThinkPad:~/Desktop/DVCS/stuff$ ls -r
vocabulary.org                   readme.txt      Personal      microblog             #edu.org#
tribute_page.html                README.md       mywebsite     HTML5                 bootstrap
surprise.html                    Probe.txt       MySQL         font-awesome.min.css  app
startbootstrap-clean-blog-1.0.3  Practice        myfirst_db    flaskr
scrapy                           portfolio.html  myfirst_blog  edu.org

vikky@antony-ThinkPad:~/Desktop/DVCS/stuff$ ls -t
#edu.org#                        tribute_page.html  mywebsite             bootstrap  Personal
edu.org                          vocabulary.org     microblog             app        HTML5
scrapy                           portfolio.html     myfirst_blog          Practice   MySQL
startbootstrap-clean-blog-1.0.3  readme.txt         flaskr                Probe.txt
surprise.html                    myfirst_db         font-awesome.min.css  README.md

vikky@antony-ThinkPad:~/Desktop/DVCS/stuff$ ls -tr
MySQL      Probe.txt  font-awesome.min.css  mywebsite       vocabulary.org                   scrapy
HTML5      Practice   flaskr                myfirst_db      tribute_page.html                edu.org
Personal   app        myfirst_blog          readme.txt      surprise.html                    #edu.org#
README.md  bootstrap  microblog             portfolio.html  startbootstrap-clean-blog-1.0.3

*** Shell source code execution

#+BEGIN_SRC sh
ls -tr
#+END_SRC

#+RESULTS:
| MySQL                           |
| HTML5                           |
| Personal                        |
| README.md                       |
| Probe.txt                       |
| Practice                        |
| app                             |
| bootstrap                       |
| font-awesome.min.css            |
| flaskr                          |
| myfirst_blog                    |
| microblog                       |
| mywebsite                       |
| myfirst_db                      |
| readme.txt                      |
| portfolio.html                  |
| tribute_page.html               |
| surprise.html                   |
| startbootstrap-clean-blog-1.0.3 |
| vocabulary.org                  |
| test.org~                       |
| #test.org#                      |
| schedule.org~                   |
| pluralsight_test.py             |
| edu.org                         |
| BASH                            |
| scrapy                          |
| splinter                        |

ls  -l     use a long listing format

#+BEGIN_SRC  sh
ls -l /home/vikky/
#+END_SRC

#+RESULTS:
| total      | 3022740 |       |        |              |     |    |       |                             |
| -rw-rw-r-- |       1 | vikky | vikky  |           17 | Dec | 15 | 09:51 | 1.txt                       |
| -rw-rw-r-- |       1 | vikky | vikky  |           10 | Dec | 15 | 09:51 | 1.txt~                      |
| -rw-rw-r-- |       1 | vikky | vikky  |          202 | Nov | 20 | 13:10 | adding.py                   |

ls -lh

#+BEGIN_SRC sh
ls -lh /home/vikky/
#+END_SRC

#+RESULTS:
| total      | 2.9G |       |        |      |     |    |       |                             |
| -rw-rw-r-- |    1 | vikky | vikky  | 17   | Dec | 15 | 09:51 | 1.txt                       |
| -rw-rw-r-- |    1 | vikky | vikky  | 10   | Dec | 15 | 09:51 | 1.txt~                      |
| -rw-rw-r-- |    1 | vikky | vikky  | 202  | Nov | 20 | 13:10 | adding.py                   |

ls -ld

#+BEGIN_SRC sh
ls -ld ~
#+END_SRC

#+RESULTS:
: drwxr-xr-x 48 vikky vikky 4096 Feb  2 07:32 /home/vikky

*** cd
The cd command, which stands for "change directory", changes the shell's current working directory.

Representing The Root Directory

The root directory itself is represented by a single slash ("/").
To change into the root directory, making it our working directory, we would use the command:

cd /

Representing The Working Directory

The current directory, regardless of which directory it is, is represented by a single dot (".").

cd .

Representing The Parent Directory

cd ..

Representing Your Home Directory

cd ~

Related commands

pwd — Print the name of the working directory.
ln — Create a link, or a symbolic link, to a file or directory.
mkdir — Create a directory.
rmdir — Remove a directory.

Examples:

vikky@antony-ThinkPad:~/Desktop/DVCS/stuff$ pwd
/home/vikky/Desktop/DVCS/stuff

vikky@antony-ThinkPad:~/Desktop/DVCS/stuff$ cd /home
vikky@antony-ThinkPad:/home$ 

vikky@antony-ThinkPad:/home$ cd /usr/local/bin/
vikky@antony-ThinkPad:/usr/local/bin$ 

vikky@antony-ThinkPad:/usr/local/bin$ cd /usr/
vikky@antony-ThinkPad:/usr$ 

vikky@antony-ThinkPad:/usr$ cd
vikky@antony-ThinkPad:~$ 

*** touch
The touch command is the easiest way to create new, empty files. It is also used to change the timestamps (i.e., dates and times of the most recent access and modification) on existing files and directories.

touch's syntax is

touch [option] file_name(s)

When used without any options, touch creates new files for any file names that are provided as arguments (i.e., input data) if files with such names do not already exist. Touch can create any number of files simultaneously.

Thus, for example, the following command would create three new, empty files named file1, file2 and file3:

touch file1 file2 file3
*** mkdir
Short for "make directory", mkdir is used to create directories on a file system.
If the specified DIRECTORY does not already exist, mkdir creates it.
More than one DIRECTORY may be specified when calling mkdir.

mkdir syntax

mkdir [OPTION ...] DIRECTORY ...

mkdir examples

mkdir mydir
Creates a new directory called mydir whose parent is the current directory.

mkdir -m a=rwx mydir
Create the mydir directory, and set its permissions such that all users may read, write, and execute the contents.

mkdir -p /home/chope/a/b/c
Creates the directory /home/chope/a/b/c. If the parent directory /home/chope/a/b does not already exist, mkdir will create that directory first.
Related commands

rmdir — Remove a directory.

rmdir mydir/subdir/level3 - Remove directory if it not empty

*** cat 

The cat command is considered as one of the most frequently used commands on Linux or UNIX like operating systems.

It can be used for the following purposes under UNIX or Linux:

Display text files on screen.
Copy text files.
Combine text files.
Create new text files.

cat command Syntax

The syntax is as follows:

cat filename
cat options filename
cat file1 file2
cat file1 file2 > newcombinedfile


Displaying The Contents of Files

To read or read the contents of files, enter:
$ cat /etc/passwd

The above command will display the contents of a file named /etc/passwd. By default cat will send output to the monitor screen. But, you can redirect from the screen to another command or file using redirection operator as follows:
$ cat /etc/passwd > /tmp/test.txt

In the above example, the output from cat command is written to /tmp/text.txt file instead of being displayed on the monitor screen. You can view /tmp/text.txt using cat command itself:
$ cat /tmp/test.txt

Concatenate files

Concatenation means putting multiple file contents together. The original file or files are not modified or deleted. In this example, cat will concatenate copies of the contents of the three files /etc/hosts, /etc/resolv.conf, and /etc/fstab:
$ cat /etc/hosts /etc/resolv.conf /etc/fstab

You can redirect the output as follows using shell standard output redirection:
$ cat /etc/hosts /etc/resolv.conf /etc/fstab > /tmp/outputs.txt
$ cat /tmp/outputs.txt

How Do I Create a File?

You can use cat command for file creation. To create a file called foo.txt, enter:
$ cat > foo.txt

To save and exit press the CONTROL and d keys (CTRL+D). Please note that if a file named foo.txt already exists, it will be overwritten. You can append the output to the same file using >> operator:
$ cat >> bar.txt

*** ln

ln creates links between files.

link file1.txt file2.txt

Now both file1.txt and file2.txt point to the same data on the disk:

$ cat file1.txt
This is a file.

$ cat file2.txt
This is a file.

*** grep

    grep, which stands for "global regular expression print,"
    processes text line by line and prints any lines which match a
    specified pattern.

    grep syntax

    grep [OPTIONS] PATTERN [FILE...]

    #+BEGIN_SRC shell :results output
    grep "our products" test.txt
    #+END_SRC

    #+RESULTS:
    : You will find that all of our products are impeccably designed
    : and meet the highest manufactoring standarts available.

    Viewing in color and line numbers of successful matches

    #+BEGIN_SRC shell :results output
    grep --color -n "our products" test.txt
    #+END_SRC

    #+RESULTS:
    : 1:You will find that all of our products are impeccably designed
    : and meet the highest manufactoring standarts available.

    Performing case-insensitive grep searches

    #+BEGIN_SRC shell :results output
    grep --color -n -i "our products" test.txt
    #+END_SRC

    #+RESULTS:
    : 1:You will find that all of our products are impeccably designed
    : and meet the highest manufactoring standarts available.
    : 2:Our products are manufactored using only 
    

*** Symbolic link creating example

#+BEGIN_SRC shell :results output
cd /home/vikky/Desktop/files/
touch file1.txt
echo "This is a test file." > file1.txt
cat file1.txt
#+END_SRC

#+RESULTS:
: This is a test file.


#+BEGIN_SRC shell :results output
cd /home/vikky/Desktop/files/
ls
#+END_SRC

#+RESULTS:
: file1.txt

#+BEGIN_SRC shell :results output
cd /home/vikky/Desktop/files/
mv file1.txt /home/vikky/Desktop/Projects/
ls /home/vikky/Desktop/Projects/
#+END_SRC

#+RESULTS:
: file1.txt

#+BEGIN_SRC shell :result output
cd /home/vikky/Desktop/files/
ln -s /home/vikky/Desktop/Projects/file1.txt -T ./file1.txt
#+END_SRC

#+BEGIN_SRC shell :result output
cd /home/vikky/Desktop/files/
ls
cat file1.txt
#+END_SRC

#+RESULTS:
| file1.txt |    |   |      |       |
| This      | is | a | test | file. |

*** tree
    tree - list contents of directories in a tree-like format.

    Displays a tree without anything beginning with example or
    containing 'bin' or 'lib' as specified in the patern.
    #+BEGIN_SRC shell :results output
    tree -I 'example*|bin|lib'
    #+END_SRC

    With a uppercase "P" you can list files with a pattern. This
    pattern example displays a tree only containing directories
    beginning with t or directories containing files that begin with
    t.

    #+BEGIN_SRC shell :results output
    tree -P 't*'
    #+END_SRC

    With a lowercase "p" you can list a tree that also shows the file
    permissions.

    #+BEGIN_SRC shell :results output
    tree -p
    #+END_SRC
    
*** TODO Access permissions [33%] 				      :STUDY:
    - [X] ls reviseted ls -l and more options
      - [X] file permissions the mode
      - [X] directory permissions the mode
    - [ ] special permissions Root, Sudo and extra permissions
    - [X] users and groups
    - [ ] changing permissions chmod, chown and chgrp
    - [ ] managing users useradd, usermode, userdel, passwd
    - [ ] managing groups groupadd and groupdel
**** ls reviseted ls l and more option (viewing permisssions)
     Use the ls -l option to view the permissions

     To see the permission setting for a file, we can use the ls command as follows:

     #+BEGIN_SRC shell :result output
     cd /home/vikky/boot
     ls -l tribute_page.html  
     #+END_SRC

     #+RESULTS:
     : -rw-rw-r-- 1 vikky vikky 9869 Nov 23 16:37 tribute_page.html

     We can determine a lot from examining the results of this command:
     * The first character identifies the file type. If it is a dash (-) then it is a normal file. If it is a "d" then it is a directory.
     * The file "tribute_page.html" is owned by user "vikky"
     * User "vikky" has the right to read and write this file
     * The file is owned by the group "vikky"
     * Members of the group "vikky" can also read and write this file
     * Everybody else can read this file

     
     #+BEGIN_SRC shell :result output
     
     #+END_SRC
       
     Linux permissions dictate 3 things you may do with a file: read, write and execute. They are referred to in Linux by a single letter each.
     * r read - you may view the contents of the file.
     * w write - you may change the contents of the file.
     * x execute - you may execute or run the file if it is a program or script

**** Users and groups

     For every file we define 3 sets of people for whom we may specify permissions.
     
     * owner - a single person who owns the file. (typically the person who created the file but ownership may be granted to some one by certain users)
     * group - every file belongs to a single group.
     * others - everyone else who is not in the group or the owner.
       
     #+BEGIN_SRC shell :result output
     cd /home/vikky/boot
     ls -l tribute_page.html  
     #+END_SRC

     #+RESULTS:
     : -rw-rw-r-- 1 vikky vikky 9869 Nov 23 16:37 tribute_page.html  
     
     In the above example the first 10 characters of the output are what we look at to identify permissions:
     * In this case the first character "-" identifies the file type.
     * The following 3 characters represent the permissions for owner. A letter represents the presence of a permission and a dash (-) represent the absence of a permission. In this example the owner has permissions to read and write but not execute.
     * The following 3 characters represent the permissions for the group. In this example the group has the ability to read and write but not execute.
     * Finally the last 3 characters represent the permissions for others (or everyone else). In this example they have the read permission and nothing else.

**** Change permissions (chmod command)
    To change permissions on a file or directory we use a command called chmod. 

    chmod [permissions] [path]

    chmod has permission arguments that are made up of 3 components:
    - Who are we changing the permission for? (user or owner, group, others, all)
    - Are we granting or revoking the permission - indicated with either a plus (+) or minus (-)
    - Which permission are we setting? -read(r), write(w) or execute (x)

Let's grant the execute permissions to the group. 

#+BEGIN_SRC shell :result output
cd /home/vikky/Desktop/test
ls -l images.jpg
#+END_SRC

#+RESULTS:
: -rw-rw-r-- 1 vikky vikky 22775 Feb 25  2016 images.jpg

#+BEGIN_SRC shell :result output 
cd /home/vikky/Desktop/test
chmod g+x images.jpg
ls -l images.jpg
#+END_SRC

#+RESULTS:
: -rw-rwxr-- 1 vikky vikky 22775 Feb 25  2016 images.jpg

Let's remove the write permission for the owner:

#+BEGIN_SRC shell :result output
cd /home/vikky/Desktop/test
chmod u-w images.jpg
ls -l images.jpg
#+END_SRC

#+RESULTS:
: -r--rwxr-- 1 vikky vikky 22775 Feb 25  2016 images.jpg

We also can assign multiple permissions at once:

#+BEGIN_SRC shell :result output
cd /home/vikky/Desktop/test
chmod u+wx images.jpg
ls -l images.jpg
#+END_SRC

#+RESULTS:
: -rwxrwxr-- 1 vikky vikky 22775 Feb 25  2016 images.jpg

#+BEGIN_SRC shell :result output
cd /home/vikky/Desktop/test
chmod ug-x images.jpg
ls -l images.jpg
#+END_SRC

#+RESULTS:
: -rw-rw-r-- 1 vikky vikky 22775 Feb 25  2016 images.jpg
  
* Software development

** Testing

*** Definition

*** Types

*** Appropriate usage

*** Python implementation

**** Unittest

     square.py:

     #+BEGIN_SRC python :results output
     def square(x):
         """Return the square of x.

	 >>> square(2)
	 4
	 >>> square(-2)
	 4
	 >>> square(2.0)
	 4
	 >>> square(-2.0)
	 4
	 >>> square(1j)
	 (-1 + 0j)

	 """
	 return x * x
     #+END_SRC

     square_test.py:

     #+BEGIN_SRC python :results output
     import unittest
     from square import square


     class SquareTest(unittest.TestCase):
         def test(self):
             self.assertEqual(square(2), 4)

     class Square_negativeTest(unittest.TestCase):
         def test_negative(self):
             self.assertEqual(square(-2), 4)
     #+END_SRC
    
**** Pytest

**** Nose

**** Doctest

** Python

*** Installing Python Packages

**** DONE Requirements for installing packages
     CLOSED: [2017-05-10 Wed 15:56] SCHEDULED: <2017-05-10 Wed> DEADLINE: <2017-05-10 Wed 13:56>

     If you have Python 2 >=2.7.9 or Python 3 >=3.4 you will already
     have pip and setuptools, but will be need to upgrade to the latest
     version:

     On Linux:

     #+BEGIN_SRC shell :results output
     pip install -U pip setuptools
     #+END_SRC

**** DONE Creating virtual environments
     CLOSED: [2017-05-12 Fri 15:51] SCHEDULED: <2017-05-12 Fri> DEADLINE: <2017-05-12 Fri 16:10>

     Python “Virtual Environments” allow Python packages to be
     installed in an isolated location for a particular application, rather
     than being installed globally.

     The basic usage is like so:
     Using virtualenv:

     #+BEGIN_SRC shell :results output
     virtualenv <DIR>
     source <DIR>/bin/activate
     #+END_SRC

     Using venv:

     #+BEGIN_SRC shell :results output
     python3 -m venv <DIR>
     source <DIR>/bin/activate
     #+END_SRC

     Example:

     #+BEGIN_SRC shell :results output
     cd /home/vikky/Desktop/soft
     python3 -m venv venv
     source venv/bin/activate
     #+END_SRC

     #+RESULT:
     : (venv) vikky@antony-ThinkPad ~/Desktop/soft> python --version
     : Python 3.4.3

**** DONE Use pip for installing
     CLOSED: [2017-05-14 Sun 09:36] SCHEDULED: <2017-05-14 Sun> DEADLINE: <2017-05-14 Sun 09:39>

     pip is the recommended installer. The most common usage of pip is
     to install from the Python Package Index using a requirement
     specifier.

     To install the latest version of “SomeProject”:

     #+BEGIN_SRC shell :results output
     pip install 'SomeProject'
     #+END_SRC

     To install a specific version:

     #+BEGIN_SRC shell :results output
     pip install 'SomeProject==1.4'
     #+END_SRC

     To install greater than or equal to one version and less than
     another:

     #+BEGIN_SRC shell :results output
     pip install 'SomeProject>=1,<2'
     #+END_SRC

     To install a version that's 'compatible' with a certain version:

     #+BEGIN_SRC shell :results output
     pip install 'Some project~=1.4.2'
     #+END_SRC

     In this case, this means to install any version “==1.4.*” version
     that’s also “>=1.4.2”.

**** DONE Source distributions vs Wheels
     CLOSED: [2017-05-16 Tue 06:57] SCHEDULED: <2017-05-16 Tue> DEADLINE: <2017-05-16 Tue 07:05>
     pip can install from either Source Distributions (sdist) or
     Wheels, but if both are present PyPI, pip will prefer a compatible
     wheel.

     Wheels are pre-built distributions format that provides faster
     installation compared to Source Distributions (sdist), especially
     when a project contains complied extensions.

     If pip does not find a wheel to install, it will locally build a
     wheel and cache it for future installs, instead of rebuilding the
     source distribution in the future.

**** DONE Upgrading packages
     CLOSED: [2017-05-16 Tue 07:03]
     Upgrade an already installed SomeProject to the latest from PyPI.

     #+BEGIN_SRC shell :results output
     pip install --upgrade SomeProject
     #+END_SRC
**** DONE Installing to the User Site
     CLOSED: [2017-05-17 Wed 07:26] SCHEDULED: <2017-05-17 Wed> DEADLINE: <2017-05-17 Wed 07:35>
     To install packages that are isolated to the current user:
     #+BEGIN_SRC python :results output
     pip install --upgrade SomeProject
     #+END_SRC
**** DONE Uninstalling packages, listing packages
     CLOSED: [2017-05-18 Thu 09:39] SCHEDULED: <2017-05-18 Thu> DEADLINE: <2017-05-18 Thu 09:35>
     pip is able to uninstall most packages

     #+BEGIN_SRC shell :results output
     pip uninstall SomePackage
     #+END_SRC

     To list installed packages:

     #+BEGIN_SRC shell :results output
     cd /home/vikky/Desktop/soft/
     pip list
     #+END_SRC

     #+RESULTS:
     #+begin_example
     argparse (1.1)
     autopy (0.51)
     beautifulsoup4 (4.6.0)
     cssselect (1.0.1)
     linecache2 (1.0.0)
     lxml (3.7.3)
     pip (1.5.4)
     pyquery (1.2.17)
     PySide (1.2.4)
     setuptools (3.3)
     six (1.10.0)
     spynner (2.17.dev0)
     traceback2 (1.4.0)
     unittest2 (1.1.0)
 #+end_example

     To list outdates packages, and show the latest version available:

     #+BEGIN_SRC shell :results output
     cd /home/vikky/Desktop/soft/
     pip list --outdated
     #+END_SRC

     #+RESULTS:
     : spynner (Current: 2.17.dev0 Latest: 2.19)
     : argparse (Current: 1.1 Latest: 1.4.0)
     : setuptools (Current: 3.3 Latest: 35.0.2)
     : pip (Current: 1.5.4 Latest: 9.0.1)

     To show details about an installed package:

     #+BEGIN_SRC shell :results output
     pip show sphinx
     #+END_SRC
**** DONE Searching for Packages
     CLOSED: [2017-05-19 Fri 09:37] SCHEDULED: <2017-05-19 Fri> DEADLINE: <2017-05-19 Fri>

     pip can search PyPi for packages using the pip search command:

     #+BEGIN_SRC shell :results output
     pip seatch "query"
     #+END_SRC
*** Learning Python - Official Documentation                          :STUDY:

**** 1. Whetting Your Appetite 
**** 2. Using the Python Interpreter
***** DONE 2.1. Invoking the Interpreter
      The Python interpreter is usually installed as /usr/local/bin/python on
      those machines where it is available; putting /usr/local/bin in your Unix
      shell’s search path makes it possible to start it by typing the command

      python

      to the shell.

      Typing an end-of-file character (Control-D on Unix, Control-Z on Windows) atthe primary prompt causes the interpreter to exit with a zero exit status.
      If that doesn’t work, you can exit the interpreter by typing the following
      command: quit().

****** 2.1.1. Argument Passing 
****** DONE 2.1.2. Interactive Mode 

      In interactive mode it prompts for the next command with the primary prompt, usually three greater-than signs (>>>); for continuation lines it prompts with the secondary prompt, by default three dots (...). The interpreter print a welcome message stating its version number and a copyright notice before printing the first prompt:

 python
 Python 2.7 (#1, Feb 28 2010, 00:02:06)
 Type "help", "copyright", "credits" or "license" for more information.
 >>>

 Continuation lines are needed when entering a multi-line construct. As an
 example, take a look at this if statement:

 >>> the_world_is_flat = 1
 >>> if the_world_is_flat:
 ...     print "Be careful not to fall off!"
 ...
 Be careful not to fall off!

***** 2.2. The Interpreter and Its Environment

****** 2.2.1. Source Code Encoding 
      
**** 3. An Informal Introduction to Python
***** 3.1. Using Python as a Calculator
      Variables
      variables seen as containers As the name implies, a variable is somethig
      which can change. A variable is a way of referring to a memory location
      used by a computer program. Avariable is a symbolic name for this
      physical location. This memory locationcontains values, like numbers,
      text or more complicated types.
      A variable can be seen as a container (or some say a pigeonhole) to
      store certain values. While the program is running, variables are access
      ed and  changed, i.e. a new value will be assigned to the variable.
      Declaration of variables is not required in Python. If there is need of
      a variable, you think of a name and start using it as a variable. 
      Another remarkable aspect of Python: Not only the value of a variable
      may change during program execution but the type as well. You can assign
      an integer value to a variable, use it as an integer for a while and
      then assigna string to the variable.
      In the following line of code, we assign the value 42 to a variable and
      we will increase the value of this variable by 1:
      #+BEGIN_SRC python :results output
      i = 42
      i = i +1
      print i
      #+END_SRC

      #+RESULTS:
      : 43

****** 3.1.1. Numbers 
****** 3.1.2. Strings
       Python String min() method
       The method min() returns the min alphabetical
       character from the string str.

       min(str)

       #+BEGIN_SRC python :results output
       str = "this-is-real-string-example....wow!!!"
       print "Min character: " + min(str)
       #+END_SRC

       #+RESULTS:
       : Min character: !

       Python join() method

       The method join() returns a string in which the string elements
       of sequence have been joined by str separator.

       Syntax

       str.join(sequence)

       sequence - sequence of the elements to be joined.

       #+BEGIN_SRC python :results output
       s = "-"
       seq = ("a", "b", "c")
       print s.join(seq)
       #+END_SRC

       #+RESULTS:
       : a-b-c

****** 3.1.3. Unicode Strings 
****** 3.1.4. Lists 

***** 3.2. First Steps Towards Programming
     
****** Structuring with indentation
	Most programming languages use certain characters of keywords to group
	statements:

	- begin ... end
	- do ... done
	- { ... }
	- if ... fi
      
	Python uses a different principle. Programs get structured through
	indentation, this means that code blocks are defined by their
	indentation. This principle makes it easier to read and understand
	other people's Python code.
	So, how does it work? All statements with the same distance to the rigt
	belong to the same block of code, i.e. the statements within a block li
	ne up vertically. The block ends at a line less indented or the end of
	the file. If a block has to be more deeply nested, it is simply indente
	d further to the right.

**** 4. More Control Flow Tools

***** 4.1. if Statements 
***** 4.2. for Statements 
***** 4.3. The range() Function 
***** 4.4. break and continue Statements, and else Clauses on Loops 
***** 4.5. pass Statements 
***** 4.6. Defining Functions 
***** 4.7. More on Defining Functions

****** 4.7.1. Default Argument Values 
****** 4.7.2. Keyword Arguments 
****** 4.7.3. Arbitrary Argument Lists 
****** 4.7.4. Unpacking Argument Lists 
****** 4.7.5. Lambda Expressions 
****** 4.7.6. Documentation Strings 

***** 4.8. Intermezzo: Coding Style 

**** 5. Data Structures

***** 5.1. More on Lists

****** 5.1.1. Using Lists as Stacks 
****** 5.1.2. Using Lists as Queues 
****** 5.1.3. Functional Programming Tools 
****** 5.1.4. List Comprehensions

******* 5.1.4.1. Nested List Comprehensions 

***** 5.2. The del statement 
***** 5.3. Tuples and Sequences 
***** 5.4. Sets 
***** 5.5. Dictionaries 
***** 5.6. Looping Techniques 
***** 5.7. More on Conditions 
***** 5.8. Comparing Sequences and Other Types 

**** 6. Modules

***** 6.1. More on Modules

****** 6.1.1. Executing modules as scripts 
****** 6.1.2. The Module Search Path 
****** 6.1.3. “Compiled” Python files 

***** 6.2. Standard Modules 
***** 6.3. The dir() Function 
***** 6.4. Packages

****** 6.4.1. Importing****** From a Package 
****** 6.4.2. Intra-package References 
****** 6.4.3. Packages in Multiple Directories 

**** 7. Input and Output

***** 7.1. Fancier Output Formatting

****** 7.1.1. Old string formatting 

***** 7.2. Reading and Writing Files

****** 7.2.1. Methods of File Objects 
****** 7.2.2. Saving structured data with json 

**** 8. Errors and Exceptions

***** 8.1. Syntax Errors 
***** 8.2. Exceptions
      Assertions in Python

      The syntax for assert is:

      assert Expression[, Argument]

      Example 1:

      #+BEGIN_SRC python :results output :session test
      def KelvinToFahrenheit(Temperature):
         assert (Temperature >= 0),"Colder than absolute zero!"
	 return ((Temperature-273)*1.8)+32

      print KelvinToFahrenheit(273)
      print int(KelvinToFahrenheit(505.78))
      #+END_SRC

      #+RESULTS:
      :
      : ... ... >>> 32.0
      : 451

      #+BEGIN_SRC python :results output :session test
      print KelvinToFahrenheit(-5)
      #+END_SRC

      #+RESULTS:
      : Traceback (most recent call last):
      :   File "<stdin>", line 1, in <module>
      :   File "<stdin>", line 2, in KelvinToFahrenheit
      : AssertionError: Colder than absolute zero!

***** 8.3. Handling Exceptions 
***** 8.4. Raising Exceptions 
***** 8.5. User-defined Exceptions 
***** 8.6. Defining Clean-up Actions 
***** 8.7. Predefined Clean-up Actions 

**** 9. Classes

***** 9.1. A Word About Names and Objects 
***** 9.2. Python Scopes and Namespaces 
***** 9.3. A First Look at Classes

****** 9.3.1. Class Definition Syntax 
****** 9.3.2. Class Objects 
****** 9.3.3. Instance Objects 
****** 9.3.4. Method Objects 
****** 9.3.5. Class and Instance Variables 

***** 9.4. Random Remarks 
***** 9.5. Inheritance

****** 9.5.1. Multiple Inheritance 

***** 9.6. Private Variables and Class-local References 
***** 9.7. Odds and Ends 
***** 9.8. Exceptions Are Classes Too 
***** 9.9. Iterators 
***** 9.10. Generators 
***** 9.11. Generator Expressions 

**** 10. Brief Tour of the Standard Library

***** DONE 10.1. Operating System Interface
      CLOSED: [2017-05-07 Sun 10:04] DEADLINE: <2017-05-07 Sun 10:00> SCHEDULED: <2017-05-07 Sun>

      #+BEGIN_SRC python :results output
      import os
      # Return the current working directory
      os.getcwd()
      # Change current working directory
      os.chdir('/server/accesslogs')
      # Run the command mkdir in the system shell
      os.system('mkdir today')
      #+END_SRC

      The built-in dir() and help() functions are useful as
      interactive aids for working with large modules like os:

      #+BEGIN_SRC python :results output
      import os
      dir(os)
      help(os)
      #+END_SRC

      #+RESULTS:
      : <returns a list of all module functions>
      : <returns an extensive manual page created from the module's docstrings>

      #+BEGIN_SRC python :results output
      import shutil
      shutil.copyfile('1.txt', '3.txt')
      shutil.move('1.txt', '/home/vikky/Desktop/test/')
      #+END_SRC

      #+RESULTS:

      #+BEGIN_SRC shell :results output
      pwd
      ls
      #+END_SRC

      #+RESULTS:
      #+begin_example
      /home/vikky/Desktop/DVCS/stuff
      1.py
      1.txt
      2.txt
      3.txt
 #+end_example

      #+BEGIN_SRC shell :results output
      cd /home/vikky/Desktop/test
      ls
      #+END_SRC

      #+RESULTS:
      : 1.txt
      : dir1
      : dir2
      : dir3
      : ex1.txt
      : linuxtutorialwork
      : mysampledata.txt
      : mysampledata.txt~
      : test.txt


***** DONE 10.2. File Wildcards
      CLOSED: [2017-05-08 Mon 10:28] SCHEDULED: <2017-05-08 Mon> DEADLINE: <2017-05-08 Mon 10:45>

      The glob module provides a function for making file lists from directory
      wildcard searches:

      #+BEGIN_SRC python :results output
      import glob
      print glob.glob('*.py')
      #+END_SRC

      #+RESULTS:
      : ['pluralsight_test.py',
      : 'Account.py', 'city_generator.py', 'a.py', 'test.py',
      : 'fibonacci.py', 'b.py', '1.py', 'function1.py', 'hello_class.py',
      : 'pluralsight_first_link.py']

***** DONE 10.3. Command Line Arguments
      CLOSED: [2017-05-08 Mon 10:57] DEADLINE: <2017-05-08 Mon 10:40> SCHEDULED: <2017-05-08 Mon>
      Common utility scripts often need to process command line
      arguments. These arguments are stored in the sys module’s argv
      attribute as a list.

      #+BEGIN_SRC shell :results output
      python demo.py This is a command line arguments
      #+END_SRC

      #+RESULTS:
      : demo.py
      : This
      : is
      : a
      : command
      : line
      : arguments

***** DONE 10.4. Error Output Redirection and Program Termination
      CLOSED: [2017-05-09 Tue 09:15] DEADLINE: <2017-05-09 Tue 09:20> SCHEDULED: <2017-05-09 Tue>

      #+BEGIN_SRC python :results output
      import sys
      sys.stderr.write('Warning, log file not found starting a new one\n')
      #+END_SRC

      #+RESULTS:
      : Warning, log file not found starting a new one

***** DONE 10.5. String Pattern Matching
      CLOSED: [2017-05-09 Tue 09:48] DEADLINE: <2017-05-09 Tue 09:56> SCHEDULED: <2017-05-09 Tue>

      #+BEGIN_SRC python :results output
      import re
      print re.findall(r'\bf[a-z]*', 'which foot or hand fell fastest')
      print re.sub(r'(\b[a-z]+) \1', r'\1', 'cat in the the hat')
      #+END_SRC

      #+RESULTS:
      : ['foot', 'fell', 'fastest']
      : cat in the hat

      When only simple capabilities are needed, string methods are preferred
      because they are easier to read and debug:

      #+BEGIN_SRC python :results output
      print 'tea for too'.replace('too', 'two')
      #+END_SRC

      #+RESULTS:
      : tea for two


***** DONE 10.6. Mathematics
      CLOSED: [2017-05-10 Wed 09:57] SCHEDULED: <2017-05-10 Wed> DEADLINE: <2017-05-10 Wed 10:05>
      The math module gives access to the underlying C library functions for
      floating point math:

      #+BEGIN_SRC python :results output
      import math
      print math.cos(math.pi / 4.0)
      print math.log(1024, 2)
      #+END_SRC

      #+RESULTS:
      : 0.707106781187
      : 10.0

      The random module provides tools for making random selections:

      #+BEGIN_SRC python :results output
      import random
      print random.choice(['apple', 'pear', 'banana'])
      print random.sample(xrange(100), 10)
      print random.random()
      print random.randrange(6)
      #+END_SRC

      #+RESULTS:
      : pear
      : [68, 17, 88, 55, 20, 18, 70, 4, 30, 58]
      : 0.494588093375
      : 1

***** DONE 10.7. Internet Access
      CLOSED: [2017-05-11 Thu 08:22] SCHEDULED: <2017-05-11 Thu> DEADLINE: <2017-05-11 Thu 08:20>
      There are a number of modules for accessing the internet and
      processing internet protocols. Two of the simplest are urllib2
      for retrieving data from URLs and smtplib for sending mail:

      #+BEGIN_SRC python :results output
      import urllib2
      for line in urllib2.urlopen('http://tycho.usno.navy.mil/cgi-bin/timer.pl'):
          if 'EST' in line or 'EDT' in line:
	      print line
      #+END_SRC

      #+RESULTS:
      : <BR>May. 11, 01:08:55 AM EDT		Eastern Time
      :

      #+BEGIN_SRC python :results output
      import urllib2
      response = urllib2.urlopen('http://python.org/')
      print "The URL is: ", response.geturl()
      #+END_SRC

      #+RESULTS:
      : The URL is:  https://www.python.org/

      The urllib module in Python 3 allows you access websites via your
      program. urllib in Python 3 is slightly different than urllib2 in
      Python2. Through urllib, you can access websites, download data,
      parse data, modify your headers, and do any GET and POST requests
      you might need to do.

      Using to make requests

      #+BEGIN_SRC python :results output
      import urllib.request

      x = urllib.request.urlopen('https://www.google.com/')
      print(x.read())
      #+END_SRC

      #+RESULTS:
      : b'<!doctype html><html itemscope=""
      : itemtype="http://schema.org/WebPage" lang="uk"><head><meta
      : content="text/html; charset=UTF-8" http-equiv="Content-Type">
      : <meta content="/images/branding/googleg/1x/googleg_standard_color_128dp.png" itemprop="image"><title>Google</title><script>(function(){window.google={kEI:\'1C4kWf_hIKLA6QT5nbGQBw\',kEXPI:\'201760,1352552,1353136,3700270,3700347,3700410,3700425,4029815,4031109,4032677,4036527,4039268,4043492,4045841,4048347,4065786,4072364,4072773,4076095,4076999,4077776,4081038,4081164,4084976,4085472,4090550,4092183,4093314,4094251,4094544,4095365,4095910,4096324,4097153,4097653,4097922,4097929,4098096,4098733,4098740,4098752,4100174,4101429,4101750,4102239,4103475,4103845,4104204,4105087,4105178,4105240,4105317,4105562,4106532,4106606,4106634,4106949,4107288,4107417,4107555,4107628,4107687,4107896,4107901,4108538,4108540,4109316,4109490,4109498,4109536,4109631,4110088,4110361,4110380,4110511,4110656,4111031,4111423,4111450,4111590,4111609,4111680,4111818,4111903,4112009,4112041,4112827,8503585,8507300,8508229,8508931,8509037,8509091,8509373,8510343,10200083,10200095,16200027,19002286,19002311,19002321,19002328,41027340\',authuser:0,kscs:\'c9c918f0_24\'};google.kHL=\'uk\';})();(function(){google.lc=[];google.li=0;google.getEI=function(a){for(var b;a&&(!a.getAttribute||!(b=a.getAttribute("eid")));)a=a.parentNode;return b||google.kEI};google.getLEI=function(a){for(var b=null;a&&(!a.getAttribute||!(b=a.getAttribute("leid")));)a=a.parentNode;return b};google.https=function(){return"https:"==window.location.protocol};google.ml=function(){return null};google.wl=function(a,b){try{google.ml(Error(a),!1,b)}catch(c){}};google.time=function(){return(new Date).getTime()};google.log=function(a,b,c,d,g){a=google.logUrl(a,b,c,d,g);if(""!=a){b=new Image;var e=google.lc,f=google.li;e[f]=b;b.onerror=b.onload=b.onabort=function(){delete e[f]};window.google&&window.google.vel&&window.google.vel.lu&&window.google.vel.lu(a);b.src=a;google.li=f+1}};google.logUrl=function(a,b,c,d,g){var e="",f=google.ls||"";c||-1!=b.search("&ei=")||(e="&ei="+google.getEI(d),-1==b.search("&lei=")&&(d=google.getLEI(d))&&(e+="&lei="+d));a=c||"/"+(g||"gen_204")+"?atyp=i&ct="+a+"&cad="+b+e+f+"&zx="+google.time();/^http:/i.test(a)&&google.https()&&(google.ml(Error("a"),!1,{src:a,glmm:1}),a="");return a};google.y={};google.x=function(a,b){google.y[a.id]=[a,b];return!1};google.lq=[];google.load=function(a,b,c){google.lq.push([[a],b,c])};google.loadAll=function(a,b){google.lq.push([a,b])};}).call(this);google.f={};var a=window.location,b=a.href.indexOf("#");if(0<=b){var c=a.href.substring(b+1);/(^|&)q=/.test(c)&&-1==c.indexOf("#")&&a.replace("/search?"+c.replace(/(^|&)fp=[^&]*/g,"")+"&cad=h")};</script><style>#gbar,#guser{font-size:13px;padding-top:1px !important;}#gbar{height:22px}#guser{padding-bottom:7px !important;text-align:right}.gbh,.gbd{border-top:1px solid #c9d7f1;font-size:1px}.gbh{height:0;position:absolute;top:24px;width:100%}@media all{.gb1{height:22px;margin-right:.5em;vertical-align:top}#gbar{float:left}}a.gb1,a.gb4{text-decoration:underline !important}a.gb1,a.gb4{color:#00c !important}.gbi .gb4{color:#dd8e27 !important}.gbf .gb4{color:#900 !important}\n</style><style>body,td,a,p,.h{font-family:arial,sans-serif}body{margin:0;overflow-y:scroll}#gog{padding:3px 8px 0}td{line-height:.8em}.gac_m td{line-height:17px}form{margin-bottom:20px}.h{color:#36c}.q{color:#00c}.ts td{padding:0}.ts{border-collapse:collapse}em{font-weight:bold;font-style:normal}.lst{height:25px;width:496px}.gsfi,.lst{font:18px arial,sans-serif}.gsfs{font:17px arial,sans-serif}.ds{display:inline-box;display:inline-block;margin:3px 0 4px;margin-left:4px}input{font-family:inherit}a.gb1,a.gb2,a.gb3,a.gb4{color:#11c !important}body{background:#fff;color:black}a{color:#11c;text-decoration:none}a:hover,a:active{text-decoration:underline}.fl a{color:#36c}a:visited{color:#551a8b}a.gb1,a.gb4{text-decoration:underline}a.gb3:hover{text-decoration:none}#ghead a.gb2:hover{color:#fff !important}.sblc{padding-top:5px}.sblc a{display:block;margin:2px 0;margin-left:13px;font-size:11px}.lsbb{background:#eee;border:solid 1px;border-color:#ccc #999 #999 #ccc;height:30px}.lsbb{display:block}.ftl,#fll a{display:inline-block;margin:0 12px}.lsb{background:url(/images/nav_logo229.png) 0 -261px repeat-x;border:none;color:#000;cursor:pointer;height:30px;margin:0;outline:0;font:15px arial,sans-serif;vertical-align:top}.lsb:active{background:#ccc}.lst:focus{outline:none}.tiah{width:458px}</style><script></script><link href="/images/branding/product/ico/googleg_lodp.ico" rel="shortcut icon"></head><body bgcolor="#fff"><script>(function(){var src=\'/images/nav_logo229.png\';var iesg=false;document.body.onload = function(){window.n && window.n();if (document.images){new Image().src=src;}\nif (!iesg){document.f&&document.f.q.focus();document.gbqf&&document.gbqf.q.focus();}\n}\n})();</script><div id="mngb"> <div id=gbar><nobr><b class=gb1>\xcf\xee\xf8\xf3\xea</b> <a class=gb1 href="https://www.google.com.ua/imghp?hl=uk&tab=wi">\xc7\xee\xe1\xf0\xe0\xe6\xe5\xed\xed\xff</a> <a class=gb1 href="https://maps.google.com.ua/maps?hl=uk&tab=wl">\xca\xe0\xf0\xf2\xe8</a> <a class=gb1 href="https://www.youtube.com/?gl=UA&tab=w1">YouTube</a> <a class=gb1 href="https://news.google.com.ua/nwshp?hl=uk&tab=wn">\xcd\xee\xe2\xe8\xed\xe8</a> <a class=gb1 href="https://mail.google.com/mail/?tab=wm">Gmail</a> <a class=gb1 href="https://drive.google.com/?tab=wo">\xc4\xe8\xf1\xea</a> <a class=gb1 href="https://www.google.com/calendar?tab=wc">\xca\xe0\xeb\xe5\xed\xe4\xe0\xf0</a> <a class=gb1 style="text-decoration:none" href="https://www.google.com.ua/intl/uk/options/"><u>\xc1\xb3\xeb\xfc\xf8\xe5</u> &raquo;</a></nobr></div><div id=guser width=100%><nobr><span id=gbn class=gbi></span><span id=gbf class=gbf></span><span id=gbe></span><a href="http://www.google.com.ua/history/optout?hl=uk" class=gb4>\xb2\xf1\xf2\xee\xf0\xb3\xff \xe2\xe5\xe1-\xef\xee\xf8\xf3\xea\xf3</a> | <a  href="/preferences?hl=uk" class=gb4>\xcd\xe0\xeb\xe0\xf8\xf2\xf3\xe2\xe0\xed\xed\xff</a> | <a target=_top id=gb_70 href="https://accounts.google.com/ServiceLogin?hl=uk&passive=true&continue=https://www.google.com.ua/%3Fgfe_rd%3Dcr%26ei%3D1C4kWdThFKbs8wfVpIHAAw" class=gb4>\xd3\xe2\xb3\xe9\xf2\xe8</a></nobr></div><div class=gbh style=left:0></div><div class=gbh style=right:0></div> </div><center><br clear="all" id="lgpd"><div id="lga"><div style="padding:28px 0 3px"><div style="height:110px;width:276px;background:url(/images/branding/googlelogo/1x/googlelogo_white_background_color_272x92dp.png) no-repeat" title="Google" align="left" id="hplogo" onload="window.lol&&lol()"><div style="color:#777;font-size:16px;font-weight:bold;position:relative;top:70px;left:218px" nowrap="">\xd3\xea\xf0\xe0\xbf\xed\xe0</div></div></div><br></div><form action="/search" name="f"><table cellpadding="0" cellspacing="0"><tr valign="top"><td width="25%">&nbsp;</td><td align="center" nowrap=""><input name="ie" value="windows-1251" type="hidden"><input value="uk" name="hl" type="hidden"><input name="source" type="hidden" value="hp"><input name="biw" type="hidden"><input name="bih" type="hidden"><div class="ds" style="height:32px;margin:4px 0"><div style="position:relative;zoom:1"><input style="color:#000;margin:0;padding:5px 8px 0 6px;vertical-align:top;padding-right:38px" autocomplete="off" class="lst tiah" value="" title="\xcf\xee\xf8\xf3\xea Google" maxlength="2048" name="q" size="57"><img src="/textinputassistant/tia.png" style="position:absolute;cursor:pointer;right:5px;top:4px;z-index:300" onclick="(function(){var src=\'/textinputassistant/11/uk_tia.js\';var s=document.createElement(\'script\');s.src=src;google.dom.append(s);})();" alt="" height="23" width="27"></div></div><br style="line-height:0"><span class="ds"><span class="lsbb"><input class="lsb" value="\xcf\xee\xf8\xf3\xea Google" name="btnG" type="submit"></span></span><span class="ds"><span class="lsbb"><input class="lsb" value="\xcc\xe5\xed\xb3 \xef\xee\xf9\xe0\xf1\xf2\xe8\xf2\xfc" name="btnI" onclick="if(this.form.q.value)this.checked=1; else top.location=\'/doodles/\'" type="submit"></span></span></td><td class="fl sblc" align="left" nowrap="" width="25%"><a href="/advanced_search?hl=uk&amp;authuser=0">\xd0\xee\xe7\xf8\xe8\xf0\xe5\xed\xe8\xe9 \xef\xee\xf8\xf3\xea</a><a href="/language_tools?hl=uk&amp;authuser=0">\xcc\xee\xe2\xed\xb3 \xb3\xed\xf1\xf2\xf0\xf3\xec\xe5\xed\xf2\xe8</a></td></tr></table><input id="gbv" name="gbv" type="hidden" value="1"></form><div id="gac_scont"></div><div style="font-size:83%;min-height:3.5em"><br><div id="als"><style>#als{font-size:small;margin-bottom:24px}#_eEe{display:inline-block;line-height:28px;}#_eEe a{padding:0 3px;}._lEe{display:inline-block;margin:0 2px;white-space:nowrap}._PEe{display:inline-block;margin:0 2px}</style><div id="_eEe">Google.com.ua \xed\xe0 <a href="/url?q=https://www.google.com.ua/setprefs%3Fsig%3D0_rDllasoGfew2I92d6TK6RWMk1cA%253D%26hl%3Dru%26source%3Dhomepage&amp;sa=U&amp;ved=0ahUKEwj_m8rchYbUAhUiYJoKHflODHIQ2ZgBCAU&amp;usg=AFQjCNGA7_0a3_DfDBC6KFtWmyxFls7nIA">\xf0\xf3\xf1\xf1\xea\xe8\xe9</a> </div></div></div><span id="footer"><div style="font-size:10pt"><div style="margin:19px auto;text-align:center" id="fll"><a href="http://www.google.com.ua/intl/uk/ads/">\xd0\xe5\xea\xeb\xe0\xec\xe0</a><a href="http://www.google.com.ua/intl/uk/services/">\xd0\xb3\xf8\xe5\xed\xed\xff \xe4\xeb\xff \xe1\xb3\xe7\xed\xe5\xf1\xf3</a><a href="/intl/uk/about.html">\xd3\xf1\xe5 \xef\xf0\xee Google</a><a href="https://www.google.com.ua/setprefdomain?prefdom=US&amp;sig=__4DPzLobNStci7huu3-oOyQUe_IU%3D" id="fehl">Google.com</a></div></div><p style="color:#767676;font-size:8pt">&copy; 2017</p></span></center><script>(function(){window.google.cdo={height:0,width:0};(function(){var a=window.innerWidth,b=window.innerHeight;if(!a||!b)var c=window.document,d="CSS1Compat"==c.compatMode?c.documentElement:c.body,a=d.clientWidth,b=d.clientHeight;a&&b&&(a!=google.cdo.width||b!=google.cdo.height)&&google.log("","","/client_204?&atyp=i&biw="+a+"&bih="+b+"&ei="+google.kEI);}).call(this);})();</script><div id="xjsd"></div><div id="xjsi"><script>(function(){function c(b){window.setTimeout(function(){var a=document.createElement("script");a.src=b;document.getElementById("xjsd").appendChild(a)},0)}google.dljp=function(b,a){google.xjsu=b;c(a)};google.dlj=c;}).call(this);(function(){window.google.xjsrm=[];})();if(google.y)google.y.first=[];if(!google.xjs){window._=window._||{};window._DumpException=window._._DumpException=function(e){throw e};if(google.timers&&google.timers.load.t){google.timers.load.t.xjsls=new Date().getTime();}google.dljp(\'/xjs/_/js/k\\x3dxjs.hp.en_US.GZ12N6aSRmo.O/m\\x3dsb_he,d/am\\x3dAAY/rt\\x3dj/d\\x3d1/t\\x3dzcms/rs\\x3dACT90oGgr28XbjoIEsYiSWrLmUTL4sx8Pw\',\'/xjs/_/js/k\\x3dxjs.hp.en_US.GZ12N6aSRmo.O/m\\x3dsb_he,d/am\\x3dAAY/rt\\x3dj/d\\x3d1/t\\x3dzcms/rs\\x3dACT90oGgr28XbjoIEsYiSWrLmUTL4sx8Pw\');google.xjs=1;}google.pmc={"sb_he":{"agen":false,"cgen":false,"client":"heirloom-hp","dh":true,"dhqt":true,"ds":"","fl":true,"host":"google.com.ua","isbh":28,"jam":0,"jsonp":true,"msgs":{"cibl":"\xce\xf7\xe8\xf1\xf2\xe8\xf2\xe8 \xef\xee\xf8\xf3\xea\xee\xe2\xe8\xe9 \xe7\xe0\xef\xe8\xf2","dym":"\xcc\xee\xe6\xeb\xe8\xe2\xee, \xe2\xe8 \xec\xe0\xeb\xe8 \xed\xe0 \xf3\xe2\xe0\xe7\xb3:","lcky":"\xcc\xe5\xed\xb3 \xef\xee\xf9\xe0\xf1\xf2\xe8\xf2\xfc","lml":"\xc4\xee\xea\xeb\xe0\xe4\xed\xb3\xf8\xe5","oskt":"\xd2\xf0\xe0\xed\xf1\xeb\xb3\xf2\xe5\xf0\xe0\xf6\xb3\xff","psrc":"\xd6\xe5\xe9 \xef\xee\xf8\xf3\xea \xe2\xe8\xe4\xe0\xeb\xe5\xed\xee \xe7 \xe2\xe0\xf8\xee\xbf \\u003Ca href=\\"/history\\"\\u003E\xe2\xe5\xe1-\xb3\xf1\xf2\xee\xf0\xb3\xbf\\u003C/a\\u003E","psrl":"\xc2\xe8\xe4\xe0\xeb\xe8\xf2\xe8","sbit":"\xcf\xee\xf8\xf3\xea \xe7\xe0 \xe7\xee\xe1\xf0\xe0\xe6\xe5\xed\xed\xff\xec","srch":"\xcf\xee\xf8\xf3\xea Google"},"nds":true,"ovr":{},"pq":"","refpd":true,"rfs":[],"sbpl":24,"sbpr":24,"scd":10,"sce":5,"stok":"-UpgRgXM_ryoEFyj4g6Yk5d7uM0"},"d":{},"aWiv7g":{},"YFCs/g":{}};google.y.first.push(function(){if(google.med){google.med(\'init\');google.initHistory();google.med(\'history\');}});if(google.j&&google.j.en&&google.j.xi){window.setTimeout(google.j.xi,0);}\n</script></div></body></html>'

      Defining the variables that we plan to POST to the URL

      #+BEGIN_SRC python :results output
      import urllib.parse
      url = 'https://www.google.com/search'
      values = {'q' : 'python programming tutorials'}
      #+END_SRC

      #+RESULTS:

      Encoding to utf-8

      #+BEGIN_SRC python :results output
      data = urllib.parse.urlencode(values)
      data = data.encode('utf-8') # data should be bytes
      req = urllib.request.Request(url, data)
      resp = urllib.request.urlopen(req)
      respData = resp.read()

      print(respData)

      #+END_SRC

      Header modification

      #+BEGIN_SRC python :results output
      import urllib.request
      try:
         x = urllib.request.urlopen('https://www.google.com/search?q=test')
	 saveFile = open('noheaders.txt','w')
	 saveFile.write(str(x.read()))
	 saveFile.close()
      except Exception as e:
          print(str(e))
      #+END_SRC

      #+RESULTS:
      : HTTP Error 403: Forbidden

      #+BEGIN_SRC python :results output
      import urllib.request
      try:
         url = 'https://www.google.com/search?q=python'

	 headers = {}
	 headers['User-Agent'] = "Mozilla/5.0 (X11; Linux i686) AppleWebKit/537.17 (KHTML, like Gecko) Chrome/24.0.1312.27 Safari/537.17"
	 req = urllib.request.Request(url, headers = headers)
	 resp = urllib.request.urlopen(req)
	 respData = resp.read()

	 saveFile = open('withHeaders.txt','w')
	 saveFile.write(str(respData))
	 saveFile.close()
      except Exception as e:
         print(str(e))

      #+END_SRC

      Example:

      #+BEGIN_SRC python :results output
      import urllib.request

      url = 'https://www.va.gov/ogc/apps/accreditation/accredpeople.asp'
      values = {'State': 'AK', 'PersonTypeCheck': 'Att'}
      data = urllib.parse.urlencode(values)
      data = data.encode('utf-8')
      req = urllib.request.Request(url, data, method='POST')
      resp = urllib.request.urlopen(req)
      respData = resp.read()

      print(respData)

      #+END_SRC

      Python requests

      Making GET request

      #+BEGIN_SRC python :results output
      import requests
      r = requests.get('https://api.github.com/events')
      #+END_SRC

      Making POST request:

      #+BEGIN_SRC python :results output
      r = requests.post('http://httpbin.org/post', data = {'key':'value'})
      #+END_SRC

      Example:
      #+BEGIN_SRC python :results output
      import requests
      r = requests.post('https://www.va.gov/ogc/apps/accreditation/accredpeople.asp', data = {'State': 'AK', 'PersonTypeCheck': 'Att'})
      print (r.text)
      #+END_SRC

      Passing parameters in URLs

      #+BEGIN_SRC python :results output
      payload = {'key1': 'value1', 'key2': 'value2'}
      r = requests.get('http://httpbin.org/get', params=payload)
      #+END_SRC

      You can also pass a list of items as a value:

      #+BEGIN_SRC python :results output
      payload = {'key1': 'value1', 'key2': ['value2', 'value3']}

      r = requests.get('http://httpbin.org/get', params=payload)
      print(r.url)
      #+END_SRC

***** DONE 10.8. Dates and Times
      CLOSED: [2017-05-15 Mon 09:02] SCHEDULED: <2017-05-13 Sat> DEADLINE: <2017-05-13 Sat 09:00>

      The datetime module supplies classes for manipulating dates and
      times in both simple and complex ways. While date and time
      arithmetic is supported, the focus of the implementation is on
      efficient member extraction for output formatting and
      manipulation. The module also supports objects that are timezone
      aware.

      #+BEGIN_SRC python :results output
      from datetime import date
      now = date.today()
      birthday = date(1964, 7, 31)
      age = now - birthday
      print now
      print now.strftime("%m-%d-%y. %d %b %Y is a %A on the %d day of %B.")
      print age.days
      #+END_SRC

      #+RESULTS:
      : 2017-05-13
      : 05-13-17. 13 May 2017 is a Saturday on the 13 day of May.
      : 19279

***** DONE 10.9. Data Compression
      CLOSED: [2017-05-15 Mon 09:02] SCHEDULED: <2017-05-15 Mon> DEADLINE: <2017-05-15 Mon 09:20>

      #+BEGIN_SRC python :results output
      import zlib
      s = 'witch which has which witches wrist watch'
      print len(s)
      t = zlib.compress(s)
      print len(t)
      #+END_SRC

      #+RESULTS:
      : 41
      : 37
     
***** DONE 10.10. Performance Measurement
      CLOSED: [2017-05-16 Tue 09:08] SCHEDULED: <2017-05-16 Tue> DEADLINE: <2017-05-16 Tue 09:15>

      #+BEGIN_SRC python :results output
      from timeit import Timer
      print Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()
      print Timer('a,b = b,a', 'a=1; b=2').timeit()
      #+END_SRC

      #+RESULTS:
      : 0.053190946579
      : 0.0494728088379

***** 10.11. Quality Control

***** TODO Software testing
      Software testing is an investigation conducted to provide
      stakeholders with information about the quality of the product or
      service under test. Test techniques include the process of
      execution a program or application with the intent of finding
      software bugs (errors or other defects), and verifying that the
      software product is fit for use.

      In general, these properties indicate the extent to which the
      component or system under test:

      - meets the requirements that guided its design and development,
      - responds correctly to all kinds of inputs,
      - performs its functions within an acceptable time,
      - is sufficiently usable,
      - can be installed and run in its intended environments, and
	achieves the general result its stakeholders desire.

      Module Tests with __name__

      Every module has a name, which is defined in the built-in
      attribute __name__. Let's assume that we have written a module
      "xyz" which we have saved as "xyz.py". If we import this module
      with "import xyz", the string "xyz" will be assigned to
      __name__. If we call the file xyz.py as a standalone program,
      i.e in the following way,

      #+BEGIN_SRC shell :results output
      python3 xyz.py
      #+END_SRC

      the value of __name__will be the string '__main__'.

      Testing Fibonacci module with __name__

      #+BEGIN_SRC python :results output
      def fib(n):
          """ Calculates the n-th Fibonacci number iteratively """
	  a, b = 0, 1
	  for i in range(n):
              a, b = b, a + b
	  return a

      def fiblist(n):
          """ creates a list of Fibonacci numbers up to the n-th generation """
	  fib = [0,1]
	  for i in range(1,n):
              fib += [fib[-1]+fib[-2]]
	  return fib

     if __name__ == "__main__":
         if fib(0) == 0 and fib(10) == 55 and fib(50) == 12586269025:
             print("Test for the fib function was successful!")
         else:
             print("The fib function is returning wrong values!")

      #+END_SRC

      This is the simplest and widest used method for unit tests. But it is
      definitely not the best one.

      doctest Module

      The doctest module searches for pieces of text that look like
      interactive Python sessions inside of the documentation parts of a
      module, and then executes (or reexecutes) the commands of those
      sessions to verify that they work exactly as shown, i.e. that the same
      results can be achieved.

      #+BEGIN_SRC python :results output
      def square(x):
          """Return the square of x.

	  >>> square(2)
	  4
	  >>> square(-2)
	  4
          """

	  return x * x

      if __name__ == '__main__':
          import doctest
	  doctest.testmod()
      #+END_SRC

      #+RESULTS:

      Testing methods

      There are many approaches available in software testing. Reviews,
      walkthroughs, or inspections are referred to as static testing,
      whereas actually executing programmed code with a given set of test
      cases is referred to as dynamic testing. Static testing is often
      implicit, as proofreading, plus when programming tools/text editors
      check source code structure or compilers (pre-compilers) check syntax
      and data flow as static program analysis. Dynamic testing takes place
      when the program itself is run. Dynamic testing may begin before the
      program is 100% complete in order to test particular sections of code
      and are applied to discrete functions or modules. Typical techniques
      for this are either using stubs/drivers or execution from a debugger
      environment.

***** 10.12. Batteries Included
***** DONE Unittest
***** 
      CLOSED: [2017-05-29 Mon 09:47]
      unittest is the batteries-included test module in the Python
      standard library.
      Creating test cases is accomplished by subclassing unittest.TestCase.

      #+BEGIN_SRC python :results output
      import unittest

      def fun(x):
          return x + 1

      class MyTest(unittest.TestCase):
          def test(self):
              self.assertEqual(fun(3), 4)
      if __name__ == "__main__":
          unittest.main()
      #+END_SRC

      #+RESULTS:
      : ----------------------------------------------------------------------
      : Ran 1 test in 0.002s

      : OK
***** DONE Unittest Assert methods
      CLOSED: [2017-06-08 Thu 15:09]

      | method                    | checks               |
      |---------------------------+----------------------|
      | assertEqual(a, b)         | a == b               |
      | assertNotEqual(a, b)      | a != b               |
      | assertTrue(x)             | bool(x) is True      |
      | assertFalse(x)            | bool(x) is False     |
      | assertIs(a, b)            | a is b               |
      | assertIsNot(a, b)         | a is not b           |
      | assertIsNone(x)           | x is None            |
      | assertIsNotNone(x)        | x is not None        |
      | assertIn(a, b)            | a in b               |
      | assertNotIn(a, b)         | a not in b           |
      | assertIsInstance(a, b)    | isinstance(a, b)     |
      | assertNotIsInstance(a, b) | not isinstance(a, b) |
      
      
**** 11. Brief Tour of the Standard Library — Part II

***** DONE 11.1. Output Formatting
      CLOSED: [2017-05-17 Wed 08:43] SCHEDULED: <2017-05-17 Wed> DEADLINE: <2017-05-17 Wed 08:20>

      The repr module provides a version of repr() customized for
      abbreviated displays of large or deeply nested containers:
      #+BEGIN_SRC python :results output
      import repr
      print repr.repr(set('supercalifragilisticexpialidocious'))
      #+END_SRC

      #+RESULTS:
      : set(['a', 'c', 'd', 'e', 'f', 'g', ...])

      The pprint module offers more sophisticated control over printing
      both built-in and user defined objects in a way that is readable
      by the interpreter. When the result is longer than one line, the
      "pretty printer" adds line breaks and indentation to more clearly
      reveal data structure:

      #+BEGIN_SRC python :results output
      import pprint
      t = [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta',
      'yellow'], 'blue']]]
      pprint.pprint(t, width=30)
      #+END_SRC

      #+RESULTS:
      : [[[['black', 'cyan'],
      :    'white',
      :    ['green', 'red']],
      :   [['magenta', 'yellow'],
      :    'blue']]]

      The textwrap module formats paragraphs of text to fit a given
      screen width:

      #+BEGIN_SRC python :results output
      import textwrap
      doc = """The wrap() method is just like fill() except that it returns
      a list of strings instead of one big string with newlines to separate
      the wrapped lines."""
      print textwrap.fill(doc, width=40)
      #+END_SRC

      #+RESULTS:
      : The wrap() method is just like fill()
      : except that it returns a list of strings
      : instead of one big string with newlines
      : to separate the wrapped lines.

***** DONE 11.2. Templating
      CLOSED: [2017-05-20 Sat 09:21] SCHEDULED: <2017-05-18 Thu> DEADLINE: <2017-05-18 Thu 10:20>

      #+BEGIN_SRC python :results output
      from string import Template
      t = Template('${village}folk send $$10 to $cause.')
      print t.substitute(village='Nottingham', cause='the ditch fund')
      #+END_SRC

      #+RESULTS:
      : Nottinghamfolk send $10 to the ditch fund.

      Files renaming

      #+BEGIN_SRC python :results output
      from string import Template
      import time
      import os.path
      photofiles = ['img_1074.jpg', 'img_1076.jpg', 'img_1077.jpg']


      class BatchRename(Template):
          delimiter = '%'
      fmt = raw_input('Enter rename style (%d-date %n-seqnum %f-format):  ')

      Enter rename style (%d-date %n-seqnum %f-format):  Ashley_%n%f

      t = BatchRename(fmt)
      date = time.strftime('%d%b%y')
      for i, filename in enumerate(photofiles):
          base, ext = os.path.splitext(filename)
	  newname = t.substitute(d=date, n=i, f=ext)
      print '{0} --> {1}'.format(filename, newname)
      #+END_SRC

      #+RESULTS:
      : img_1074.jpg --> Ashley_0.jpg
      : img_1076.jpg --> Ashley_1.jpg
      : img_1077.jpg --> Ashley_2.jpg

***** 11.3. Working with Binary Data Record Layouts
***** Multiprocessing
***** 11.4. Multi-threading
      Running several threads is similar to running several different
      programs concurrently. A thread has a beginning, an execution
      sequence, and a conclusion. It has an instruction pointer that
      keeps track of where within its context it is currently running.

      - It can be pre-empted (interrupted)

      - It can temporarily be put on hold (also known as sleeping)
	while other threads are running - this is called yielding.

      To spawn another thread, you need to call following method available in
      thread module:

      #+BEGIN_SRC python :results output
      thread.start_new_thread ( function, args[, kwargs] )
      #+END_SRC

      #+BEGIN_SRC python :results output
      #!/usr/bin/python

      import thread
      import time

      # Define a function for the thread
      def print_time(threadName, delay):
          count = 0
	  while count < 5:
              time.sleep(delay)
              count += 1
              print "%s: %s" % (threadName, time.ctime(time.time()))
      # Create two threads as follows
      try:
          thread.start_new_thread(print_time, ("Thread-1", 2, ))
          thread.start_new_thread(print_time, ("Thread-2", 4, ))
      except:
          print "Error: unable to start thread"

      while 1:
          pass

      #+END_SRC

      #+RESULTS:
      : Thread-1: Mon May 29 10:51:08 2017
      : Thread-2: Mon May 29 10:51:10 2017
      : Thread-1: Mon May 29 10:51:10 2017
      : Thread-1: Mon May 29 10:51:12 2017
      : Thread-2: Mon May 29 10:51:14 2017
      : Thread-1: Mon May 29 10:51:14 2017
      : Thread-1: Mon May 29 10:51:16 2017
      : Thread-2: Mon May 29 10:51:18 2017
      : Thread-2: Mon May 29 10:51:22 2017
      : Thread-2: Mon May 29 10:51:26 2017


      The simplest way to use a Thread is to instantiate it with a
      target function and call start() to let it begin working.

      #+BEGIN_SRC python :results output
      import threading

      def worker():
          """thread worker function"""
	  print 'Worker'
	  return

      def student():
          """thread student function"""
	  print 'Student'
	  return

      threads = []
      for i in range(5):
          t1 = threading.Thread(target=worker)
	  t2 = threading.Thread(target=student)
          threads.append(t1)
	  threads.append(t2)
          t1.start()
	  t2.start()

      #+END_SRC

      #+RESULTS:
      #+begin_example
      Worker
      Student
      Worker
      Student
      Worker
      Student
      Worker
      Student
      Worker
      Student
 #+end_example

      Determining the current thread

      #+BEGIN_SRC python :results output
      import threading
      import time

      def worker():
          print threading.currentThread().getName(), 'Starting'
	  time.sleep(2)
	  print threading.currentThread().getName(), 'Exiting'

      def my_service():
          print threading.currentThread().getName(), 'Starting'
	  time.sleep(3)
	  print threading.currentThread().getName(), 'Exiting'

      t = threading.Thread(name='my_service', target=my_service)
      w = threading.Thread(name='worker', target=worker)
      w2 = threading.Thread(target=worker) # use default name

      w.start()
      w2.start()
      t.start()
      #+END_SRC

      #+RESULTS:
      : worker Starting
      : Thread-1 Starting
      : my_service Starting
      : worker Exiting
      : Thread-1 Exiting
      : my_service Exiting


***** 11.5. Logging 
***** 11.6. Weak References 
***** 11.7. Tools for Working with Lists
      The method pop()

      Removes and returns last object from a list.

      Syntax

      list.pop(obj=list[-1])

      #+BEGIN_SRC python :results output
      aList = [5, 3, 1]
      print aList.pop()
      #+END_SRC

      #+RESULTS:
      : 1

      array module

      The array module provides an array() object that is like a list
      that stores only homogeneous data and stores it more compactly.

      #+BEGIN_SRC python :results output
      from array import array
      a = array('H', [4000, 10, 700, 22222])
      print a[1:3]
      #+END_SRC

      #+RESULTS:
      : array('H', [10, 700])

      collections module deque() object

      #+BEGIN_SRC python :results output
      from collections import deque
      d = deque(["task1", "task2", "task3"])
      d.append("task4")
      print "Handling", d.popleft()
      #+END_SRC

      #+RESULTS:
      : Handling task1

***** 11.8. Decimal Floating Point Arithmetic 

**** 12. What Now? 
**** 13. Interactive Input Editing and History Substitution

***** 13.1. Line Editing 
***** 13.2. History Substitution 
***** 13.3. Key Bindings 
***** 13.4. Alternatives to the Interactive Interpreter 

**** 14. Floating Point Arithmetic: Issues and Limitations

***** 14.1. Representation Error 

**** 15. Appendix

***** 15.1. Interactive Mode

***** 15.1.1. Error Handling 
***** 15.1.2. Executable Python Scripts 
***** 15.1.3. The Interactive Startup File 
***** 15.1.4. The Customization Modules 

******* Getting Started
******** Significant Whitespace Rules:
 Prefer four spaces;
 Never mix spaces and tabs;
 Be consistent on consecutive lines;
 Only deviate to improve readability.
******** Python standart Library
 In [1]: import math

 In [2]: math.sqrt(81)
 Out[2]: 9.0

 In [3]: help(math)
 Help on built-in module math:

 NAME
     math

 FILE
     (built-in)

 DESCRIPTION
     This module is always available.  It provides access to the
     mathematical functions defined by the C standard.

 FUNCTIONS .......

 In [4]: math.factorial(5)
 Out[4]: 120


 In [8]: n = 5

 In [9]: k =3

 In [10]: math.factorial(n) / (math.factorial(k) * math.factorial(n-k))
 Out[10]: 10

******** Scalar types and values:
 STR - string
 INT - albitrary precision integer;
 FLOAT - 64-bit floating point numbers;
 NONE - non-type, the NULL objecct;
 bool TRUE, bool FALSE - boolean logical values

 In [11]: 3,125
 Out[11]: (3, 125)

 In [12]: 3e8
 Out[12]: 300000000.0

 In [13]: 1,616e-35
 Out[13]: (1, 6.16e-33)

 In [14]: float(7)
 Out[14]: 7.0

 In [15]: float("1.1618")
 Out[15]: 1.1618

 In [16]: float("nan")
 Out[16]: nan

 In [17]: float("inf")
 Out[17]: inf

 In [18]: float("-inf")
 Out[18]: -inf

 In [21]: eee = "hello  " + "there"

 In [22]: print eee
 hello  there

 In [23]: type(eee)
 Out[23]: str

 In [24]: None

 In [25]: a = None

 In [26]: a is None
 Out[26]: True

 In [27]: True
 Out[27]: True

 In [28]: False
 Out[28]: False

 In [29]: bool(0)
 Out[29]: False

 In [30]: bool(42)
 Out[30]: True

 In [31]: bool(-1)
 Out[31]: True

******** Relational Operators:
 == value equality / equivalence
 != value inequality / inequivalence
 < less-than
 > greater-than
 <= less-than or equal to
 >= greater-than or equal to

 In [32]: g=20

 In [33]: g==20
 Out[33]: True

 In [34]: g==13
 Out[34]: False

 In [35]: g!=13
 Out[35]: True

 In [36]: g<30
 Out[36]: True

 In [37]: g>30
 Out[37]: False

 In [38]: g<20
 Out[38]: False

******** While loops:

 In [3]: c = 5

 In [4]: while c != 0:
    ...: print c
    ...: c -= 1
    ...: 
 5
 4
 3
 2
 1

******** Breaking Out:
 The break keyword terminates the innermost loop,
 transfering execution to the first statement after the loop.

 In [5]: while True:
    ...: response = input()
    ...: if int(response) % 7 == 0:
    ...: break
    ...: 
 12
 67
 34
 28

******** Conditional Statements:
 In [26]: h = 60

 In [27]: if h > 50:
    ....: print "Greater than 50"
    ....: 
 Greater than 50


 >>> h = 42 
 >>> if h >50:
 ...     print "Greater than 50"
 ... else:
 ...     if h < 20:
 ...         print "Less than 20"
 ...     else:
 ...         print "Between 20 and 50"
 ... 
 Between 20 and 50

 Python provides  the elif keywords to eliminate the need for nested 
 if ... else structures in many cases.

 >>> h = 42
 >>> if h > 50:
 ...     print "Greater than 50"
 ... elif h < 20:
 ...     print "Less than 20"
 ... else:
 ...     print "Beetween 20 and 50"
 ... 
 Beetween 20 and 50       

******** The try/except Structure:

 You surround a dangerous section of code with TRY and EXCEPT.
 If the code in the TRY works - the except is skipped.
 If the code in the TRY fails - it jumps to the EXCEPT section.


 astr = 'Hello Bob'
 try:
     istr = int(astr)
 except:
     istr = -1
 print 'First', istr

 First -1  	      
   	    
      	    
******* Strings and Collections

******** Strings:

 A string is a sequence of characters. 
 A string literal uses quotes " " or ' '
 For string, +means "concatenate"
 When a string contain numbers, it is still a string.
 We can convert numbers in a string into a number using int()

 >>> a = "Hello"
 >>> b = "there"
 >>> c = a + b
 >>> print c
 Hellothere


 >>> a = '123'
 >>> b = a + 1
 Traceback (most recent call last):
   File "<stdin>", line 1, in <module>
 TypeError: cannot concatenate 'str' and 'int' objects


 >>> b = int(a) + 1
 >>> print b
 124

 We can get any single character in a string using an index specified in square brackets.
 The index value must be an integer and start at zero.
 The index value can be an expression that is computed.

 | b | a | n | a | n | a |
 |---+---+---+---+---+---|
 | 0 | 1 | 2 | 3 | 4 | 5 |
    
 >>> fruit = 'banana'
 >>> letter = fruit [1]
 >>> print letter
 a

 There is a built-in function len that gives us the length of a string

 >>> fruit = 'banana'
 >>> print len(fruit)
 6

********* Looping Through String:

 fruit = 'banana'
 index = 0
 while index < len(fruit):
     letter = fruit[index]
     print index, letter
     index = index + 1

 0 b
 1 a
 2 n
 3 a
 4 n
 5 a

********* Looping and Counting:

 word = 'banana'
 count = 0
 for letter in word:
     if letter == 'a':
	count = count + 1 
 print count

********* Slicing string:

 >>> s = 'Monty Python' 
 >>> print s[0:4]
 Mont
 >>> print s[6:7]
 P
 >>> print s[6:20]
 Python

 | M | o | n | t | y |   | P | y | t | h |  o |  n |
 |---+---+---+---+---+---+---+---+---+---+----+----|
 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 |

 >>> print s[:2]
 Mo
 >>> print s[8:]
 thon
 >>> print s[:]
 Monty Python

********* String Concatenation

 >>> a = 'Hello'
 >>> b = a + 'There'
 >>> print b
 HelloThere
 >>> c = a + ' ' + 'There'
 >>> print c
 Hello There

********* Using IN as a logical Operator:

 >>> fruit = 'banana'
 >>> 'n' in fruit
 True
 >>> 'm' in fruit
 False
 >>> if 'a' in fruit:
 ...     print 'Found it!'
 ... 
 Found it!

********* String Library

 >>> greet = 'Hello Bob'
 >>> zap = greet.lower()
 >>> print zap
 hello bob
 >>> print greet
 Hello Bob
 >>> print 'Hi There'.lower()
 hi there
 >>> 

********** Searching a String

 >>> fruit = 'banana'
 >>> pos = fruit.find('na')
 >>> print pos
 2

 If the substring is not found.find()
 return -1

 >>> a = fruit.find('z')
 >>> print a
 -1

********** Replacing in string

 >>> greet = 'Hello Bob'
 >>> nstr = greet.replace('Bob', 'Viktoriia')
 >>> print nstr
 Hello Viktoriia
 >>> nstr = greet.replace('o','X')
 >>> print nstr
 HellX BXb

********** Stripping Whitespace

 lstrip() and rstrip() remove whitespace at the left or right
 strip() removes both beginning and ending whitespace

 >>> greet = '   Hello Bob   '
 >>> greet.lstrip()
 'Hello Bob   '
 >>> greet.rstrip()
 '   Hello Bob'
 >>> greet.strip()
 'Hello Bob'
 >>> 

********** Prefixes

 >>> line = 'Please have a nice day'
 >>> line.startswith('Please')
 True
 >>> line.startswith('p')
 False
 >>> 

********* Strings with Newlines
 Multiline strings

 >>> """This is
 ... a multiline
 ... string"""
 'This is\na multilaine\nstring'

 >>> m = 'This string\nspans multiple\nlines'
 >>> m
 'This string\nspans multiple\nlines'


******** DICT - mutable mapping of keys to values

 Dict Literals:

 {k1: v1, k2: v2}

 k1, k2 - keys
 v1, v2 - values

 >>> a = {'alise': '878-8728-922', 'bob': '256-5262-124', 'linda': '298-2324-784'}

 >>> a['linda']
 '298-2324-784'
 >>> a['linda'] = '999-4555-6772'
 >>> a
 {'linda': '999-4555-6772', 'bob': '256-5262-124', 'alise': '878-8728-922'}

******** for-loop
	 :PROPERTIES:
	 :ORDERED:  t
	 :END:

 Syntax:

 for ITEM in SEQUENCE:
     ... body ...

 cities = ["London", "New York", "Paris", "Oslo", "Helsinki"]
 for city in cities:
     print(city)

 London
 New York
 Paris
 Oslo
 Helsinki


 from urllib.request import urlopen
 with urlopen('http://sixty-north.com/c/t.txt') as story:
     story_words = []
     for line in story:
         line_words = line.decode('utf-8').split()
         for word in line_words:
             story_words.append(word)

 >>> story_words

******** List - mutable sequences of objects

 >>> [1, 9, 7]
 [1, 9, 7]
 >>> a = ["apple", "orange", "pear"]
 >>> a[1]
 'orange'
 >>> a[1] = "tomato"
 >>> a
 ['apple', 'tomato', 'pear']
 >>> 

 >>> b = []
 >>> b.append(555) 
 >>> b
 [555]
 >>> b.append(666)
 >>> b
 [555, 666]


******* Modularity

 Python modules are one of the main abstraction layers available and 
 probably the most natural one. Abstraction layers allow separating 
 code into part holdinf related data and functionality. the most natural
 way to separate these two layers is to regroup all interfacing functionality
 in one file, and all low-level operations in another file. In this case,
 the interface file needs to import the low-level file. This is done with
 the IMPORT and FROM ... IMPORT statements. These can be either built-in
 modules such as OS and SYS, third-party modules you have installed in
 your environment, or you project's internal modules.

 fibonacci.py:

 def fib(n):
     if n == 0:
         return 0
     elif n == 1:
         return 1
     else:
         return fib(n-1) + fib(n-2)

 We can import this module in the interactive python shell and call the
 functions by prefixing them with "fibonacci":

 >>> import fibonacci
 >>> fibonacci.fib(0)
 0
 >>> fibonacci.fib(1)
 1
 >>> fibonacci.fib(30)
 832040
 >>>

 greet.py:

 def greet(lang):
     if lang == 'es':
         return 'Hola'
     elif lang == 'fr':
         return 'Bonjour'
     else:
         return 'Hello'

 >>> import greet
 >>> greet.greet('es')
 'Hola'
 >>> greet.greet('fr')
 'Bonjour'
 >>> greet.greet('ua')
 'Hello'
 >>> 

******** Functions:

 Often a function will take its arguments, do some computation and
 RETURN a value to be used as the value of the function call in the 
 calling expression. 

 def greet():
     return "Hello"
 print greet(), "Glenn"
 print greet(), "Sally"

 Hello Glenn
 Hello Sally

 We can define more than one parameter in the function
 definition


 def addtwo(a,b):
     added = a + b
     return added

 x = addtwo(2, 6)
 print x

 8

 def sum(arg1, arg2):
     total = arg1 + arg2
     print "Inside the function:", total
     return total;

 total = sum(30, 20)
 print "Outside the function:", total

 Inside the function: 50
 Outside the function: 50

******** Scope of Variables

 All variables in a program may not be accessible at all
 location in that program. This depends on where you have
 declared a variable.

 The scope of a vriable determines the portion of the program 
 where you can access a paryicular identifer. There are two basic scopes of variables in Python:
 Global variables

 Local variables


 total = 0

 def sum(arg1, arg2):
     total = arg1 + arg2
     print "Inside the function local total:", total
     return total

 sum(10, 20)
 print "Outside the function global total:", total


 Inside the function local total: 30
 Outside the function global total: 0

******** The Anonymous Functions

 These functions are called anonymous becouse they are not declared in the standart 
 manner by using the def keyword. You can use the LAMDA keyword
 to create small anonymouse functions.

 Lambda forms can take any number of arguments but return just one value in the form
 of an expression. They cannot contain commands or multiple expressions.

 An anonymous function cannot be a direct call to print because lambda requires
 an expression

 Lambda functions have their own local namespace and cannot access variables other than
 those in their parameter list and those in the global namespace.

 Although it appears that lambda's are a one-line version of a function, they are
 not equivalent to inline statements in C or C++, whose purpose is by passing function
 stack allocation during invocation for performance reasons.

 The syntax of lambda functions contains only a single statement,
 which is as follows:

 lambda [arg1 [,arg2, ... argn]]:expression

 sum = lambda arg1, arg2: arg1 + arg2;


 print "Value of total : ", sum( 10, 20 )
 print "Value of total : ", sum( 20, 20 )


 Value of total :  30
 Value of total :  40

******* The Python Standart Library
******** urlparse - Parse URLs into components
 Note
 The urlparse module is renamed to urllib.parse in Python 3. The 2to3 tool will automatically adapt imports when converting your sources to Python 3

 This module defines a standard interface to break Uniform Resource Locator (URL) strings up in components (addressing scheme, network location, path etc.), to combine the components back into a URL string, and to convert a “relative URL” to an absolute URL given a “base URL.”

 The urlparse module defines the following functions:

 urlparse.urlparse(urlstring[, scheme[, allow_fragments]])

     Parse a URL into six components, returning a 6-tuple. This corresponds to the general structure of a URL: scheme://netloc/path;parameters?query#fragment. Each tuple item is a string, possibly empty. The components are not broken up in smaller parts (for example, the network location is a single string), and % escapes are not expanded. The delimiters as shown above are not part of the result, except for a leading slash in the path component, which is retained if present. For example:

 >>> from urlparse import urlparse
 >>> o = urlparse('http://www.cwi.nl:80/%7Eguido/Python.html')
 >>> o   
 ParseResult(scheme='http', netloc='www.cwi.nl:80', path='/%7Eguido/Python.html',
             params='', query='', fragment='')
 >>> o.scheme
 'http'
 >>> o.port
 80
 >>> o.geturl()
 'http://www.cwi.nl:80/%7Eguido/Python.html

 urlparse.urljoin(base, url[, allow_fragments])

 Construct a full (“absolute”) URL by combining a “base URL” (base) with another URL (url). Informally, this uses components of the base URL, in particular the addressing scheme, the network location and (part of) the path, to provide missing components in the relative URL. For example:
 >>>

 >>> from urlparse import urljoin
 >>> urljoin('http://www.cwi.nl/%7Eguido/Python.html', 'FAQ.html')
 'http://www.cwi.nl/%7Eguido/FAQ.html'


 Note

 If url is an absolute URL (that is, starting with // or scheme://), the url‘s host name and/or scheme will be present in the result. For example:
 >>>

 >>> urljoin('http://www.cwi.nl/%7Eguido/Python.html',
 ...         '//www.python.org/%7Eguido')
 'http://www.python.org/%7Eguido'

 If you do not want that behavior, preprocess the url with urlsplit() and urlunsplit(), removing possiblorae scheme and netloc parts.


******* Built-in Types and the Object Model
******* Collection Types
******* Handling Exceptions
******* Comprehensions, Iterebles, and Generators
******* Defining New Types with Classes
******* Files and Resource Management
******* Language Reference
******* Regular Expressions

 In computing, a regular expression, also referred to as "regex" or "regexp", provides a concise and flexible
 means for matching string of text, such as particular characters, words, or pattern of characters. A regular
 expression is written in a formal language that can be interpreted by a regular expression processor.
 Really clever "wild card" expressions for matching and parsing strings.

******** Regular Expression Quick Guide

 ^ Matches the beginning of a line
 $ Matches the end of the line
 . Matches any character
 \s Matches whitespace
 \S Matches any non-whitespace character
 *Repeat a character zero or more times
 *? Repeat a character zero or more times (non-greedy)
 + Repeat a character one ore more times
 +? Repeat a character one or more times (non-greedy)
 [aeiou] Matches a single character in the listed set
 [^XYZ] Matches a single character not in the listed set
 [a-x0-9] The set of characters can include a range
 ( Indicates where string extraction is to start
 ) Indicates where string extraction is to end

******** The regular Expression Module

 Before you can use regular expression in your program, you must import the library using "import re"

 You can use re.search() to see if a string matches a regular expression, similar to using the find()
 method for string

 You can use re.findall() extract portions of a string that match your regular expression similar to a combination
 of find() and slicing: var[5:10]

******** Using re.search() like find()

 #+BEGIN_SRC python :results output session test

 hand=open ('mbox-short.txt')
 for line in hand:
     line = line.rstrip()
     if line.find('From:') >= 0:
         print line
 #+END_SRC

 #+RESULTS:
 #+begin_example
 From: stephen.marquard@uct.ac.za
 From: louis@media.berkeley.edu
 From: zqian@umich.edu
 From: rjlowe@iupui.edu
 From: zqian@umich.edu
 From: rjlowe@iupui.edu
 From: cwen@iupui.edu
 From: cwen@iupui.edu
 From: gsilver@umich.edu
 From: gsilver@umich.edu
 From: zqian@umich.edu
 From: gsilver@umich.edu
 From: wagnermr@iupui.edu
 From: zqian@umich.edu
 From: antranig@caret.cam.ac.uk
 From: gopal.ramasammycook@gmail.com
 From: david.horwitz@uct.ac.za
 From: david.horwitz@uct.ac.za
 From: david.horwitz@uct.ac.za
 From: david.horwitz@uct.ac.za
 From: stephen.marquard@uct.ac.za
 From: louis@media.berkeley.edu
 From: louis@media.berkeley.edu
 From: ray@media.berkeley.edu
 From: cwen@iupui.edu
 From: cwen@iupui.edu
 From: cwen@iupui.edu
 #+end_example

 #+BEGIN_SRC python :results output session test
 import re

 hand = open('mbox-short.txt')
 for line in hand:
     line = line.rstrip()
     if re.search('From:', line) :
         print line
 #+END_SRC

 #+RESULTS:
 #+begin_example
 From: stephen.marquard@uct.ac.za
 From: louis@media.berkeley.edu
 From: zqian@umich.edu
 From: rjlowe@iupui.edu
 From: zqian@umich.edu
 From: rjlowe@iupui.edu
 From: cwen@iupui.edu
 From: cwen@iupui.edu
 From: gsilver@umich.edu
 From: gsilver@umich.edu
 From: zqian@umich.edu
 From: gsilver@umich.edu
 From: wagnermr@iupui.edu
 From: zqian@umich.edu
 From: antranig@caret.cam.ac.uk
 From: gopal.ramasammycook@gmail.com
 From: david.horwitz@uct.ac.za
 From: david.horwitz@uct.ac.za
 From: david.horwitz@uct.ac.za
 From: david.horwitz@uct.ac.za
 From: stephen.marquard@uct.ac.za
 From: louis@media.berkeley.edu
 From: louis@media.berkeley.edu
 From: ray@media.berkeley.edu
 From: cwen@iupui.edu
 From: cwen@iupui.edu
 From: cwen@iupui.edu
 #+end_example

******** Using re.search() like startswith()

 #+BEGIN_SRC python :results output session test

 hand = open('mbox-short.txt')
 for line in hand:
     line = line.rstrip()
     if line.startswith('From:') :
         print line

 #+END_SRC

 #+RESULTS:
 #+begin_example
 From: stephen.marquard@uct.ac.za
 From: louis@media.berkeley.edu
 From: zqian@umich.edu
 From: rjlowe@iupui.edu
 From: zqian@umich.edu
 From: rjlowe@iupui.edu
 From: cwen@iupui.edu
 From: cwen@iupui.edu
 From: gsilver@umich.edu
 From: gsilver@umich.edu
 From: zqian@umich.edu
 From: gsilver@umich.edu
 From: wagnermr@iupui.edu
 From: zqian@umich.edu
 From: antranig@caret.cam.ac.uk
 From: gopal.ramasammycook@gmail.com
 From: david.horwitz@uct.ac.za
 From: david.horwitz@uct.ac.za
 From: david.horwitz@uct.ac.za
 From: david.horwitz@uct.ac.za
 From: stephen.marquard@uct.ac.za
 From: louis@media.berkeley.edu
 From: louis@media.berkeley.edu
 From: ray@media.berkeley.edu
 From: cwen@iupui.edu
 From: cwen@iupui.edu
 From: cwen@iupui.edu
 #+end_example

 #+BEGIN_SRC python :results output session test

 import re

 hand = open('mbox-short.txt')
 for line in hand:
     line = line.rstrip()
     if re.search('^From:', line) :
         print line

 #+END_SRC

 #+RESULTS:
 #+begin_example
 From: stephen.marquard@uct.ac.za
 From: louis@media.berkeley.edu
 From: zqian@umich.edu
 From: rjlowe@iupui.edu
 From: zqian@umich.edu
 From: rjlowe@iupui.edu
 From: cwen@iupui.edu
 From: cwen@iupui.edu
 From: gsilver@umich.edu
 From: gsilver@umich.edu
 From: zqian@umich.edu
 From: gsilver@umich.edu
 From: wagnermr@iupui.edu
 From: zqian@umich.edu
 From: antranig@caret.cam.ac.uk
 From: gopal.ramasammycook@gmail.com
 From: david.horwitz@uct.ac.za
 From: david.horwitz@uct.ac.za
 From: david.horwitz@uct.ac.za
 From: david.horwitz@uct.ac.za
 From: stephen.marquard@uct.ac.za
 From: louis@media.berkeley.edu
 From: louis@media.berkeley.edu
 From: ray@media.berkeley.edu
 From: cwen@iupui.edu
 From: cwen@iupui.edu
 From: cwen@iupui.edu
 #+end_example

******** Wild-Card Characters, fine-tuning your match

 The DOT character matches any character
 If you add the ASTERICS character, the character is 'any number of times'

 X-Sieve: CMU Sieve 2.3
 X-DSPAM-Result: Innocent
 X-DSPAM-Confidence: 0.8475
 X-Content-Type-Message-Body: text/plain

 ^X.*:

 '^' - Match the staer of the line
 '.' - Match any character
 '*' - Many times

 Depending on how "clean" your data is and the purpose of your application, you may want tonarrow your match down a bit:

 ^X-\S+:

 '^' - match the start of the line
 '\' - match any non-whitespace character
 '+' - one ore more times

******** Matching and Extracting data

 The re.search() returns a True/False depending on whether the string matches the regular expression.

 If you actually want the matching string to be extracted, we use re.findall()

 #+BEGIN_SRC python :results output session test

 import re

 x = 'My 2 favorite numbers are 19 and 42'
 y = re.findall('[0-9]+',x)
 print y

 #+END_SRC

 #+RESULTS:
 : ['2', '19', '42']


******** Greedy Matching
 The repeat characters (* and +) push outward in both directions (greedy) to match the largest possible string
 #



 The repeat characters (* and +) push outward in both directions (greedy) to match the largest possible string

 #+BEGIN_SRC python :results output session test

 import re
 x = 'From: Using the : character'
 y = re.findall('^F.+:', x)
 print y

 #+END_SRC

 #+RESULTS:
 : ['From: Using the :']

 '^F.+:'

 ^F - first character in the match is an F
 .+ - one or more characters
 : - last character in the match is a ':'

******** Non-greedy Matching

 Not all regular expression repeat codes are greedy. If you add a '?' character.the + and * chill out a bit.

 #+BEGIN_SRC python :results output session test

 import re
 x = 'From: Using the : character'
 y = re.findall('^F.+?:', x)
 print y

 #+END_SRC

 #+RESULTS:
 : ['From:']

 ^F - first character in the match is an F
 .+? - one or more characters but not greedy
 : - last character in the match is a ':'

******** Fine-Tuning String Extraction

 You can refine the match for re.findall() and separately determine which portion of the match is to be extracted by using parentheses

 #+BEGIN_SRC python :results output session test

 import re

 x = 'From stephen.marquard@utc.ac.za Sat Jan 5 09:14:16 2008'
 y = re.findall('\S+@\S+', x)
 print y

 #+END_SRC

 #+RESULTS:
 : ['stephen.marquard@utc.ac.za']

 \S+@\S+  - at least one non-whitespace character

 Parentheses are not part of the match - but they tell where to start and stop what string to extract

 #+BEGIN_SRC python :results output session test

 import re

 x = 'From stephen.marquard@utc.ac.za Sat Jan 5 09:14:16 2008'
 y = re.findall('^From.*?(\S+@\S+)', x)
 print y

 #+END_SRC

 #+RESULTS:
 : ['stephen.marquard@utc.ac.za']

******** The split (regex version)

 #+BEGIN_SRC python :results output session test

 import re
 lin = 'From stephen.marcuard@uct.ac.za Sat Jan 5 09:14:16 2008'
 y = re.findall('@([^ ]*)', lin)
 print y

 #+END_SRC

 #+RESULTS:
 : ['uct.ac.za']

 '@([^ ]*)' 

 @ - look through the string until you find an at sign

 [^ ] - match non-blank character

 '*' - match many of them

 ([^ ]*) - extract the non-blank characters

******** The split (regex version #2)

 #+BEGIN_SRC python :results output session test

 import re
 lin = 'From stephen.marquard@uct.ac.za Sat Jan 5 09:14:16 2008'
 y = re.findall('^From .*@([^ ]*)', lin)
 print y

 #+END_SRC

 #+RESULTS:
 : ['uct.ac.za']

 ^From - starting at the beginning of the line, look for the string 'From'
 .*@ - skip a bunch of characters, looking for an at sign
 ( - start extracting
 [^ ]* - match non-blank character, '*' - match many of them
 ) - stop extracting

******** 'Spam Confidence'

 #+BEGIN_SRC python :results output session test

 import re
 hand = open('mbox-short.txt')
 numlist = list()
 for line in hand:
     line = line.rstrip()
     stuff = re.findall('^X-DSPAM-Confidence: ([0-9.]+)', line)
     if len(stuff) != 1 : continue
     num = float(stuff[0])
     numlist.append(num)
 print 'Maximum:', max(numlist)

 #+END_SRC

 #+RESULTS:
 : Maximum: 0.9907

******** Escape character

 If you want a special regular expression character to just behave normally (most of the time) you prefix it with '\'

 #+BEGIN_SRC python :results output session test

 import re
 x = 'We just received $10.00 for cookies.'
 y = re.findall('\$[0-9.]+', x)
 print y

 #+END_SRC

 #+RESULTS:
 : ['$10.00']

 \$[0-9.]+

 $ - a real dollar sign
 [0-9.] - a digit or period
 + - a least one or more

******* Python - random.uniform
 random.uniform(a, b)
 Return a random floating point number N such that a <= N <= b for a <= b and b <= N <= a for b < a.

 The end-point value b may or may not be included in the range depending on floating-point rounding in the equation a + (b-a) * random().

******* Practice, practice, practice


 import scrapy

 import requests
 from scrapy.http import Request

 import scrapy
 from FinalSpider.items import Page  # Defined in items.py

 URL = "http://url.com=%d"
 starting_number = 60000
 number_of_pages = 100
 class FinalSpider(scrapy.Spider):
 name = "FinalSpider"
 allowed_domains = ['url.com']
 start_urls = [URL % starting_number]

 def __init__(self):
     self.page_number = starting_number
 def start_request(self):
     # generate page IDs from 1000 down to 501
     for i in range (self.page_number, number_of_pages, -1):
         yield Request(url = URL % i, callback=self.parse)


 def parse(self, response):
     for link in response.xpath('//a[text()="Amount"]/@href').extract():
         yield Page(url=link)



 #2 

 import re
 import os
 import sys
 import json

 from scrapy.spider import Spider
 from scrapy.selector import Selector

 searchstrings = "wnd.config"
 searchoutcome = "searchResults.json"


 class wndSpider(Spider):
     name = "wnd"
     allowed_domains = ['google.com']
     url_prefix = []
     #start_urls = ['https://www.google.com/search?q=']
     start_urls = ['https://www.duckduckgo.com/?q=']
     for line in open(searchstrings, 'r').readlines():
         url_prefix = start_urls[0] + line
         #url = url_prefix[0] + line


         #f = open(searchstrings
         #start_urls = [url_prefix]
         #for f in f.readlines():
         #f.close()


         def parse(self, response):
             sel = Selector(response)
             goog_search_list = sel.xpath('//h3/a/@href').extract()

 You need to append url to start_urls in the forloop.

 start_urls = []
 base_url = 'https://www.duckduckgo.com/?q='
 for line in open(searchstrings, 'r'):
     url = base + line.strip()
     start_urls.append(url)
 If your keywords contains special characters, try urllib.urlencode


 Parsing sites with search form

 from scrapy.spider import BaseSpider
 from scrapy.selector import HtmlXPathSelector
 from scrapy.http import FormRequest, Request

 from robots_immo.items import AnnonceItem

 class ElyseAvenueSpider(BaseSpider):

     name = "elyse_avenue"
     allowed_domains = ["elyseavenue.com"] # i fixed this
     start_urls = ["http://www.elyseavenue.com/"] # i added this

     def parse(self, response):
         yield FormRequest.from_response(response, formname='moteurRecherche', formdata={'recherche_distance_km_0':'20', 'recherche_type_logement':'9'}, callback=self.parseAnnonces)

     def parseAnnonces(self, response):
         hxs = HtmlXPathSelector(response)
         annonces = hxs.select('//div[@id="contenuCentre"]/div[@class="blocVignetteBien"]')
         items = []
         for annonce in annonces:
             item = AnnonceItem()
             item['nom'] = annonce.select('span[contains(@class,"nomBienImmo")]/a/text()').extract()
             item['superficie'] = annonce.select('table//tr[2]/td[2]/span/text()').extract()
             item['prix'] = annonce.select('span[@class="prixVignette"]/span[1]/text()').extract()
             items.append(item)
         return items



 Write to MySQL:

 import sys
 import MySQLdb
 import hashlib
 from scrapy.exceptions import DropItem
 from scrapy.http import Request

 class MySQLStorePipeline(object):
   def __init__(self):
     self.conn = MySQLdb.connect(user='user', 'passwd', 'dbname', 'host', charset="utf8", use_unicode=True)
     self.cursor = self.conn.cursor()

 def process_item(self, item, spider):    
     try:
         self.cursor.execute("""INSERT INTO example_book_store (book_name, price)  
                         VALUES (%s, %s)""", 
			(item['book_name'].encode('utf-8'), 
                         item['price'].encode('utf-8')))

         self.conn.commit()


     except MySQLdb.Error, e:
         print "Error %d: %s" % (e.args[0], e.args[1])


     return item

*** Python 2 Tutorial (Bernd Klein)
**** History and Philosophy of Python
**** Why Python?
**** Interactive Mode
**** Execute a Script
**** Structuring with Indentation
**** Data Types and Variables
     In the following line of code, we assign the value 50 to a variable:

     i = 50

     The equal "=" sign in the assignment shouldn't be seen as "is equal to".
     It should be "read" or interpreted as "is set to", meaning in our example
     "the variable i is set to 42". Now we will increase the value of this
     variable by 5:

     #+BEGIN_SRC python :results output
     i = 50
     i = i + 5
     print i
     #+END_SRC

     #+RESULTS:
     : 55

     The name of a variable is an identifier, but a variable is "more than
     a name". A variable has a name, in most cases a type, a scope, and above
     all a value. Besides this, an identifier is not only used for variables.
     An identifier can denote various entities like variables, types, labels,
     subroutines or functions, packages and so on.

     Naming Identifiers of Variables


     Every language has rules for naming identifiers. The rules in Python are t
     he following:
     - The start character can be the underscore "_" or a capital or lower case
       letter.
     - The letters following the start character can be anything which is
       permitted as a start character plus the digits.
     - Python keywords are not allowed as identifier names.

       Changing Data Types and Storage locations

       The type of a variable can change during the execution of the script.

       i = 42             # data type is implicitly set to integer
       i = 42 + 0.11      # data type is changed to float
       i = "fourty"       # and now it will be a string

       Variables and memory locations

       #+BEGIN_SRC python :results output
       x = 3
       y = x
       y = 2
       print x
       print y
       #+END_SRC

       #+RESULTS:
       : 3
       : 2

       The first assignment is not problematic: Python chooses a memory
       location for x and saves the integer value 3. The second assignment is
       more worthwhile: Intuitively, you may assume that Python will find
       another location for the variable y and will copy the value of 3 in this
       place. But Python goes his own way, which differs from our intuition and
       the ways of C and C++. As both variables will have the same value after
       the assignment, Python lets y point to the memory location of x.

       #+BEGIN_SRC python :results output
       x = 3
       print id(x)
       y = x
       print id(y)
       y = 2
       print id(y)
       print id(x)
       #+END_SRC

       #+RESULTS:
       : 142784664
       : 142784664
       : 142784676
       : 142784664

       Numbers

       Python's bult-in core data types are in some cases also called object
       types. There are four built-in data types for numbers:

       - Integer
	 - Normal integers
	   e.g. 4321
	 - Octal literals (base 8)
	   A number prefixed by a 0 (zero):
	   #+BEGIN_SRC python :results output
	   a = 010
	   print a
	   #+END_SRC

	   #+RESULTS:
	   : 8

	 - Hexadecimal literals (base 16)
	   Hexadecimal literals have to be prefixed either by "0x" or "0X":
	   #+BEGIN_SRC python :results output
	   hex_number = 0xA0F
	   print hex_number
	   #+END_SRC

	   #+RESULTS:
	   : 2575
       - Long integers
	 these numbers are of unlimited size
	 e.g. 42000000000000000000L
       - Floating-point numbers: 42.11, 3.1415e-10
       - Complex numbers
	 Complex numbers are written as <real part> + <imaginary part>j

	 #+BEGIN_SRC python results output
	 x = 3 + 4j
	 y = 2 - 3j
	 z = x + y
	 print z
	 #+END_SRC

	 #+RESULTS:
	 : (5+1j)

	 Strings

	 Another important data type besides numbers are strings.
	 Strings are marked by quotes:

	 - Wrapped with the single-quote ( ' ) character:
	   'This is a string with single quotes'
	 - Wrapped with the double-quote ( " ) character:
	   "Obama's dog is called Bo"
	 - Wrapped with three characters, using either single-quote or
	   double-quote:
	   '''A string in triple quotes can extend
	   over multiple lines like this one, and can contain
	   'single' and "double" quotes.'''

	 A string in Python consists of a series or sequence of characters -
	 letters, numbers, and special characters. Strings can be indexed.
	 The first character of a string has the index 0.

	 #+BEGIN_SRC python :results output
	 s = "A string consists of characters"
	 print s[0]
	 print s[3]
	 #+END_SRC

	 #+RESULTS:
	 : A
	 : t

	 The last character of a string can be accessed like this:

	 #+BEGIN_SRC python :results output
	 s = "A string consists of characters"
	 print s[len(s)-1]
	 #+END_SRC

	 #+RESULTS:
	 : s

	 There is an easier way in Python. The last character can be accessed
	 with -1, the second to last -2 and so on:

	 #+BEGIN_SRC python :results output
	 s = "A string consists of characters"
	 print s[-1]
	 print s[-2]
	 #+END_SRC

	 #+RESULTS:
	 : s
	 : r

	 Some operators and functions for strings:

	 - Concatenation

	   #+BEGIN_SRC python :results output
	   print "Hello" + "World"
	   #+END_SRC

	   #+RESULTS:
	   : HelloWorld

	 - Repetition
	   String can be repeated or repeatedly concatenated with the
	   asterisk operator "*":

	   #+BEGIN_SRC python :results output
	   print "*-*" * 3
	   #+END_SRC

	   #+RESULTS:
	   : *-**-**-*

	 - Indexing

	   #+BEGIN_SRC python :results output
	   print "Python"[0]
	   #+END_SRC

	   #+RESULTS:
	   : P

	 - Slicing

	   #+BEGIN_SRC python :results output
	   print "Python"[2:4]
	   #+END_SRC

	   #+RESULTS:
	   : th

	 - Size

	   #+BEGIN_SRC python :results output
	   print len("Python")
	   #+END_SRC

	   #+RESULTS:
	   : 6

	   Escape sequences

	   \newline   Ignored
	   \\  Backslash (\)
	   \'  Single quote (')
	   \"  Double quote (")
	   \a   ASCII Bell (BEL)
	   \b   ASCII Backspace (BS)
	   \f   ASCII Formfeed (FF)
	   \n   ASCII Linefeed (LF)
	   \N{name}   Character named name in the Unicode database
	   (Unicode only)
	   \r   ASCII Carriage Return (CR)
	   \t   ASCII Horizontal Tab (TAB)
	   \uxxxx   Character with 16-bit hex value xxxx (Unicode only)
	   \Uxxxxxxxx   Character with 32-bit hex value xxxxxxxx (Unicode only)
	   \v   ASCII Vertical Tab (VT)
	   \ooo   Character with octal value ooo
	   \xhh   Character with hex value hh

**** Operators
     | Operator     | Description                      | Example        |
     |--------------+----------------------------------+----------------|
     | +, -         | Addition, subtraction            | 10 - 3         |
     | *, /, %      | Multiplication, Division, Modulo | 27 % 7         |
     |              |                                  | Result: 6      |
     | //           | Truncation divisions. The result | 10 // 3        |
     |              | of this division is the integral | Result: 3      |
     |              | part of the result               | 10.0 // 3      |
     |              |                                  | Result 3.0     |
     | +x, -x       | Unary minus and Unary plus       | -3             |
     | ~x           | Bitwise negation                 | ~3 - 4         |
     |              |                                  | Result: ~8     |
     | **           | Exponentiation                   | 10 ** 3        |
     |              |                                  | Result: 1000   |
     | or, and, not | Boolean Or, And, Not             | (a or b)       |
     |              |                                  | not c          |
     | in           | "Element of"                     | 1 in [3, 2, 1] |
     | , >=, !=, == | The usual comparison operators   |                |
     | |, &, ^      | Bitwise Or, And, XOR             | 6 ^ 3          |

**** input and raw_input via the keyboard

     The input function

     #+BEGIN_SRC python :results output :preamble def input(x): return "Anton" 
     name = input("What's your name?")
     print("Nice to meet you " + name + "!")
     #+END_SRC

     #+RESULTS:
     : Nice to meet you Anton!


     #+BEGIN_SRC python :results output :preamble def input(x): return 38
     age = input("Your age?")
     print("So, you are already " + str(age) + " years old, " + "Anton" + "!")
     #+END_SRC

     #+RESULTS:
     : So, you are already 38 years old, Anton!

     Input interprets the input. That's the reason, why we had to cast the
     variable "age" into a string. If you don't wrap your name into quotes,
     Python takes your name as a variable.

     Input with raw_input()

     raw_input does not interpret the input. It always returns the input of the
     user without changes, i.e. raw. This raw input can be changed into the
     data type needed for the algorithm. To accomplish this we can use either
     a casting function or the eval function.

     #+BEGIN_SRC python :results output :preamble def raw_input(x): return "38"
     age = raw_input("Your age? ")
     print(age, type(age))
     #+END_SRC

     #+RESULTS:
     : ('38', <type 'str'>)

     #+BEGIN_SRC python :results output :preamble def raw_input(x): return "38"
     age = int(raw_input("Your age? "))
     print(age, type(age))
     #+END_SRC

     #+RESULTS:
     : (38, <type 'int'>)


     In [2]: programming_language = raw_input("Your favourite programming langu
     ages? ")

     Your favourite programming languages? Python, JS

     In [3]: print(programming_language, type(programming_language))
     ('Python, JS', <type 'str'>)



     In [6]: programming_language = eval(raw_input("Your favourite programming
     languages? "))
     Your favourite programming languages? "Python, JS"

     In [7]: print(programming_language, type(programming_language))
     ('Python, JS', <type 'str'>)

     In [8]: programming_language = eval(raw_input("Your favourite programming
     languages? "))
     Your favourite programming languages? ["Python", "JS"]


     In [9]: print(programming_language, type(programming_language))
     (['Python', 'JS' ], <type 'list'>)


     Using the casting function list in the last example, doesn't return, what
     some readers might expect:


     In [10]:  programming_language = list(raw_input("Your favourite programmin
     g languages? "))

     Your favourite programming languages? ["Python", "JS"]

     In [11]: print(programming_language, type(programming_language))
     (['[', '"', 'P', 'y', 't', 'h', 'o', 'n', '"', ',', ' ', '"', 'J', 'S', '"
     ', ']'], <type 'list'>)

**** Conditional Statements
     The general form of the if statement in Python looks like this:
     if condition_1:
         statement_block_1
     elif condition_2:
         statement_block_2
     else:
         statement_block_3

     #+BEGIN_SRC python :results output
     age = 4
     if age < 0:
	 print "This can hardly be true!"
     elif age == 1:
	 print "about 14 human years"
     elif age == 2:
	 print "about 22 human years"
     elif age > 2:
	 human = 22 + (age -2)*5
	 print "Human years: ", human
     #+END_SRC

     #+RESULTS:
     : Human years:  32

     True or False

     The following objects are evaluated by Python as False:

     - numerical zero values (0, 0L, 0.0, 0.0+0.0j),
     - the Boolean value False,
     - empty strings,
     - empty lists and empty tuples,
     - empty dictionaries.
     - plus the special value None.

     All other values are considered to be True.
**** While Loops
     The following small script calculates the sum of the numbers from 1
     to 10:
     #+BEGIN_SRC python :results output
     n = 10
     sum = 0
     i = 1
     while i <= n:
	sum = sum + i
  	 i = i + 1
     print "Sum of 1 until %d: %d" % (n,sum)
     #+END_SRC

     #+RESULTS:
     : Sum of 1 until 10: 55

     Python has these three channels as well:

     - standard input
     - standard output
     - standard error

     They are contained in the module sys. Their names are:

     - sys.stdin
     - sys.stdout
     - sys.stderror


     How to read with a while loop character by character from standard
     input (keyboard):

     import sys

     text = ""
     while 1:
	c = sys.stdin.read(1)
	text = text + c
	if c == '\n':
            break

     print "Input: %s" % text

     The general syntax of a while loop looks like this:

     while condition:
     statement_1
     ...
     statement_n
     else:
     statement_1
     ...
     statement_n

     #+BEGIN_SRC python :results output :preamble def input(x): return 5
     import random
     n = 20
     to_be_guessed = int(n * random.random()) + 1
     guess = 0
     while guess != to_be_guessed:
         guess = input("New number: ")
	 if guess > 0:
	     if guess > to_be_guessed:
	         print "Number too large"
             else:
	         print "Number too small"
	 else:
	     print "Sorry that you're giving up!"
	     break
     else:
         print "Congratulation. You made it!"
     #+END_SRC

     #+RESULTS:
     : Number too small

**** For Loops

     Syntax of the For Loop:

     for variable in sequence:
	 Statement1
	 Statement2
	 ...
	 Statementn

     else:
	 Else-Statement1
	 Else-Statement2
	 ...
	 Else-Statementm

     Example of a for loop in Python:

     #+BEGIN_SRC python :results output
     languages = ["C", "C++", "Perl", "Python"]
     for x in languages:
         print x
     #+END_SRC

     #+RESULTS:
     : C
     : C++
     : Perl
     : Python

     The range() Function

     range(n) generates the progression of integer numbers starting with 0 and
     ending with (n -1).

     #+BEGIN_SRC python :results output
     print range(10)
     #+END_SRC

     #+RESULTS:
     : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

     range() can also be called with two arguments:
     range(begin, end)

     #+BEGIN_SRC python :results output
     print range(4,10)
     #+END_SRC

     #+RESULTS:
     : [4, 5, 6, 7, 8, 9]

     and with three arguments:
     range(begin, end, step)

     #+BEGIN_SRC python :results output
     print range(4,50,5)
     #+END_SRC

     #+RESULTS:
     : [4, 9, 14, 19, 24, 29, 34, 39, 44, 49]

     The range() function is especially useful in combination with the
     for loop.

     #+BEGIN_SRC python :results output
     n = 101
     sum = 0
     for i in range(1, n):
         sum = sum + i
     print sum
     #+END_SRC

     #+RESULTS:
     : 5050

     Iteration over lists with range()

     #+BEGIN_SRC python :results output
     fibonacci = [0,1,1,2,3,5,8,13,21]
     for i in range(len(fibonacci)):
         print i, fibonacci[i]
     print
     #+END_SRC

     #+RESULTS:
     #+begin_example
     0 0
     1 1
     2 1
     3 2
     4 3
     5 5
     6 8
     7 13
     8 21

     #+end_example

     List iteration with Side Effects

     #+BEGIN_SRC python :results output
     colours = ["red"]
     for i in colours:
         if i == "red":
	     colours += ["black"]
	 if i == "black":
	     colours += ["white"]
     print colours
     #+END_SRC

     #+RESULTS:
     : ['red', 'black', 'white']

     To avoid these side effects, it's best to work on a copy by using the
     slicing operator:

     #+BEGIN_SRC python :results output
     colours = ["red"]
     for i in colours[:]:
         if i == "red":
	     colours += ["black"]
	 if i == "black":
	     colours += ["white"]
     print colours
     #+END_SRC

     #+RESULTS:
     : ['red', 'black']

**** Formatted output
     print

     #+BEGIN_SRC python :results output
     print "Hello user"
     answer = 42
     print "The answer is " + str(answer)
     #+END_SRC

     #+RESULTS:
     : Hello user
     : The answer is 42

     It's possible to put the arguments inside of parentheses:

     #+BEGIN_SRC python :results output
     print ("Hello")
     print ("Hello", "Python")
     print "Hello", "Python"
     #+END_SRC

     #+RESULTS:
     : Hello
     : ('Hello', 'Python')
     : Hello Python

     If you want the same output behaviour as in Python 3, you should use an
     import from the "future":

     #+BEGIN_SRC python :results output
     from __future__ import print_function
     print("Hello", "Python")
     #+END_SRC

     #+RESULTS:
     : Hello Python

**** Output with Print
**** Sequential Data Types
     Python lists

     An example of a list

     #+BEGIN_SRC python :results output
     languages = ["Python", "C", "C++", "Java", "Perl"]
     print languages[0]
     print languages[1]
     print languages[2]
     print languages[3]
     #+END_SRC

     #+RESULTS:
     : Python
     : C
     : C++
     : Java

     Lists can have various data types:

     group = ["Bob", 23, "George", 72, "Myriam", 29]

     Sublists

     Lists can have sublists as elements. These sublists may contain
     sublists  as well, i.e. lists can be recursively constructed by
     sublist structures.

     #+BEGIN_SRC python :results output
     person = [["Marc","Mayer"],["17, Oxford Str", "12345","London"],"07876-7876"]
     name = person[0]
     first_name = person[0][0]
     last_name = person[0][1]
     adress = person[1][0]
     print name
     print first_name
     print last_name
     print adress
     #+END_SRC

     #+RESULTS:
     : ['Marc', 'Mayer']
     : Marc
     : Mayer
     : 17, Oxford Str

     #+BEGIN_SRC python :results output
     complex_list = [["a",["b",["c","x"]]]]
     complex_list = [["a",["b",["c","x"]]],42]
     print complex_list[0][1]
     print complex_list[0][1][1][0]
     #+END_SRC

     #+RESULTS:
     : ['b', ['c', 'x']]
     : c

     Tuples

       A tuple is an immutable list, i.e. a tuple cannot be changed in
       any way once it has been created.

       * Tuples are faster than lists.

       * If you know that some data doesn't have to be changed, you should
	 use tuples instead of lists, because this protects your data
	 against accidental changes.

       * Tuples can be used as keys in dictionaries, while lists can't.


       In [7]: t = ("tuples", "are", "immutable")

       In [8]: t[0]
       Out[8]: 'tuples'

       In [9]: t[0] = "assignments to elements are not possible"
       ------------------------------------------------------------------------
       TypeError                            Traceback (most recent call last)
       <ipython-input-9-e19eba005c73> in <module>()
       ----> 1 t[0] = "assignments to elements are not possible"

       TypeError: 'tuple' object does not support item assignment

       Slicing

       #+BEGIN_SRC python :results output
       str = "Python is great"
       first_six = str[0:6]
       starting_at_five = str[5:]
       without_last_five = str[0:-5]
       print first_six
       print starting_at_five
       print without_last_five
       #+END_SRC

       #+RESULTS:
       : Python
       : n is great
       : Python is

       Syntactically, there is no difference on lists:

       #+BEGIN_SRC python :results output
       languages = ["Python", "C", "C++", "Java", "Perl"]
       some_languages = languages[2:4]
       without_perl = languages[0:-1]
       print some_languages
       print without_perl
       #+END_SRC

       #+RESULTS:
       : ['C++', 'Java']
       : ['Python', 'C', 'C++', 'Java']

       Slicing works with three arguments as well. If the third
       argument is for example 3, only every third element of the list,
       string or tuple from the range of the first two arguments will
       be taken. If s is a sequential data type, it works like this:

       s[begin: end: step]

       #+BEGIN_SRC python :results output
       str = "Python under Linux is great"
       print str[::3]
       #+END_SRC

       #+RESULTS:
       : Ph d n  e

       Length

       #+BEGIN_SRC python :results output
       txt = "Hello World"
       a = ["Swen", 45, 3.54, "Basel"]
       print len(txt)
       print len(a)
       #+END_SRC

       #+RESULTS:
       : 11
       : 4

       Concatenation of Sequences

       #+BEGIN_SRC python :results output
       firstname = "Homer"
       surname = "Simpson"
       name = firstname + " " + surname
       print name
       #+END_SRC

       #+RESULTS:
       : Homer Simpson

       It's as simple for lists:

       #+BEGIN_SRC python :results output
       colours1 = ["red", "green", "blue"]
       colours2 = ["black", "white"]
       colours = colours1 + colours2
       print colours
       #+END_SRC

       #+RESULTS:
       : ['red', 'green', 'blue', 'black', 'white']

       Checking if an element is contained in list

       #+BEGIN_SRC python :results output
       abc = ["a", "b", "c", "d", "e"]
       print "a" in abc
       print "a" not in abc
       #+END_SRC

       #+RESULTS:
       : True
       : False

       Repetitions

       #+BEGIN_SRC python :results output
       a = 3 * "xyz-"
       b = "xyz-" * 3
       c = 3 * ["a", "b", "c"]
       print a
       print b
       print c
       #+END_SRC

       #+RESULTS:
       : xyz-xyz-xyz-
       : xyz-xyz-xyz-
       : ['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c']

       The augmented assignment for "*" can be used as well:
       s *= n	is the same as  s = s * n.

       We can apply the repetition operator to nested lists:

       #+BEGIN_SRC python :results output
       x = ["a", "b", "c"]
       y = [x] * 4
       print y
       y[0][0] = "P"
       print y
       #+END_SRC

       #+RESULTS:
       : [['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']]
       : [['P', 'b', 'c'], ['P', 'b', 'c'], ['P', 'b', 'c'], ['P', 'b', 'c']]

**** Dictionaries
     #+BEGIN_SRC python :results output
     food = {"ham" : "yes", "egg" : "yes", "spam" : "no"}
     print food
     food["spam"] = "yes"
     print food
     #+END_SRC

     #+RESULTS:
     : {'egg': 'yes', 'ham': 'yes', 'spam': 'no'}
     : {'egg': 'yes', 'ham': 'yes', 'spam': 'yes'}

     #+BEGIN_SRC python :results output

     en_de = {"red" : "rot", "blue" : "blau", "yellow":"gelb"}
     print en_de
     print en_de["red"]
     de_fr = {"rot" : "rouge", "blau" : "bleu", "gelb":"jaune"}
     print "The French word for red is: " + de_fr[en_de["red"]]
     #+END_SRC

     #+RESULTS:
     : {'blue': 'blau', 'yellow': 'gelb', 'red': 'rot'}
     : rot
     : The French word for red is: rouge

     We can use arbitrary types as values in a dictionary, but there is
     a restriction for the keys. Only immutable data types can be used
     as keys, i.e. no lists or dictionaries can be used:
     If you use a mutable data type as a key, you get an error message:

     #+BEGIN_SRC python :results output
     dic = { [1,2,3]:"abc"}
     #+END_SRC

     #+RESULTS:
     Traceback (most recent call last):
     File "<stdin>", line 1, in <module>
     TypeError: unhashable type: 'list'

     Tuple as key are okey:

     #+BEGIN_SRC python :results output
     dic = { (1,2,3):"abc", 3.1415:"abc"}
     print dic
     #+END_SRC

     #+RESULTS:
     : {3.1415: 'abc', (1, 2, 3): 'abc'}

     We can create a dictionary of dictionaries:

     #+BEGIN_SRC python :results output
     en_de = {"red" : "rot",  "blue" : "blau", "yellow":"gelb"}
     de_fr = {"rot" : "rouge", "blau" : "bleu", "gelb":"jaune"}

     dictionaries = {"en_de" : en_de, "de_fr" : de_fr }
     print dictionaries["de_fr"]["blau"]
     #+END_SRC

     #+RESULTS:
     : bleu

     Operators on Dictionaries

     | Operator   | Explanation                                         |
     |------------+-----------------------------------------------------|
     | len(d)     | returns the number of stored entries, i.e.          |
     |            | the number of (key, value) pairs                    |
     | del d[k]   | deletes the key k together with his value           |
     | k in d     | True, if a key k exists in the dictionary d         |
     | k not in d | True, if a key k doesn't exists in the dictionary d |

     Important methods

     A dictionary can be copied with the method copy():

     #+BEGIN_SRC python :results output
     words = {"house" : "Haus", "cat" : "Katze"}
     w = words.copy()
     print w
     #+END_SRC

     #+RESULTS:
     : {'house': 'Haus', 'cat': 'Katze'}

     The contents of a dictionary can be cleared with the method
     clear(). The dictionary is not deleted, but set to an empty
     dictionary:

     #+BEGIN_SRC python :results output
     words = {"house" : "Haus", "cat" : "Katze"}
     w = words.copy()
     print w
     w.clear()
     print w
     #+END_SRC

     #+RESULTS:
     : {'house': 'Haus', 'cat': 'Katze'}
     : {}

     The updates method update() merges the keys and values of one
     dictionary into another, overwriting values of the same key:

     #+BEGIN_SRC python :results output
     w={"house":"Haus","cat":"Katze","red":"rot"}
     w1 = {"red":"rouge","blau":"bleu"}
     w.update(w1)
     print w
     #+END_SRC

     #+RESULTS:
     : {'house': 'Haus', 'blau': 'bleu', 'red': 'rouge', 'cat': 'Katze'}

     Iterating over a dictionary

     No method is needed to iterate over a dictionary

     #+BEGIN_SRC python :results output
     w={"house":"Haus","cat":"Katze","red":"rot"}
     for key in w:
         print key
     #+END_SRC

     #+RESULTS:
     : house
     : red
     : cat

     but it's possible to use the method iterkeys():

     #+BEGIN_SRC python :results output
     w={"house":"Haus","cat":"Katze","red":"rot"}
     for key in w.iterkeys():
         print key
     #+END_SRC

     #+RESULTS:
     : house
     : red
     : cat

     The method itervalues() is a convenient way for iterating directly
     over the values:

     #+BEGIN_SRC python :results output
     w={"house":"Haus","cat":"Katze","red":"rot"}
     for val in w.itervalues():
         print val
     #+END_SRC

     #+RESULTS:
     : Haus
     : rot
     : Katze

     Lists from dictionaries

     It's possible to create lists from dictionaries by using the
     methods items(), keys() and values().

     #+BEGIN_SRC python :results output
     w={"house":"Haus","cat":"Katze","red":"rot"}
     print w.items()
     print w.keys()
     print w.values()
     #+END_SRC

     #+RESULTS:
     : [('house', 'Haus'), ('red', 'rot'), ('cat', 'Katze')]
     : ['house', 'red', 'cat']
     : ['Haus', 'rot', 'Katze']

     Dictionaries from lists

     #+BEGIN_SRC python :results output
     dishes = ["pizza", "sauerkraut", "paella", "Hamburger"]
     countries = ["Italy", "Germany", "Spain", "USA"]
     country_specialities = zip(countries, dishes)
     print country_specialities
     #+END_SRC

     #+RESULTS:
     : [('Italy', 'pizza'), ('Germany', 'sauerkraut'), ('Spain', 'paella'), ('USA', 'Hamburger')]

     The variable country_specialities now contains the dictionary in
     the 2-tuple list form. This form can be easily trasformed into a
     real dictionary with the function dict().

     #+BEGIN_SRC python :results output
     country_specialities = [('Italy', 'pizza'), ('Germany', 'sauerkraut'), ('Spain', 'paella'), ('USA', 'Hamburger')]
     country_specialities_dict = dict(country_specialities)
     print country_specialities_dict
     #+END_SRC

     #+RESULTS:
     : {'Germany': 'sauerkraut', 'Italy': 'pizza', 'USA': 'Hamburger', 'Spain': 'paella'}

     Creating sets

     #+BEGIN_SRC python :results output
     x = set("A Python Tutorial")
     print x
     print type(x)
     #+END_SRC

     #+RESULTS:
     : set(['A', ' ', 'i', 'h', 'l', 'o', 'n', 'P', 'r', 'u', 't', 'a', 'y', 'T'])
     : <type 'set'>

     We can pass a list to the built-in set function:


     #+BEGIN_SRC python :results output
     x = set(["Perl", "Python", "Java"])
     print x
     #+END_SRC

     #+RESULTS:
     : set(['Python', 'Java', 'Perl'])

     What happens, if we pass a tuple with reappearing elements to the
     set function:

     #+BEGIN_SRC python :results output
     cities = set(("Paris", "Lyon", "London","Berlin","Paris","Birmingham"))
     print cities
     #+END_SRC

     #+RESULTS:
     : set(['Paris', 'Birmingham', 'Lyon', 'London', 'Berlin'])
     No doublets are in the resulting set of cities.

     Frozensets

     Though sets can't contain mutable objects, sets are mutable:

     #+BEGIN_SRC python :results output
     cities = set(["Frankfurt", "Basel","Freiburg"])
     cities.add("Strasbourg")
     print cities
     #+END_SRC

     #+RESULTS:
     : set(['Freiburg', 'Basel', 'Frankfurt', 'Strasbourg'])

     Frozensets are like sets expect that they cannot be changed, i.e.
     they are immutable:

     #+BEGIN_SRC python :results output
     cities = frozenset(["Frankfurt", "Basel","Freiburg"])
     cities.add("Strasbourg")
     print cities
     #+END_SRC

     #+RESULTS:
     Traceback (most recent call last):
     File "<stdin>", line 2, in <module>
     AttributeError: 'frozenset' object has no attribute 'add'

     Set operations

     add(element)

     #+BEGIN_SRC python :results output
     colours = {"red", "green"}
     colours.add("yellow")
     print colours
     #+END_SRC

     #+RESULTS:
     : set(['green', 'yellow', 'red'])

     clear()

     #+BEGIN_SRC python :results output
     cities = {"Stuttgart", "Konstanz", "Freiburg"}
     cities.clear()
     print cities
     #+END_SRC

     #+RESULTS:
     : set([])

     copy

     #+BEGIN_SRC python :results output
     more_cities = {"Winterthur","Schaffhausen","St. Gallen"}
     cities_backup = more_cities.copy()
     more_cities.clear()
     print cities_backup
     #+END_SRC

     #+RESULTS:
     : set(['St. Gallen', 'Winterthur', 'Schaffhausen'])

     difference()

     This method returns the difference of two or more sets as a new
     set.

     #+BEGIN_SRC python :results output
     x = {"a","b","c","d","e"}
     y = {"b","c"}
     z = {"c","d"}
     print x.difference(y)
     print x.difference(y).difference(z)
     #+END_SRC

     #+RESULTS:
     : set(['a', 'e', 'd'])
     : set(['a', 'e'])

     Instead of using the method difference, we can use the operator
     "-":

     #+BEGIN_SRC python :results output
     x = {"a","b","c","d","e"}
     y = {"b","c"}
     z = {"c","d"}
     print x - y
     print x - y - z
     #+END_SRC

     #+RESULTS:
     : set(['a', 'e', 'd'])
     : set(['a', 'e'])

     difference_update()

     This method removes all elements of another set from this set.
     x.difference_update(y) is the same as "x = x - y"

     #+BEGIN_SRC python :results output
     x = {"a","b","c","d","e"}
     y = {"b", "c"}
     x.difference_update(y)
     print x
     #+END_SRC

     #+RESULTS:
     : set(['a', 'e', 'd'])

     #+BEGIN_SRC python :results output
     x = {"a","b","c","d","e"}
     y = {"b", "c"}
     x = x - y
     print x
     #+END_SRC

     #+RESULTS:
     : set(['a', 'e', 'd'])

     discard(el)

     An element el will be removed from the set, if it is contained in
     the set. If el is not a member of the set, nothing will be done.

     #+BEGIN_SRC python :results output
     x = {"a", "b", "c", "d", "e"}
     x.discard("a")
     print x
     x.discard("z")
     print x
     #+END_SRC

     #+RESULTS:
     : set(['c', 'b', 'e', 'd'])
     : set(['c', 'b', 'e', 'd'])

     remove(el)

     works like discard(), but if el is not a member of the set, a
     KeyError will be raised.

     #+BEGIN_SRC python :results output
     x = {"a", "b", "c", "d", "e"}
     x.remove("a")
     print x
     #+END_SRC

     #+RESULTS:
     : set(['c', 'b', 'e', 'd'])

     #+BEGIN_SRC python :results output
     x = {"a", "b", "c", "d", "e"}
     x.remove("z")
     print x
     #+END_SRC

     #+RESULTS:
     Traceback (most recent call last):
     File "<stdin>", line 4, in <module>
     KeyError: 'z'

     intersection(s)

     Returns the intersection of the instance set and the set as a new set.

     #+BEGIN_SRC python :results output
     x = {"a","b","c","d","e"}
     y = {"c","d","e","f","g"}
     print x.intersection(y)
     #+END_SRC

     #+RESULTS:
     : set(['c', 'e', 'd'])

     This can be abbreviated with the ampersand operator "&":

     #+BEGIN_SRC python :results output
     x = {"a","b","c","d","e"}
     y = {"c","d","e","f","g"}
     print x & y
     #+END_SRC

     #+RESULTS:
     : set(['c', 'e', 'd'])


**** Shallow and Deep Copy

     Copying a list

     #+BEGIN_SRC python :results output
     colours1 = ["red", "green"]
     colours2 = colours1
     print colours2
     #+END_SRC

     #+RESULTS:
     : ['red', 'green']

     #+BEGIN_SRC python :results output
     colours1 = ["red", "green"]
     colours2 = colours1
     colours2[1] = "blue"
     print colours1
     #+END_SRC

     #+RESULTS:
     : ['red', 'blue']

     The explanation is that there has been no new assignment to colours2,
     only to one of its elements.

     #+BEGIN_SRC python :results output :session test
     colours1 = ["red", "green"]
     colours2 = colours1
     print colours2
     #+END_SRC

     #+RESULTS:
     :
     : >>> ['red', 'green']

     #+BEGIN_SRC python :results output :session test
     colours2[1] = "blue"
     print colours1
     #+END_SRC

     #+RESULTS:
     :
     : ['red', 'blue']

     Copying list with the slice operator

     It's possible to completely copy shallow list structures with the
     slice operator.

     #+BEGIN_SRC python :results output
     list1 = ['a','b','c','d']
     list2 = list1[:]
     list2[1] = 'x'
     print list2
     print list1
     #+END_SRC

     #+RESULTS:
     : ['a', 'x', 'c', 'd']
     : ['a', 'b', 'c', 'd']

     Copying lists containing sublists using the method deepcopy from
     the module copy

     #+BEGIN_SRC python :results output
     from copy import deepcopy
     lst1 = ['a','b',['ab','ba']]
     lst2 = deepcopy(lst1)
     lst2[2][1] = "d"
     lst2[0] = "c"
     print lst2
     print lst1
     #+END_SRC

     #+RESULTS:
     : ['c', 'b', ['ab', 'd']]
     : ['a', 'b', ['ab', 'ba']]

**** Functions

     #+BEGIN_SRC python :results output
     def add(x, y):
         return x + y
     print add(4, 5)
     #+END_SRC

     #+RESULTS:
     : 9

     Example of a function with optional parameters

     #+BEGIN_SRC python :results output
     def add(x, y=5):
         return x + y
     print add(4)
     #+END_SRC

     #+RESULTS:
     : 9

     Keyword parameters

     #+BEGIN_SRC python :results output
     execfile("function1.py")
     print sumsub(12,4)
     print sumsub(12,4,27,23)
     print sumsub(12,4,d=27,c=23)
     #+END_SRC

     #+RESULTS:
     : 8
     : 12
     : 4

     Arbitrary Number of Parameters

     There are many situations in programming, in which the exact number
     of necessary parameters cannot be determined. An arbitrary parameter
     number can be accomplished in Python with so-called tuple references.
     An asterisk "*" is used in front of the last parameter name to denote
     it as a tuple reference.

     #+BEGIN_SRC python :results output
     def arbitrary(x, y, *more):
         print "x=", x, ", y=", y
	 print "arbitrary: ", more
     print arbitrary(12, 4, "Hello World", 3, 4)
     #+END_SRC

     #+RESULTS:
     : x= 12 , y= 4
     : arbitrary:  ('Hello World', 3, 4)

**** Recursion and Recursive Functions

     Recursive functions in Python

     #+BEGIN_SRC python :results output
     def factorial(n):
         print("factorial has been called with n = " + str(n))
	 if n == 1:
	     return 1
	 else:
	     res = n * factorial(n-1)
	     print("intermediate result for ", n, " * factorial(" ,n-1, "): ",res)
	     return res

     print(factorial(5))

     #+END_SRC

     #+RESULTS:
     #+begin_example
     factorial has been called with n = 5
     factorial has been called with n = 4
     factorial has been called with n = 3
     factorial has been called with n = 2
     factorial has been called with n = 1
     ('intermediate result for ', 2, ' * factorial(', 1, '): ', 2)
     ('intermediate result for ', 3, ' * factorial(', 2, '): ', 6)
     ('intermediate result for ', 4, ' * factorial(', 3, '): ', 24)
     ('intermediate result for ', 5, ' * factorial(', 4, '): ', 120)
     120
 #+end_example

 Iterative version

 #+BEGIN_SRC python :results output
 def iterative_factorial(n):
     result = 1
     for i in range(2, n+1):
         result *= i
     return result
 print iterative_factorial(5)
 #+END_SRC

 #+RESULTS:
 : 120

       The Fibonacci numbers as a Python function

       #+BEGIN_SRC python :results output
       def fib(n):
	   if n == 0:
	       return 0
	   elif n == 1:
	       return 1
	   else:
	       return fib(n-1) + fib(n-2)
       print fib(3)
       #+END_SRC

       #+RESULTS:
       : 2

       Iterative solution for Fibonacci numbers

       #+BEGIN_SRC python :results output
       def fibi(n):
           a, b = 0, 1
	   for i in range(n):
	       a, b = b, a + b
	   return a
       print fibi(3)
       #+END_SRC

       #+RESULTS:
       : 2

       Exercise

       Write a function which calculates the arithmetic mean of a variable
       number of values.

       #+BEGIN_SRC python :results output
       def arithmetic_mean(x, *l):
            """ The function calculates the arithmetic mean of a non-empty
		arbitrary number of numbers """
            sum = x
            for i in l:
		sum += i

            return sum / (1.0 + len(l))
       print arithmetic_mean(4,7,9)
       #+END_SRC

       #+RESULTS:
       : 6.66666666667

**** Tests, DocTests, UnitTests
**** Memoization with Decorators
**** Passing Arguments

     Parameter Passing

     First, let's have a look at the integer variables. The parameter
     inside of the function remains a reference to the arguments variable,
     as long as the parameter is not changed. As soon as a new value will
     be assigned to it, Python creates a separate local variable. The
     caller's variable will not be changed this way

     #+BEGIN_SRC python :results output
     def ref_demo(x):
         print "x",x," id=",id(x)
     print ref_demo(42)
     print ref_demo(55)
     #+END_SRC

     #+RESULTS:
     : x 42  id= 142464708
     : x 55  id= 142464552


     id(obj) returns the "identity" of the object "obj".

     Command Line Arguments

     The following script (arguments.py) prints all arguments:

     # Module sys has to be imported:
     import sys

     # Iteration over all arguments:
     for eachArg in sys.argv:
         print eachArg

     Example call to this script:

     #+BEGIN_SRC shell :results output
     cd /home/vikky/Desktop/DVCS/stuff/scripts
     python argumente.py python is great
     #+END_SRC

     #+RESULTS:
     : argumente.py
     : python
     : is
     : great

     Variable Length of parameters

     The asterisk "*" is used in Python to define a variable number
     of arguments. The asterisk character has to precede a variable
     identifier in the parameter list

     #+BEGIN_SRC python :results output
     def varpafu(*x):
         print(x)
     print varpafu(34, "Do you like Python?", "Of course")
     #+END_SRC

     #+RESULTS:
     : (34, 'Do you like Python?', 'Of course')

     If the function is called without any arguments, the value of x is an
     empty tuple.

     In the following example, we have a positional parameter "city",
     - the main location, - which always have to be given, followed by an
     arbitrary number of other locations:

     #+BEGIN_SRC python :results output
     def locations(city, *other_cities):
         print(city, other_cities)
     print locations("Paris")
     print locations("Paris", "Strasbourg", "Lyon", "Dijon")
     #+END_SRC

     #+RESULTS:
     : ('Paris', ())
     : ('Paris', ('Strasbourg', 'Lyon', 'Dijon'))

     Arbitrary keyword parameters

     There is a mechanism for an arbitrary number of keyword parameters.
     To do this, we use the double asterisk '**' notation:

     #+BEGIN_SRC python :results output
     def f(**args):
         print(args)
     print f(de="German", en="English", fr="French")
     #+END_SRC

     #+RESULTS:
     : {'fr': 'French', 'de': 'German', 'en': 'English'}

     Double asterisk in function calls

     The following example demonstrates the usage of ** in a function call
     and usage in combination with *:

     #+BEGIN_SRC python :results output
     def f(a,b,x,y):
         print(a,b,x,y)
     d = {'a':'append', 'b':'block', 'x':'extract', 'y':'yes'}
     print f(**d)
     t = (47,11)
     d = {'x':'extract','y':'yes'}
     print f(*t, **d)
     #+END_SRC

     #+RESULTS:
     : ('append', 'block', 'extract', 'yes')
     : (47, 11, 'extract', 'yes')

**** Namespaces
**** Global vs. Local Variables
     #+BEGIN_SRC python :results output
     def f():
         print s
     s = "I hate spam"
     print f()
     #+END_SRC

     #+RESULTS:
     : I hate spam

     #+BEGIN_SRC python :results output
     def f():
         global s
	 print s
	 s = "That's clear"
	 print s
     s = "Python is great!"
     print f()
     print s
     #+END_SRC

     #+RESULTS:
     : Python is great!
     : That's clear
     : That's clear

     The following example shows a deliberate combination of local and
     global variables and function parameters:

     #+BEGIN_SRC python :results output
     def foo(x, y):
         global a
	 a = 42
	 x,y = y,x
	 b = 33
	 b = 17
	 c = 100
	 print a,b,x,y
     a,b,x,y = 1,15,3,4
     print foo(17,4)
     print a,b,x,y
     #+END_SRC

     #+RESULTS:
     : 42 17 4 17
     : 42 15 3 4

**** File Management
     #+BEGIN_SRC python :results output
     fobj = open("poem.txt")
     for line in fobj:
         print line.rstrip()
     fobj.close()
     #+END_SRC

     #+RESULTS:
     #+begin_example
     VIVAMUS atque amemus
     rumoresque senum severiorum
     omnes unius aestimemus assis!
     soles occidere et redire possunt:
     nobis cum semel occidit breuis lux,
     nox est perpetua una dormienda.
     da mi basia mille, deinde centum,
     dein mille altera, dein secunda centum,
     deinde usque altera mille, deinde centum.
     dein, cum milia multa fecerimus,
     conturbabimus illa, ne sciamus,
     aut ne quis malus inuidere possit,
     cum tantum sciat esse basiorum.
     (GAIUS VALERIUS CATULLUS)
 #+end_example

     Writing into a file

     To open a file for writing we use as the second parameter a "w"
     instead of a "r". To actually write the data to this file, we use the
     method write() of the file object.

     #+BEGIN_SRC python :results output
     fobj_in = open("poem.txt")
     fobj_out = open("poem2.txt","w")
     i = 1
     for line in fobj_in:
         print line.rstrip()
	 fobj_out.write(str(i) + ": " + line)
	 i = i + 1
     fobj_in.close()
     fobj_out.close()
     #+END_SRC

     #+BEGIN_SRC shell :results output
     cat poem2.txt
     #+END_SRC

     #+RESULTS:
     #+begin_example
     1: VIVAMUS atque amemus
     2: rumoresque senum severiorum
     3: omnes unius aestimemus assis!
     4: soles occidere et redire possunt:
     5: nobis cum semel occidit breuis lux,
     6: nox est perpetua una dormienda.
     7: da mi basia mille, deinde centum,
     8: dein mille altera, dein secunda centum,
     9: deinde usque altera mille, deinde centum.
     10: dein, cum milia multa fecerimus,
     11: conturbabimus illa, ne sciamus,
     12: aut ne quis malus inuidere possit,
     13: cum tantum sciat esse basiorum.
     14: (GAIUS VALERIUS CATULLUS)
 #+end_example

     Reading in one go

     So far we worked on files line by line by using a for loop. Very often,
     especially if the file is not too large, it's more convenient to read the
     file into a complete data structure, e.g. a string or a list. The file can
     be closed after reading and the work is accomplished on this
     data structure:

     #+BEGIN_SRC python :results output
     poem = open("poem.txt").readlines()
     print poem
     print poem[2]
     #+END_SRC

     #+RESULTS:
     : ['VIVAMUS atque amemus\n', 'rumoresque senum severiorum\n', 'omnes unius aestimemus assis!\n', 'soles occidere et redire possunt:\n', 'nobis cum semel occidit breuis lux,\n', 'nox est perpetua una dormienda.\n', 'da mi basia mille, deinde centum,\n', 'dein mille altera, dein secunda centum,\n', 'deinde usque altera mille, deinde centum.\n', 'dein, cum milia multa fecerimus,\n', 'conturbabimus illa, ne sciamus,\n', 'aut ne quis malus inuidere possit,\n', 'cum tantum sciat esse basiorum.\n', '(GAIUS VALERIUS CATULLUS)\n']
     : omnes unius aestimemus assis!
     :

     Another convenient way to read in a file might be the method read() of open.
     With this method we can read the complete file into a string, as we can see
     in the next example:

     #+BEGIN_SRC python :results output
     poem = open("poem.txt").read()
     print poem[0:20]
     print type(poem)
     #+END_SRC

     #+RESULTS:
     : VIVAMUS atque amemus
     : <type 'str'>

     Pickle

     #+BEGIN_SRC python :results output
     import pickle
     data = (1.4, 42)
     output = open('data.pkl','w')
     pickle.dump(data, output)
     output.close()
     #+END_SRC

     #+RESULTS:

     #+BEGIN_SRC python :results output
     import pickle
     f = open("data.pkl")
     data = pickle.load(f)
     print data
     #+END_SRC

     #+RESULTS:
     : (1.4, 42)

**** Modular Programming and Modules

     A module in Python is just a file containing Python definition
     and statement. The module name is moulded out of the file name by
     removing the suffix .py.

     We save the following code in the file fibonacci.py:


     def fib(n):
         if n == 0:
             return 0
         elif n == 1:
	     return 1
         else:
             return fib(n-1) + fib(n-2)
     def ifib(n):
         a, b = 0, 1
	 for i in range(n):
	     a, b = b, a + b
         return a

     #+BEGIN_SRC python :results output
     import fibonacci
     print fibonacci.fib(30)
     print fibonacci.ifib(100)
     fib = fibonacci.ifib
     print fib(10)
     #+END_SRC

     #+RESULTS:
     : 832040
     : 354224848179261915075
     : 55

     Importing names from a module directly

     Names from a module can directly be imported into the importing module's
     symbol table:

     >>> from fibonacci import fib, ifib
     >>> ifib(500)
     1 1 2 3 5 8 13 21 34 55 89 144 233 377

     >>> from fibonacci import *
     >>> fib(500)
     1 1 2 3 5 8 13 21 34 55 89 144 233 377

     Important:Each module can only be imported once per interpreter session.
     If you change a module and if you want to reload it, you must restart the
     interpreter again. Or you can reload it by using reload(modulename) 

     Executing Modules as Scripts

     # a.py
     import b

     # b.py
     print "Hello World from %s!" % __name__

     if __name__ == '__main__':
         print "Hello World again from %s!" % __name__

     #+BEGIN_SRC shell :results output
     python a.py
     python b.py
     #+END_SRC

     #+RESULTS:
     : Hello World from b!
     : Hello World from __main__!
     : Hello World again from __main__!

     Renaming a namespace

     While importing a module, the name of namespace can be changed:

     #+BEGIN_SRC python :results output
     import math as mathematics
     print mathematics.cos(mathematics.pi)
     #+END_SRC

     #+RESULTS:
     : -1.0

     It's possible to import just a few methods from a module:

     #+BEGIN_SRC python :results output
     from math import pi,pow as power, sin as sinus
     print power(2,3)
     print sinus(pi)
     #+END_SRC

     #+RESULTS:
     : 8.0
     : 1.22464679915e-16

     Content of a module

     With the built-in function dir() and the name of the module as an
     argument, you can list all valid attributes and methods for that module.

     #+BEGIN_SRC python :results output
     import math
     print dir(math)
     print dir()
     #+END_SRC

     #+RESULTS:
     : ['__doc__', '__name__', '__package__', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', 'ceil', 'copysign', 'cos', 'cosh', 'degrees', 'e', 'erf', 'erfc', 'exp', 'expm1', 'fabs', 'factorial', 'floor', 'fmod', 'frexp', 'fsum', 'gamma', 'hypot', 'isinf', 'isnan', 'ldexp', 'lgamma', 'log', 'log10', 'log1p', 'modf', 'pi', 'pow', 'radians', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc']
     : ['__builtins__', '__doc__', '__file__', '__name__', '__package__', 'math']

**** Regular Expressions, Advanced

     Syntax of Regular Expressions

     re.search(expr,s) checks a string s for an occurrence of a
     substring which matches the regular expression expr.

     #+BEGIN_SRC python :results output
     import re
     x = re.search("cat", "A cat a rat can't be friends.")
     print x
     y = re.search("cow", "A cat a rat can't be friends.")
     print y
     #+END_SRC

     #+RESULTS:
     : <_sre.SRE_Match object at 0xb74bcec8>
     : None

     This method is already enough to use regular expressions in
     Python programs:

     #+BEGIN_SRC python :results output
     import re
     if re.search("cat", "A cat and rat can't be friends."):
         print "Some kind of cat has been found :-)"
     else:
         print "No cat has been found :-("
     #+END_SRC

     #+RESULTS:
     : Some kind of cat has been found :-)

     Matching Beginning and End

     As we have carried out previously in this introduction, the expression
     r"M [ae][iy]er" is capable of matching various spellings of the name
     Mayer and the name can be anywhere in the string:

     #+BEGIN_SRC python :results output
     import re
     line = line = "He is a German called Mayer."
     if re.search(r"M[ae][iy]er",line): print "I found one!"
     #+END_SRC

     #+RESULTS:
     : I found one!

**** Lambda Operator, Filter, Reduce and Map

     Lambda Operator

     lambda argument_list: expression

     #+BEGIN_SRC python :results output
     f = lambda x, y : x + y
     print f(1,1)
     #+END_SRC

     #+RESULTS:
     : 2

     The map() function

     map() is a function with two arguments:
     r = map(func, seq)

     #+BEGIN_SRC python :results output
     Celsius = [39.2, 36.5, 37.3, 37.8]
     Fahrenheit = map(lambda x: (float(9)/5)*x + 32, Celsius)
     print Fahrenheit
     C = map(lambda x: (float(5)/9)*(x-32), Fahrenheit)
     print C

     #+END_SRC

     #+RESULTS:
     : [102.56, 97.7, 99.14, 100.03999999999999]
     : [39.2, 36.5, 37.300000000000004, 37.8]

     map() can be applied to more than one list.

     #+BEGIN_SRC python :results output
     a = [1,2,3,4]
     b = [17,12,11,10]
     c = [-1,-4,5,9]
     print map(lambda x,y:x+y, a,b)
     print map(lambda x,y,z:x+y+z, a,b,c)
     print map(lambda x,y,z:x+y-z, a,b,c)
     #+END_SRC

     #+RESULTS:
     : [18, 14, 14, 14]
     : [17, 10, 19, 23]
     : [19, 18, 9, 5]

     Mapping a List of functions

     #+BEGIN_SRC python :results output
     from math import sin, cos, tan, pi
     def map_functions(x, functions):
         """ map an iterable of functions on the object x """
	 res = []
	 for func in functions:
	     res.append(func(x))
	 return res

     family_of_functions = (sin, cos, tan)
     print(map_functions(pi, family_of_functions))
     #+END_SRC

     #+RESULTS:
     : [1.2246467991473532e-16, -1.0, -1.2246467991473532e-16]

     Filtering

     The filter() function allows you to filter sequence values. In
     the resulting list, only those values for which the value of the
     function for the element is true:

     #+BEGIN_SRC python :results output
     numbers = [10, 4, 2, -1, 6]
     result = filter(lambda x: x < 5, numbers)
     print result
     #+END_SRC

     #+RESULTS:
     : [4, 2, -1]

     Reducing a list

     The function reduce(func, seq) continually applies the function
     func() to the sequence seq. It returns a single value.

     #+BEGIN_SRC python :results output
     print reduce(lambda x,y: x+y, [47,11,42,13])
     #+END_SRC

     #+RESULTS:
     : 113

     Examples of reduce()

     Determining the maximum of a list of numerical values by using
     reduce:

     #+BEGIN_SRC python :results output
     f = lambda a,b: a if (a > b) else b
     print reduce(f, [47,11,42,102,13])
     #+END_SRC

     #+RESULTS:
     : 102

     Calculating the sum of the numbers from 1 to 100:

     #+BEGIN_SRC python :results output
     print reduce(lambda x, y: x+y, range(1,101))
     #+END_SRC

     #+RESULTS:
     : 5050

**** List Comprehension
     Generator comprehensions were introduced with Python 2.6.
     They are simply a generator expression with a parenthesis - round
     brackets - around it. Otherwise, the syntax and the way of working
     is like list comprehension, but a generator comprehension returns
     a generator instead of a list.

     List of even numbers from 2 to 20:

     #+BEGIN_SRC python :results output
     print [n for n in range(1, 20) if n % 2 == 0]
     #+END_SRC

     #+RESULTS:
     : [2, 4, 6, 8, 10, 12, 14, 16, 18]

     List of numbers from 0 to 10 raised to the power of 2:

     #+BEGIN_SRC python :results output
     print [x **2 for x in range(10)]
     #+END_SRC

     #+RESULTS:
     : [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

**** Generators

     Generators are a simple and powerful possibility to create or to
     generate iterators. Instead of return statements you will find
     inside of the body of a generator only yield statements, i.e. one
     or more yield statements.

     Another important feature of generators is that the local
     variables and the execution start is automatically saved between
     calls.

     city_generator.py

     #+BEGIN_SRC python :results output
     def city_generator():
         yield("Konstanz")
         yield("Zurich")
         yield("Schaffhausen")
         yield("Stuttgart")

     #+END_SRC

     #+BEGIN_SRC python :results output
     from city_generator import city_generator
     x = city_generator()
     print x.next()
     print x.next()
     print x.next()
     print x.next()
     #+END_SRC

     #+RESULTS:
     : Konstanz
     : Zurich
     : Schaffhausen
     : Stuttgart

     Python generators examples

     #+BEGIN_SRC python :results output
     def createGenerator():
         mylist = range(3)
	 for i in mylist :
             yield i*i
     result_generator = createGenerator()
     for i in result_generator:
         print i
     #+END_SRC

     #+RESULTS:
     : 0
     : 1
     : 4

     The following script returns the first 10 elements of the Fibonacci
     sequence:

     #+BEGIN_SRC python :results output
     def fibonacci():
         a, b = 0, 1
         while True:
             yield a
             a, b = b, a + b

     def firstn(g, n):
             for i in range(n):
	             yield g.next()

     print list(firstn(fibonacci(), 10))

     #+END_SRC

     #+RESULTS:
     : [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]

**** Exception Handling

     If the input has not been a valid integer,we will generate (raise)
     a ValueError.

     #+BEGIN_SRC python :results output :preamble def raw_input(x): return 23
     while True:
	try:
           n = int(raw_input("Please enter a number: "))
	   n = int(n)
	   break
	except ValueError:
            print("No valid integer! Please try again ...")
     print "Great, you successfully entered an integer!"
     #+END_SRC

     #+RESULTS:
     : Great, you successfully entered an integer!

     Multiple except clauses

     Our next example shows a try clause, in which we open a file for
     reading, read a line from this file and convert this line into an
     integer. There areat least two possible exceptions:

     - an IOError
     - ValueError

     #+BEGIN_SRC python :results output
     import sys

     try:
	f = open('integers.txt')
	s = f.readline()
	i = int(s.strip())
     except IOError as (errno, strerror):
	print "I/O error({0}): {1}".format(errno, strerror)
     except ValueError:
	print "No valid integer in line."
     except:
	print "Unexpected error:", sys.exc_info()[0]
	raise

     #+END_SRC

     #+RESULTS:
     : No valid integer in line.

     If we call the above script with a non-existing file, we get the message: 

     I/O error(2): No such file or directory
     And if the file integers.txt is not readable, e.g. if we don't have the
     permission to read it, we get the following message:

     I/O error(13): Permission denied

     Combining try, except and finally

     "finally" and "except" can be used together for the same try
     block, as can be seen the following Python example:

     #+BEGIN_SRC python :results output
     try:
	x = float(raw_input("Your number: "))
	inverse = 1.0 / x
     except ValueError:
	print "You should have given either an int or a float"
     except ZeroDivisionError:
         print "Infinity"
     finally:
         print("There may or may not have been an exception.")

     #+END_SRC

     vikky@antony-ThinkPad ~/Desktop/DVCS/stuff/scripts> python finally.py
     Your number: 37
     There may or may not have been an exception.
     vikky@antony-ThinkPad ~/Desktop/DVCS/stuff/scripts> python finally.py
     Your number: two
     You should have given either an int or a float
     There may or may not have been an exception.
     vikky@antony-ThinkPad ~/Desktop/DVCS/stuff/scripts> python finally.py
     Your number: 0
     Infinity
     There may or may not have been an exception.

**** Object Oriented Programming
     The four major principles of object orientation are:

     - Encapsulation
     - Data Abstraction
     - Polymorphism
     - Inheritance

     How a class is implemented in Python. We start with the most
     simple class, which can be defined.

     #+BEGIN_SRC python :results output
     class Account(object):
             pass
     #+END_SRC

     We haven't defined any attributes or any methods in our simple account
     class. Now we will create an instance of this empty class: 

     #+BEGIN_SRC python :results output
     from Account import Account
     x = Account()
     print x
     #+END_SRC

     #+RESULTS:
     : <Account.Account object at 0xb724c84c>

     Definition of methods

     A method differs from a function only in two aspects:

     - it belongs to a class and it is defined within a class
     - the first parameter in the definition of a method has to be a reference
     "self" to the instance of the class
     - a method is called without this parameter "self"

     #+BEGIN_SRC python :results output
     class Account(object):

     def transfer(self, target, amount):
         pass

     def deposit(self, amount):
         pass

     def withdraw(self, amount):
         pass

     def balance(self):
         pass
     #+END_SRC

     Constructor

     The __init_ () method in Python using like constructor

     #+BEGIN_SRC python :results output
     def __init__(self, holder, number, balance,credit_line=1500):
         self.Holder = holder
         self.Number = number
         self.Balance = balance
         self.CreditLine = credit_line
     #+END_SRC

     Destructor

     There is no "real" destructor, but something similiar, i.e. the
     method __del__. It is called when the instance is about to be
     destroyed. If a base class has a __del__() method, the derived class's
     __del__() method, if any, must explicitly call it to ensure proper
     deletion of the base class part of the instance. The following example
     shows a class with a constructor and a destructor:

     #+BEGIN_SRC python :results output
     class Greeting:
          def __init__(self, name):
              self.name = name
          def __del__(self):
              print "Destructor started"
          def SayHello(self):
              print "Hello", self.name
     #+END_SRC

     #+BEGIN_SRC python :results output
     from hello_class import Greeting
     x1 = Greeting("Guido")
     x2 = x1
     del x1
     del x2
     #+END_SRC

     #+RESULTS:
     : Destructor started

     Complete Listing of the Account Class

     #+BEGIN_SRC python :results output
     class Account(object):
     def __init__(self, holder, number, balance, credit_line=1500):
         self.Holder = holder
         self.Number = number
         self.Balance = balance
         self.CreditLine = credit_line

     def deposit(self, amount):
         self.Balance = amount

     def withdraw(self, amount):
         if(self.Balance - amount < -self.CreditLine):
             # coverage insufficient
             return False
         else:
             self.Balance -= amount
             return True

     def balance(self):
         return self.Balance

     def transfer(self, target, amount):
         if(self.Balance - amount < -self.CreditLine):
             # coverage insufficient
             return False
         else:
             self.Balance -= amount
             target.Balance += amount
             return True
     #+END_SRC

     #+BEGIN_SRC python :results output
     import Account
     k = Account.Account("Guido",345267,10009.78)
     print k.balance()
     #+END_SRC

     #+RESULTS:
     : 10009.78

**** Inheritance Example
**** Slots
**** Classes and Class Creation
**** Road to Metaclasses
**** Metaclasses
**** Metaclass Example: Count Function Calls
*** Programming Python (M.Lutz)
**** Using lists
     #+BEGIN_SRC python :results output :session test
     bob = ['Bob Smith', 42, 30000, 'software']
     sue = ['Sue Jones', 45, 40000, 'hardware']
     print bob[0].split()[-1]
     print (sue[2] * 1.25)
     #+END_SRC

     #+RESULTS:
     : Python 2.7.6 (default, Oct 26 2016, 20:32:47) 
     : [GCC 4.8.4] on linux2
     : Type "help", "copyright", "credits" or "license" for more information.
     : >>> >>> python.el: native completion setup loaded
     : Smith
     : 50000.0

     A database list

     To collect Bob and Sue into a unit, we might simply stuff them
     into another list:

     #+BEGIN_SRC python :results output :session test
     people = [bob, sue]
     for person in people:
         print(person)
     #+END_SRC

     #+RESULTS:
     : 
     : ... ... ['Bob Smith', 42, 30000, 'software']
     : ['Sue Jones', 45, 40000, 'hardware']

     To add a record to the database, the usual list operations, such
     as append and extend will suffice:

     #+BEGIN_SRC python :results output :session test
     people.append(['Tom', 50, 0, None])
     print len(people)
     print people[-1][0]
     #+END_SRC

     #+RESULTS:
     : 
     : 3
     : Tom

     We might try to associate names with relative positions by using
     the Python range built- in function, which generates successive
     integers when used in iteration contexts (such as the sequence
     assignment used initially here):

     #+BEGIN_SRC python :results output
     NAME, AGE, PAY = range(3)
     bob = ['Bob Smith', 42, 10000]
     print bob[NAME]
     print bob[PAY]
     #+END_SRC

     #+RESULTS:
     : Bob Smith
     : 10000

*** How to launch Python file?
    Just type ~python3 <your_file_Name>~ in shell:
    #+BEGIN_SRC shell :results output
    #echo 'Hello World'
    #ls -la
    #pwd
    touch test.file
    #ls | grep test
    echo 'Test string' >> test.file
    #touch test.py
    #echo 'print \"Hi, I\'m Python2\"' >> test.py
    python test.py 'Test_string' 'second test string'
    #+END_SRC

    #+RESULTS:

*** virtualenv

**** Installation

  Install virtualenv via pip:

  $ pip install virtualenv

  Create a virtual environment for a project:

  $ cd my_project_folder
  $ virtualenv venv


  You can also use a Python interpreter of your choice.

  $ virtualenv -p /usr/bin/python2.7 venv

  virtualenv -p /usr/bin/python3 venv

**** Configuration
     It is resonsble to install virualenv in
     /usr/local/share/venvs/project_name

*** Selenium
**** How install chromedriver
 sudo apt-get install chromium-chromedriver

 in Python script:

 driver = webdriver.Chrome('/usr/lib/chromium-browser/chromedriver')

**** Locating elements
 There are various strategies to locate elements in a page. You can use the most appropriate one for your case. Selenium provides the following methods to locate elements in a page:

 find_element_by_id
 find_element_by_name
 find_element_by_xpath
 find_element_by_link_text
 find_element_by_partial_link_text
 find_element_by_tag_name
 find_element_by_class_name
 find_element_by_css_selector

 To find multiple elements (these methods will return a list):

 find_elements_by_name
 find_elements_by_xpath
 find_elements_by_link_text
 find_elements_by_partial_link_text
 find_elements_by_tag_name
 find_elements_by_class_name
 find_elements_by_css_selector

 Apart from the public methods given above, there are two private methods which might be useful with locators in page objects. These are the two private methods: find_element and find_elements.

 Example usage:

 from selenium.webdriver.common.by import By

 driver.find_element(By.XPATH, '//button[text()="Some text"]')
 driver.find_elements(By.XPATH, '//button')
**** How to get HTML source

 from selenium import webdriver
 import time

 driver = webdriver.Firefox()
 driver.get(url)
 time.sleep(5)
 htmlSource = driver.page_source

**** Scraping and parsing Google search results using Python

 import time, random
 from xgoogle.search import GoogleSearch, SearchError

 f = open('a.txt','wb')

 for i in range(0,2):
     wt = random.uniform(2, 5)
     gs = GoogleSearch("about")
     gs.results_per_page = 10
     gs.page = i
     results = gs.get_results()
     #Try not to annnoy Google, with a random short wait
     time.sleep(wt)
     print 'This is the %dth iteration and waited %f seconds' % (i, wt)
     for res in results:
         f.write(res.url.encode("utf8"))
         f.write("\n")

 print "Done"
 f.close()

*** Splinter
 JavaScript can be a pain for scrapers. JavaScript is often used to alter the DOM on pages after they have been created. This means that the page you see in an Internet browser is different that the page your scrapers see.
 Splinter source tool for testing web applications using Python. It lets you automate browser actions, such as visiting URLs and interacting with their items.

 Sample code
 from splinter import Browser

 with Browser() as browser:
     # Visit URL
     url = "http://www.google.com"
     browser.visit(url)
     browser.fill('q', 'splinter - python acceptance testing for web applications')
     # Find and click the 'search' button
     button = browser.find_by_name('btnG')
     # Interact with elements
     button.click()
     if browser.is_text_present('splinter.readthedocs.io'):
         print("Yes, the official website was found!")
     else:
         print("No, it wasn't found... We need to improve our SEO techniques")

 Features
 simple api
 multi webdrivers (chrome webdriver, firefox webdriver, phantomjs webdriver, zopetestbrowser, remote webdriver)
 css and xpath selectors
 support to iframe and alert
 execute javascriptw
 works with ajax and async javascript

*** Spynner
 Module browser

 Spynner is a stateful programmatic web-browser module for Python with Javascript/AJAX support. It is build upon the PyQtWebkit framework.
 Classes:
 Browser - Stateful programmatic web browser class based upon QtWebkit

 Code example:

 >>> browser = Browser()
 >>> browser.load("http://www.wordreference.com")
 >>> browser.runjs("console.log('I can run Javascript!')")
 >>> browser.runjs("_jQuery('div').css('border', 'solid red')") # and jQuery!
 >>> browser.select("#esen")
 >>> browser.fill("input[name=enit]", "hola")
 >>> browser.click("input[name=b]", wait_load=True)
 >>> print browser.url, len(browser.html)
 >>> browser.close()

 Basic interaction with browser

 load(self, url)
 Load a web page and return status (a boolean)

 click(self, selector, wait_load=False, wait_requests=None, timeout=None)
 Click any clickable element in page.

 click_link(self, selector, timeout=None)
 Click a link and wait for the page to load.

 click_ajax(self, selector, wait_requests=1, timeout=None)
 Click a AJAX link and wait for the request to finish.

 wait_load(self, timeout=None)
 Wait until the page is loaded.

 wait(self, waittime)
 Wait some time.

 close(self)
 Close Browser instance and release resources.

 Webview

 create_webview(self, show=False)
 Create a QWebView object and insert current QWebPage.

 destroy_webview(self)
 Destroy current QWebView.

 show(self)
 Show webview browser.

 hide(self)
 Hide webview browser.

 browse(self)
 Let the user browse the current page (infinite loop).

 Form manipulation

 fill(self, selector, value)
 Fill an input text with a string value using a jQuery selector.

 check(self, selector)
 Check an input checkbox using a jQuery selector.

 uncheck(self, selector)
 Uncheck input checkbox using a jQuery selector

 choose(self, selector)
 Choose a radio input using a jQuery selector.

 select(self, selector)
 Choose a option in a select using a jQuery selector.

 submit(self, selector, timeout=None)
 Click a link and wait for the page to load.

 SpynnerError - General Spynner error
 SpynnerPageError - Error loading page
 SpynnerTimeout - a timeout (ususally on page load) has been reached
 SpynnerJavascriptError - Error on the injected Javascript code.

 Variables:
 DEBUG = 3
 ERROR = 0
 INFO = 2
 WARNING = 1
 __package__='spynner'
*** Codewars examples

    1. Sum of Numbers

    #+BEGIN_SRC python :results output
    def get_sum(a, b):
	sum = 0
	if a == b:
            return a
	if b < a:
            a, b = b, a
	for i in range(a, b+1):
            sum += i
	    return sum
    print get_sum(-1,2)
    #+END_SRC

    #+RESULTS:
    : -1

    2. Shortest word

       Simple, given a string of words, return the length of the
       shortest word(s). String will never be empty and you do not need
       to account for different data types.

       #+BEGIN_SRC python :results output
       def find_short(s):
           l = min([len(str) for str in s.split(" ")])
	   return l
       print find_short("Python is great")
       #+END_SRC

       #+RESULTS:
       : 2

    3. Take 2 strings s1 and s2 including only letters from ato z.
       Return a new sorted string, the longest possible, containing
       distinct letters, - each taken only once - coming from s1 or s2.

       Example:

       a = "xyaabbbccccdefww"
       b = "xxxxyyyyabklmopq"
       longest(a, b) -> "abcdefklmopqwxy"

       a = "abcdefghijklmnopqrstuvwxyz" longest(a, a) ->
       "abcdefghijklmnopqrstuvwxyz"

       Part 1 - Creating a sorted list containing
       distinct letters, - each taken only once - coming from s1 or s2.

       #+BEGIN_SRC python :results output
       def longest(s1, s2):
           s3 = s1 + s2
           result = []
	   for c in s3:
               if c not in result:
	           result.append(c)
		   result.sort()
           return ''.join(result)
       print longest("xyaabbbcccdefww", "xxxxyyyabklmopq")
       #+END_SRC

       #+RESULTS:
       : abcdefklmopqwxy

    4. Write a function that takes an array of strings as an argument
       and returns a sorted array containing the same strings, ordered
       from shortest to longest.

       For example, if this array were passed as an argument:

       ["Telescopes", "Glasses", "Eyes", "Monocles"]

       Your function would return the following array:

       ["Eyes", "Glasses", "Monocles", "Telescopes"]

       All of the strings in the array passed to your function will be
       different lengths, so you will not have to decide how to order
       multiple strings of the same length.

       #+BEGIN_SRC python :results output
       def sort_by_length(arr):
           arr.sort(key=len)
	   result = []

	   for i in arr:
               result.append(i)
           return result

       print sort_by_length(["My", "turtle", "is", "old"])

       #+END_SRC

       #+RESULTS:
       : ['My', 'is', 'old', 'turtle']

    5. Find the vowels
       We want to know the index of the vowels in a given word, for
       example, there are two vowels in the word super (the second
       and fourth letters).

       So given a string "super", we should return a list of [2, 4].

       #+BEGIN_SRC python :results output
       def vowel_indices(word):
           res = []
	   index = 0

	   for vowel in word:
               index += 1

               if vowel.lower() in 'aeiouy':
                   res.append(index)
           return res
       print vowel_indices("bialy")
       #+END_SRC

       #+RESULTS:
       : [2, 3, 5]

    6. Counting duplicates

       #+BEGIN_QUOTE
       Count the number of Duplicates

       Write a function that will return the count of distinct
       case-insensitive alphabetic characters and numeric digits that
       occur more than once in the input string. The input string can
       be assumed to contain only alphanumeric characters, including
       digits, uppercase and lowercase alphabets.

       Example

       "abcde" -> 0 # no characters repeats more than once "aabbcde" -> 2 #
       'a' and 'b' "aabbcdeB" -> 2 # 'a' and 'b' "indivisibility" -> 1 # 'i'
       "Indivisibilities" -> 2 # 'i' and 's' "aa11" -> 2 # 'a' and '1'
       #+END_QUOTE

       Counting characters in a string:

       #+BEGIN_SRC python :results output
       def character_count(text):
           d = {}
	   text = text.lower()
	   count = 0
	   for letter in text:
               if letter in d:
                   d[letter] = d[letter] + 1
               else:
                   d[letter] = 1

           for k in d.keys():
               # print "%s: %d" % (k, d[k])
               if d[k] > 1:
                   count = count + 1
	   print count

       print character_count("aAbbBcde")
       #+END_SRC

       #+RESULTS:
       : 2

    7. Sort the odd

       #+BEGIN_QUOTE
       You have an array of numbers.
       Your task is to sort ascending odd numbers but even numbers must
       be on their places.

       Zero isn't an odd number and you don't need to move it. If you have an
       empty array, you need to return it.

       Example

       sortArray([5, 3, 2, 8, 1, 4]) == [1, 3, 2, 8, 5, 4]
       #+END_QUOTE

       #+BEGIN_SRC python :results output
       def sort_array(arr):
           odds_numbers = sorted((x for x in arr if x % 2 != 0), reverse=True)
	   sort_odds = [x if x % 2 == 0 else odds_numbers.pop() for x in arr]
           return sort_odds
       print sort_array([5, 3, 2, 8, 1, 4])
       assert(sort_array([5, 3, 2, 8, 1, 4]), [1, 3, 2, 8, 5, 4])
       assert(sort_array([5, 3, 1, 8, 0]), [1, 3, 5, 8, 0])
       #+END_SRC

       #+RESULTS:
       : [1, 3, 2, 8, 5, 4]

    8. Who likes it?

       #+BEGIN_QUOTE
       You probably know the "like" system from Facebook and other pages. People can "like" blog posts, pictures or other items. We want to create the text that should be displayed next to such an item.

       Implement a function likes :: [String] -> String, which must take in
       input array, containing the names of people who like an item. It must
       return the display text as shown in the examples:

       likes [] // must be "no one likes this"
       likes ["Peter"] // must be "Peter likes this"
       likes ["Jacob", "Alex"] // must be "Jacob and Alex like this"
       likes ["Max", "John", "Mark"] // must be "Max, John and Mark like this"
       likes ["Alex", "Jacob", "Mark", "Max"] // must be "Alex, Jacob and 2 others like this"
       For more than 4 names, the number in and 2 others simply increases.
       #+END_QUOTE

       #+BEGIN_SRC python :results output
       def likes(names):
           if len(names) == 0:
               return "no one likes this"
	   elif len(names) == 1:
               return "%s likes this" % names[0]
  	   elif len(names) == 2:
               return "%s and %s like this" % (names[0], names[1])
	   elif len(names) == 3:
               return "%s, %s and %s like this" % (names[0], names[1], names[2])
	   else:
               return "%s, %s and %s others like this" % (names[0], names[1], len(names)-2)
       print likes([])
       print likes(['Peter'])
       print likes(['Jacob', 'Alex'])
       print likes(['Max', 'John', 'Mark'])
       print likes(['Alex', 'Jacob', 'Mark', 'Max'])

       assert likes([]), 'no one likes this'
       assert likes(['Peter']), 'Peter likes this'
       assert likes(['Jacob', 'Alex']), 'Jacob and Alex like this'
       assert likes(['Max', 'John', 'Mark']), 'Max, John and Mark like this'
       assert likes(['Alex', 'Jacob', 'Mark', 'Max']), 'Alex, Jacob and 2 others like this'

       #+END_SRC

       #+RESULTS:
       : no one likes this
       : Peter likes this
       : Jacob and Alex like this
       : Max, John and Mark like this
       : Alex, Jacob and 2 others like this

    9. Unique in Order

       #+BEGIN_QUOTE
       Implement the function unique_in_order which takes as argument a
       sequence and returns a list of items without any elements with
       the same value next to each other and preserving the original
       order of elements.

       For example:

       unique_in_order('AAAABBBCCDAABBB') == ['A', 'B', 'C', 'D', 'A', 'B']
       unique_in_order('ABBCcAD') == ['A', 'B', 'C', 'c', 'A', 'D']
       unique_in_order([1,2,2,3,3]) == [1,2,3]
       #+END_QUOTE

       #+BEGIN_SRC python :results output
       def unique_in_order(iterable):
           result = []
           for c in iterable:
               if not result or c != result[-1]:
                   result.append(c)
           return result
       print unique_in_order('AAAABBBCCDAABBB')
       print unique_in_order('ABBCcAD')
       print unique_in_order([1,2,2,3,3])
       #+END_SRC

       #+RESULTS:
       : ['A', 'B', 'C', 'D', 'A', 'B']
       : ['A', 'B', 'C', 'c', 'A', 'D']
       : [1, 2, 3]

** DONE Project structuring
   CLOSED: [2017-06-02 Fri 17:58]

   Sample repository

   README.rst
   LICENSE
   setup.py
   requirements.txt
   sample/__init__.py
   sample/core.py
   sample/helpers.py
   docs/conf.py
   docs/index.rst
   tests/test_basic.py
   tests/test_advanced.py

** DONE Using setup.py
   CLOSED: [2017-06-03 Sat 16:46]
   Definitions

   Package - a folder/directory that contains __init__.py file.
   Module - a valid python file with .py extension.
   distribution - how one package relates to others.

   Let's say you want to install a package named foo. Then you do,

   #+BEGIN_SRC shell :results output
   git clone https://github.com/user/foo
   cd foo
   python setup.py install
   #+END_SRC

   Instead, if you don't want to actually install it but still would
   like to use it. Then do,

   #+BEGIN_SRC shell :results output
   python setup.py develop
   #+END_SRC

   This command will create symlinks to the source directory within
   site-packages instead of copying things. Because of this, it is
   quite fast (particularly for large packages).

   Creating setup.py

   If you have your package tree like,

                         foo
    ├── foo
    │   ├── data_struct.py
    │   ├── __init__.py
    │   └── internals.py
    ├── README
    ├── requirements.txt
    └── setup.py
    Then, you do the following so that it can be installed on some
    machine:

    #+BEGIN_SRC python :results output

    setup(
       name='foo',
       version='1.0',
       description='A useful module',
       author='Man Foo',
       author_email='foomail@foo.com',
       packages=['foo'],  #same as name
       install_requires=['bar', 'greek'], #external packages as dependencies
       scripts=[
		'scripts/cool',
		'scripts/skype',
               ]
    )

    #+END_SRC

    Add more stuff to setup.py

    #+BEGIN_SRC python :results output
    from setuptools import setup

    with open("README", 'r') as f:
	long_description = f.read()

    setup(
       name='foo',
       version='1.0',
       description='A useful module',
       license="MIT",
       long_description=long_description,
       author='Man Foo',
       author_email='foomail@foo.com',
       url="http://www.foopackage.com/",
       packages=['foo'],  #same as name
       install_requires=['bar', 'greek'], #external packages as dependencies
       scripts=[
		'scripts/cool',
		'scripts/skype',
               ]
    )
    #+END_SRC

** DONE Relational model
   CLOSED: [2017-06-02 Fri 17:58]
   This model organizes data into one or more tables (or "relations")
   of columns and rows, with a unique key identifying each row. Rows are
   also called records or tuples.[2] Generally, each table/relation
   represents one "entity type" (such as customer or product). The rows
   represent instances of that type of entity (such as "Lee" or "chair")
   and the columns representing values attributed to that instance (such
   as address or price).

   Each row in a table has its own unique key. Rows in a table can be
   linked to rows in other tables by adding a column for the unique key
   of the linked row (such columns are known as foreign keys).

   Most physical implementations have a unique primary key (PK) for
   each table. When a new row is written to the table, a new unique value
   for the primary key is generated; this is the key that the system uses
   primarily for accessing the table. System performance is optimized for
   PKs. Other, more natural keys may also be identified and defined as
   alternate keys (AK). Often several columns are needed to form an AK
   (this is one reason why a single integer column is usually made the
   PK). Both PKs and AKs have the ability to uniquely identify a row
   within a table.

* Git
** Cloning and fetch remote repository                                :STUDY:

If you want to get a copy of an existing Git repository – for example, a project you’d like to contribute to – the command you need is git clone.

it's list of repositories on my hard drive before cloning:
 
#+BEGIN_SRC shell :results output
ls /home/vikky/Desktop/DVCS/
#+END_SRC

#+RESULTS:
: Documents
: spynner
: stuff
: yann_decoopman

Typing in terminal:
git clone https://github.com/0--key/lib.git

It's list of repositories on my hard drive after cloning:

#+BEGIN_SRC shell :results output
ls /home/vikky/Desktop/DVCS
#+END_SRC

#+RESULTS:
: Documents
: lib
: spynner
: stuff
: yann_decoopman

Repository cloned into lib folder:

#+BEGIN_SRC shell :results output
cd /home/vikky/Desktop/DVCS/lib/
git remote -v
#+END_SRC

#+RESULTS:
: origin	https://github.com/annelida/lib.git (fetch)
: origin	https://github.com/annelida/lib.git (push)

origin is your fork: your own repo on GitHub, clone of the original repo of GitHub

You will use origin to pull and push since you can contribute to your own repo.

Fetch origin:
#+BEGIN_SRC shell :results output
cd /home/vikky/Desktop/DVCS/lib/
git fetch origin
#+END_SRC

#+RESULTS:
: remote: Counting objects: 1990, done.
: remote: Compressing objects: 100% (96/96), done.
: remote: Total 1990 (delta 410), reused 342 (delta 342), pack-reused 1552
: Receiving objects: 100% (1990/1990), 1.12 MiB | 812.00 KiB/s, done.
: Resolving deltas: 100% (1295/1295), completed with 5 local objects.
: From https://github.com/0--key/lib
:   f58d95e..7c53267  master     -> origin/master

** Git fork

Pushing the "Fork" button on necessary project.

Clone the fork

cd /home/vikky/Desktop/DVCS
git clone https://github.com/annelida/python-patterns.git

List of folders after cloning:

#+BEGIN_SRC shell :results output
cd /home/vikky/Desktop/DVCS/
ls
#+END_SRC

#+RESULTS:
: Documents
: lib
: python-patterns
: spynner
: stuff
: yann_decoopman

Check the remotes:

#+BEGIN_SRC shell :results output 
cd /home/vikky/Desktop/DVCS/talk-python-transcripts
git remote -v
#+END_SRC

#+RESULTS:
: origin	https://github.com/annelida/stuff.git (fetch)
: origin	https://github.com/annelida/stuff.git (push)

Specify a new remote upstream repository that will be synced with the fork:

$ git remote add upstream https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git

#+BEGIN_SRC shell :results output
cd /home/vikky/Desktop/DVCS/talk-python-transcripts
git remote add upstream https://github.com/0--key/talk-python-transcripts.git
#+END_SRC


#+BEGIN_SRC shell :results output
cd /home/vikky/Desktop/DVCS/talk-python-transcripts
git remote -v
#+END_SRC

#+RESULTS:
: origin	https://github.com/annelida/stuff.git (fetch)
: origin	https://github.com/annelida/stuff.git (push)
: upstream	https://github.com/0--key/talk-python-transcripts.git (fetch)
: upstream	https://github.com/0--key/talk-python-transcripts.git (push)
*** Git fork (fixed)

Pushing "Fork" button

Folders list before cloning:
#+BEGIN_SRC shell :results output
cd /home/vikky/Desktop/DVCS
ls 
#+END_SRC

#+RESULTS:
: Documents
: lib
: python-patterns
: spynner
: stuff
: yann_decoopman

Clone the fork

#+BEGIN_SRC shell :results output
cd /home/vikky/Desktop/DVCS/
git clone https://github.com/annelida/talk-python-transcripts.git
ls
#+END_SRC

#+RESULTS:
: Documents
: lib
: python-patterns
: spynner
: stuff
: talk-python-transcripts
: yann_decoopman

Check the remotes

#+BEGIN_SRC shell :results output 
cd /home/vikky/Desktop/DVCS/talk-python-transcripts
git remote -v
#+END_SRC

#+RESULTS:
: origin	https://github.com/annelida/talk-python-transcripts.git (fetch)
: origin	https://github.com/annelida/talk-python-transcripts.git (push)

Add upstream

#+BEGIN_SRC shell :results output
cd /home/vikky/Desktop/DVCS/talk-python-transcripts
git remote add upstream https://github.com/mikeckennedy/talk-python-transcripts.git
git remote -v
#+END_SRC

#+RESULTS:
: origin	https://github.com/annelida/talk-python-transcripts.git (fetch)
: origin	https://github.com/annelida/talk-python-transcripts.git (push)
: upstream	https://github.com/mikeckennedy/talk-python-transcripts.git (fetch)
: upstream	https://github.com/mikeckennedy/talk-python-transcripts.git (push)

Up-to-date local version

cd /home/vikky/Desktop/DVCS/talk-python-transcripts
git fetch upstream

Merge the local branches

#+BEGIN_SRC shell :results output
cd /home/vikky/Desktop/DVCS/talk-python-transcripts
git merge upstream/master
#+END_SRC

#+RESULTS:
: Already up-to-date.
*** Merging between forks in GitHub

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/DVCS/lib
    git status
    #+END_SRC

    #+RESULTS:
    : On branch master
    : Your branch is up-to-date with 'origin/master'.
    : nothing to commit, working tree clean

    We need to perform command git push origin master if local changes exists.

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/DVCS/lib
    git remote -v
    #+END_SRC

    #+RESULTS:
    : origin	https://github.com/annelida/lib.git (fetch)
    : origin	https://github.com/annelida/lib.git (push)
    : upstream	https://github.com/0--key/lib.git (fetch)
    : upstream	https://github.com/0--key/lib.git (push)

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/DVCS/lib
    git pull upstream master
    #+END_SRC

    #+RESULTS:
    : Updating 1e72112..81ade54
    : Fast-forward
    :  org/bookmarks.emacs | 45 ++++++++++++++++-------------
    :  org/eng.org         | 59 ++++++++++++++++++++++++++++++++++++++
    :  org/idioms.org      |  5 ++++
    :  org/motto.org       | 81 +++++++++++++++++++++++++++++++++++++++++++++++++++--
    :  4 files changed, 169 insertions(+), 21 deletions(-)

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/DVCS/lib
    git push origin master
    #+END_SRC

    #+RESULTS:
    Counting objects: 25, done.
    Delta compression using up to 2 threads.
    Compressing objects: 100% (25/25), done.
    Writing objects: 100% (25/25), 5.15 KiB | 0 bytes/s, done.
    Total 25 (delta 18), reused 0 (delta 0)
    remote: Resolving deltas: 100% (18/18), completed with 6 local objects.
    To https://github.com/annelida/lib.git
    1e72112..81ade54  master -> master

** Git tutorial
*** Git - Home
    Git is a distributed revision control and source code management system
    with an emphasis on speed. Git was initially designed and developed by
    Linus Torvalds for Linux kernel development. Git is a free software
    distributed under the terms of the GNU General Public License version 2.

*** Git - Basic Concepts

   Version Control System

   Version Control System (VCS) is a software that helps software developers
   to work together and maintain a complete history of their work.

   Listed below are the functions of a VCS:

   - Allows developers to work simultaneously.
   - Does not allow overwriting each other’s changes.
   - Maintains a history of every version.

   Following are the types of VCS:

   - Centralized version control system (CVCS).
   - Distributed/Decentralized version control system (DVCS).

   Centralized version control system (CVCS) uses a central server to store
   all files and enables team collaboration. But the major drawback of CVCS
   is its single point of failure, i.e., failure of the central server.
   Unfortunately,if the central server goes down for an hour, then during
   that hour, no one can collaborate at all. And even in a worst case, if
   the disk of the central server gets corrupted and proper backup has not
   been taken, then you will lose the entire history of the project.

   DVCS clients not only check out the latest snapshot of the directory but
   they also fully mirror the repository. If the server goes down, then the
   repository from any client can be copied back to the server to restore it.
   Every checkout is a full backup of the repository. Git does not rely on
   the central server and that is why you can perform many operations when
   you are offline. You can commit changes, create branches, view logs, and
   perform other operations when you are offline. You require network
   connection only to publish your changes and take the latest changes.


*** Git - Environment Setup
    To verify your Git settings of the local repository;

    #+BEGIN_SRC shell :results output
    cd /home/vikky/Desktop/DVCS
    git config --list
    #+END_SRC

    #+RESULTS:
    : user.email=viqsiq@gmail.com
    : user.name=annelida
    : core.repositoryformatversion=0
    : core.filemode=true
    : core.bare=false
    : core.logallrefupdates=true
    : user.name=annelida
    : user.email=viqsiq@gmail.com

*** Git - Life Cycle
*** Git - Create Operation
*** Git - Clone Operation
*** Git - Perform Changes
*** Git - Review Changes
*** Git - Commit Changes
*** Git - Push Operation
*** Git - Update Operation
*** Git - Stash Operation
*** Git - Move Operation
*** Git - Rename Operation
*** Git - Delete Operation
*** Git - Fix Mistakes
*** Git - Tag Operation
*** Git - Patch Operation
*** Git - Managing Branches
*** Git - Handling Conflicts
*** Git - Different Platforms
*** Git - Online Repositories

*** Git Useful Resources
*** Git - Quick Guide
*** Git - Useful Resources
*** Git - Discussion
*** Git - Persian Version

** Repository deletion
   Via Gui on GitHub

** Create a new one
   
* Magit
** Introduction
   Magit is an interface to the version control system Git, implemented as
   an Emacs package.  Magit aspires to be a complete Git porcelain.  While
   we cannot (yet) claim that Magit wraps and improves upon each and every
   Git command, it is complete enough to allow even experienced Git users
   to perform almost all of their daily version control tasks directly from
   within Emacs.  While many fine Git clients exist, only Magit and Git
   itself deserve to be called porcelains.

   In Magit staging a hunk or even just part of a hunk is as trivial as
   staging all changes made to a file.

   The most visible part of Magit’s interface is the status buffer,
   which displays information about the current repository.  Its content is
   created by running several Git commands and making their output
   actionable.  Among other things, it displays information about the
   current branch, lists unpulled and unpushed changes and contains
   sections displaying the staged and unstaged changes.  That might sound
   noisy, but, since sections are collapsible, it’s not.

   To stage or unstage a change one places the cursor on the change and
   then types ‘s’ or ‘u’.  The change can be a file or a hunk, or when the
   region is active (i.e.  when there is a selection) several files or
   hunks, or even just part of a hunk.  The change or changes that these
   commands - and many others - would act on are highlighted.
** Most essential features
   To display information about the current Git repository, type 'M-x
   magit-status' or 'C-x g'.
   Most Magit commands are commonly invoked from this buffer.
   Depending on what state your repository is in, this buffer will
   contain sections titled "Staged changes", "Unstaged changes", "Unpulled
   commits", "Unpushed commits", and/or some others.

   Move between sections using ‘p’ and ‘n’.  Note that the bodies of
   some sections are hidden.  Type ‘TAB’ to expand or collapse the section
   at point.  You can also use ‘C-tab’ to cycle the visibility of the
   current section and its children.  Move to a file section inside the
   section named "Unstaged changes" and type ‘s’ to stage the changes you
   have made to that file.  That file now appears under "Staged changes".

   You can also un-/stage just part of a hunk.  Inside the body of a
   hunk section (move there using ‘C-n’), set the mark using ‘C-SPC’ and
   move down until some added and removed lines fall inside the region but
   not all of them.  Again type ‘s’ to stage.

   It’s also possible to un-/stage multiple files at once.  Move to a
   file section, type ‘C-SPC’, move to the next file using ‘n’, and then
   ‘s’ to stage both files.  Note that both the mark and point have to be
   on the headings of sibling sections for this to work.  If the region
   looks like it does in other buffers, then it doesn’t select Magit
   sections that can be acted on as a unit.

   And then of course you want to commit your changes.  Type ‘c’.  This
   shows the committing popup buffer featuring various commit variants and
   arguments that can be passed to ‘git commit’.  Do not worry about those
   for now.  We want to create a "normal" commit, which is done by typing
   ‘c’ again.

   Now two new buffers appear.  One is for writing the commit message,
   the other shows a diff with the changes that are about to committed.
   Write a message and then type ‘C-c C-c’ to actually create the commit.

* JS

** Unary operators
   #+BEGIN_SRC js :cmd "nodejs"
   console.log(typeof 4.5)
   console.log(typeof "q")
   #+END_SRC

   #+RESULTS:
   : number
   : string
   : undefined

Operators that use two values are called BINARY operators, while those that take one are called UNARY operators. The minus operator can be used both as a binary operator and as a unary operator.

#+BEGIN_SRC js :cmd "nodejs"
console.log("Hello world");
console.log(-(10-2));
#+END_SRC

#+RESULTS:
: Hello world
: -8
: undefined


** Boolean values
Often, you will need a value that simply distinguishes between two possibilities, like "yes" and "no" or "on" and "off". For this, JS has a Boolean type, which has just two values: true and false

*** Comparisons

Here is one way to produce Boolean values:

#+BEGIN_SRC  js :cmd "nodejs"
console.log(3 > 2);
console.log(3 <2 );
#+END_SRC

#+RESULTS:
: true
: false
: undefined

String can be compared in the same way.

#+BEGIN_SRC js :cmd "nodejs"
console.log("Aardvark" < "Zoroaster")
#+END_SRC

#+RESULTS:
: true
: undefined

Other operator are >=(greater than or equal to), <=(less than or equal to), ==(equal to), and != (not equal to).

#+BEGIN_SRC js :cmd "nodejs"
console.log("Itchy" != "Scratchy")
#+END_SRC

#+RESULTS:
: true
: undefined
*** Logical operators

There are also some operations that can be applied to Boolean values themselves. JS suppirt three logical operators: AND, OR, and NOT. These can be used to "reason" about Booleans.

The && operator represents logical AND. It is a binary operator, and its result is true only if both the values given to it are true.

#+BEGIN_SRC js :cmd "nodejs"
console.log(true && false)
console.log(true && true)
#+END_SRC

#+RESULTS:
: false
: true
: undefined

The operator denotes logical OR. It produces true if either of the values given to it is true.

#+BEGIN_SRC js :cmd "nodejs"
console.log(false || true)
console.log(false || false)
#+END_SRC

#+RESULTS:
: true
: false
: undefined

The last logical operator I will dicuss is not unary, not binary, but ternary, operating on three values. it is written with a question mark and a colon, like this:

#+BEGIN_SRC js :cmd "nodejs"
console.log(true ? 1 : 2);
console.log(false ? 1 : 2);
#+END_SRC

#+RESULTS:
: 1
: 2
: undefined

*** Variables

To catch and hold values, JS provides a thing called a variable.

var caught = 5 * 5

The previous statement creates a variable called "caught" and uses it to grab hold of the number that is produced by multiplying 5 by 5.

Affter a variable has been defined, its name can be used as an expression. The value of such an expression is the value the variable currently hold. 

#+BEGIN_SRC js :cmd "nodejs"
var ten = 10;
console.log(ten * ten);
#+END_SRC

#+RESULTS:
: 100
: undefined

Variable names can be any word that isn’t a reserved word (such as var). They may not include spaces. Digits can also be part of variable names—catch22 is a valid name, for example—but the name must not start with a digit. A variable name cannot include punctuation, except for the characters $ and _.

When a variable points at a value, that does not mean it is tied to that value forever. The = operator can be used at any time on existing variables to disconnect them from their current value and have them point to a new one.

#+BEGIN_SRC js :cmd "nodejs"
var mood = "light";
console.log(mood);
mood = "dark";
console.log(mood);
#+END_SRC

#+RESULTS:
: light
: dark
: undefined

#+BEGIN_SRC  js :cmd "nodejs"
var LuigisDebt = 140;
LuigisDebt = LuigisDebt - 35;
console.log(LuigisDebt);
#+END_SRC

#+RESULTS:
: 105
: undefined

A single var statement may define multiple variables. The definitions must be separated by commas.

#+BEGIN_SRC  js :cmd "nodejs"
var one = 1, two = 2;
console.log(one + two)
#+END_SRC

#+RESULTS:
: 3
: undefined

** Functions

The alert function uses the string that we give it as the text to show in the dialog box. Values given to functions are called arguments. The alert function needs only one of them, but other functions mightneed a different number or different types of arguments.

alert("Good morning!");

Browser environments contain other functions besides alert for popping up windows. You can ask the user an OK/Cancel question using confirm. This returns a Boolean: true if the user clicks OK and false if the user clicks Cancel.

confirm("Shall we, then?");

The prompt function can be used to ask an “open” question. The first argument is the question, the second one is the text that the user starts with. A line of text can be typed into the dialog window, and the function will return this text as a string.

prompt("Tell me everything you know.", "...");

*** The console.log function
#+BEGIN_SRC  js :cmd "nodejs"
var x = 30;
console.log("the value of x is", x)
#+END_SRC

#+RESULTS:
: the value of x is 30
: undefined

**** Return values
Showing a dialog box or writing text to the screen is a side effect. A lot of functions are useful because of the side effects they produce. Functions may also produce values, and in that case, they don’t need to have a side effect to be useful. For example, the function Math.max takes any number of number values and gives back the greatest.

#+BEGIN_SRC js :cmd "nodejs"
console.log(Math.max(2,4))
#+END_SRC

#+RESULTS:
: 4
: undefined

When a function produces a value, it is said to return that value. Anything that produces a value is an expression in JavaScript, which means function calls can be used within larger expressions. Here a call to Math.min, which is the opposite of Math.max, is used as an input to the plus operator:

#+BEGIN_SRC js :cmd "nodejs"
console.log(Math.min(2,4) + 100);
#+END_SRC

#+RESULTS:
: 102
: undefined

** Conditional execution
Conditional execution is written with the if keyword in JavaScript. In the simple case, we just want some code to be executed if, and only if, a certain condition holds. For example, in the previous program, we might want to show the square of the input only if the input is actually a number.


var theNumber = Number(prompt("Pick a number", ""));
if (!isNaN(theNumber))
 alert("Your number is the square root of " + 
      theNumber * theNunber);

You often won’t just have code that executes when a condition holds true, but also code that handles the other case. This alternate path is represented by the second arrow in the diagram. The else keyword can be used, together with if, to create two separate, alternative execution paths.

var theNumber = Number(prompt("Pick a number", ""));
if (!isNaN(theNumber))
  alert("Your number is the square root of " +
        theNumber * theNumber);
else
  alert("Hey. Why didn't you give me a number?");

If we have more than two paths to choose from, multiple if/else pairs can be “chained” together. Here’s an example:

var num = Number(prompt("Pick a number", "0"));

if (num < 10)
  alert("Small");
else if (num < 100)
  alert("Medium");
else
  alert("Large");

*** While and Do loops

console.log(0);
console.log(2);
console.log(4);
console.log(6);
console.log(8);
console.log(10);
console.log(12);

#+BEGIN_SRC js :cmd "nodejs"

var number = 0;
while (number <= 12) {
  console.log(number);
  number = number + 2;
}
#+END_SRC

#+RESULTS:
: 0
: 2
: 4
: 6
: 8
: 10
: 12
: undefined

In this loop, we want to both print the current number and add two to our variable. Whenever we need to execute multiple statements inside a loop, we wrap them in curly braces ({ and }). Braces do for statements what parentheses do for expressions: they group them together, making them count as a single statement. A sequence of statements wrapped in braces is called a block.

As an example that actually does something useful, we can now write a program that calculates and shows the value of 210 (2 to the 10th power). We use two variables: one to keep track of our result and one to count how often we have multiplied this result by 2. The loop tests whether the second variable has reached 10 yet and then updates both variables.

#+BEGIN_SRC js :cmd "nodejs"
var result = 1;
var counter = 0;
while (counter < 10) {
  result = result * 2;
  counter = counter + 1;
}
console.log(result);
#+END_SRC

#+RESULTS:
: 1024
: undefined

The do loop is a control structure similar to the while loop. It differs only on one point: a do loop always executes its body at least once, and it starts testing whether it should stop only after that first execution. To reflect this, the test appears after the body of the loop:

#+BEGIN_SRC js :cmd "nodejs"
do {
  var yourName = prompt("Who are you?");
} while (!yourName);
console.log(yourName);
#+END_SRC

This program will force you to enter a name. It will ask again and again until it gets something that is not an empty string. Applying the ! operator will convert a value to Boolean type before negating it, and all strings except "" convert to true. This means the loop continues going round until you provide a name that is not the empty string.

*** Indenting code

You've probably noticed the spaces I put in front of some statements. In JavaScriipt, these are not required - the computer will accept the program just fine without them. In fact, even the line breaks in program are optional. You could write a program as a single long line if upu felt like it. The role of the indentation inside blocks is to make the structure of the code stand out. In complex code, where new blocks aare opened inside other blocks, it can become hard to see where one block ends and another begins. With proper indentation, the visual shape of a program corresponds to the shape of the blocks inside it. I like to use two spaces for every open block, but tastes differ - some people use four spaces, and some people use tab characters.

*** FOR loops

Many loops follow the pattern seen in the previous WHILE examples. First, a "counter" variable is created to track the progress of the loop. Then comes a while llop. whose test expression usually checks whether the counter has reached some boundary yet. At the end of the loop body, the counter is updated to track progress.

#+BEGIN_SRC js :cmd "nodejs"
for var number = 0; number <= 12; number = number + 2
  console.log(number);
#+END_SRC

#+RESULTS:

*** Breaking Out of a Loop
Having the loop’s condition produce false is not the only way a loop can finish. There is a special statement called break that has the effect of immediately jumping out of the enclosing loop.

This program illustrates the break statement. It finds the first number that is both greater than or equal to 20 and divisible by 7.

#+BEGIN_SRC js :cmd "nodejs"
for (var current = 20; ; current++) {
  if (current %7 == 0)
    break;
}
console.log(current);
#+END_SRC

#+RESULTS:
: 21
: undefined

*** Updating variables succinctly

Especially when looping, a program often needs to “update” a variable to hold a value based on that variable’s previous value.

counter = counter + 1;
JavaScript provides a shortcut for this:

counter += 1;

Similar shortcuts work for many other operators, such as result *= 2 to double result or counter -= 1 to count downward.

This allows us to shorten our counting example a little more.

for (var number = 0; number <= 12; number += 2)
  console.log(number);
For counter += 1 and counter -= 1, there are even shorter equivalents: counter++ and counter--.

*** Dispatching on a value with switch

It is common for code to look like this:

if (variable == "value1") action1();
else if (variable == "value2") action2();
else if (variable == "value3") action3();
else defaultAction();

There is a construct called switch that is intended to solve such a “dispatch” in a more direct way. Unfortunately, the syntax JavaScript uses for this (which it inherited from the C/Java line of programming languages) is somewhat awkward—a chain of if statements often looks better. Here is an example:

#+BEGIN_SRC js :cmd "nodejs"
switch (prompt("What is the weather like?")) {
  case "rainy":
    console.log("Remember to bring an umbrella.");
    break;
  case "sunny":
    console.log("Dress lightly.");
  case "cloudy":
    console.log("Go outside.");
    break;
  default:
    console.log("Unknown weather type!");
    break;
}
#+END_SRC

Exercise Looping a triangle

#+BEGIN_SRC js :cmd "nodejs"
for (var abc = "#"; abc.length <= 7; abc += "#")
console.log(abc);
#+END_SRC

#+RESULTS:
: #
: ##
: ###
: ####
: #####
: ######
: #######
: undefined

Exercice - FizzBuzz

#+BEGIN_SRC js :cmd "nodejs"
for (var current = 1; current<=100; current++) {
  var output = "";
  if (current % 3 == 0)
   output += ("Fizz");
  if (current % 5 == 0)
   output += ("Buzz");
  console.log(output || current);
}

#+END_SRC

#+RESULTS:
#+begin_example
1
2
Fizz
4
Buzz
Fizz
7
8
Fizz
Buzz
11
Fizz
13
14
FizzBuzz
16
17
Fizz
19
Buzz
Fizz
22
23
Fizz
Buzz
26
Fizz
28
29
FizzBuzz
31
32
Fizz
34
Buzz
Fizz
37
38
Fizz
Buzz
41
Fizz
43
44
FizzBuzz
46
47
Fizz
49
Buzz
Fizz
52
53
Fizz
Buzz
56
Fizz
58
59
FizzBuzz
61
62
Fizz
64
Buzz
Fizz
67
68
Fizz
Buzz
71
Fizz
73
74
FizzBuzz
76
77
Fizz
79
Buzz
Fizz
82
83
Fizz
Buzz
86
Fizz
88
89
FizzBuzz
91
92
Fizz
94
Buzz
Fizz
97
98
Fizz
Buzz
undefined
#+end_example

** Functions
A function definition is just a regular variable definition where the value given to the variable happens to be a function. For example, the following code defines the variable square to refer to a function that produces the square of a given number:
#+BEGIN_SRC js :cmd "nodejs"
var square = function(x) {
  return x * x;
};

console.log(square(12));
#+END_SRC

#+RESULTS:
: 144
: undefined

A function can have multiple parameters or no parameters at all. In the following example, makeNoise does not list any parameter names, whereas power lists two:
#+BEGIN_SRC js :cmd "nodejs"
var makeNoise = function() {
  console.log("Pling!");
};

makeNoise();  
#+END_SRC

#+RESULTS:
: Pling!
: undefined

#+BEGIN_SRC js :cmd "nodejs"
var power = function(base, exponent) {
  var result = 1
  for (var count = 0; count < exponent; count++)
    result *= base;
  return result;
};

console.log(power(2, 10));
#+END_SRC

#+RESULTS:
: 1024
: undefined

** Parameters and scopes

The parameters to a function behave like regular variables, but their initial values are given by the caller of the function, not the code in the function itself.

An impirtant property of functions is that the variables created inside of them, including their parameters, are local to the function.

This "localness" of variables applies only to the parameters ad to variables declared with the VAR inside the function body. Variables declared outside of any function are called global, because they are visible throughout the program. It is possible to access such variables from inside a function, as long as you haven't declared a local variable with the same name.


The following code demonstrates this. It defines and calls two functions that both assign a value to the variable X. The first one declares the variable as local and thus changes only the local variable. The second does not declare X locally, so references to X inside of it refer to the global variable X defined at the top of the example.

#+BEGIN_SRC js :cmd "nodejs"
var x = "outside";

var f1 = function() {
  var x = "inside f1";
};
f1();
console.log(x);
#+END_SRC

#+RESULTS:
: outside
: undefined

#+BEGIN_SRC js :cmd "nodejs"
var f2 = function() {
  x = "inside f2";
};
f2();
console.log(x);
#+END_SRC


** Nested scope

JavaScript distinguishes not just between global and local variables. Functions can be created inside other functions, producing several degrees of locality.

For example, this rather nonsensical function has two functions inside of it:

#+BEGIN_SRC js :cmd "nodejs"
var landscape = function() {
  var result = "";
  var flat = function(size) {
    for (var count = 0; count < size; count++)
      result += "_";
  };
  var mountain = function(size) {
    result += "/";
    for (var count = 0; count < size; count++)
      result += "'";
    result += "\\";
  };

  flat(3);
  mountain(4);
  flat(6);
  mountain(1);
  flat(1);
  return result;
};

console.log(landscape());
#+END_SRC

#+RESULTS:
: ___/''''\______/'\_
: undefined


** Functions as values
Function variables usually simply act as names for a specific piece of the program. Such a variable is defined once and never changed. This makes it easy to start confusing the function and its name.

But the two are different. A function value can do all the things that other values can do—you can use it in arbitrary expressions, not just call it. It is possible to store a function value in a new place, pass it as an argument to a function, and so on. Similarly, a variable that holds a function is still just a regular variable and can be assigned a new value, like so:

var launchMissiles = function(value) {
  missileSystem.launch("now");
};
if (safeMode)
  launchMissiles = function(value) {/* do nothing */};

** Declaration notation

There is a slightly shorter way to say “var square = function…”. The function keyword can also be used at the start of a statement, as in the following:

function square(x) {
  return x * x;
}
This is a function declaration. The statement defines the variable square and points it at the given function. So far so good. There is one subtlety with this form of function definition, however.

#+BEGIN_SRC js :cmd "nodejs"
console.log("The future says:", future());
function future() {
  return "We STILL have no flying cars.";
}
#+END_SRC

#+RESULTS:
: The future says: We STILL have no flying cars.
: undefined

This code works, even though the function is defined below the code that uses it. This is because function declarations are not part of the regular top-to-bottom flow of control. They are conceptually moved to the top of their scope and can be used by all the code in that scope. This is sometimes useful because it gives us the freedom to order code in a way that seems meaningful, without worrying about having to define all functions above their first use.

** The call stack

   #+BEGIN_SRC js :cmd "nodejs"
   function greet(who) {
  console.log("Hello " + who);
}
greet("Harry");
console.log("Bye");
   #+END_SRC

   #+RESULTS:
   : Hello Harry
   : Bye
   : undefined

A run through this program goes roughly like this: the call to greet causes control to jump to the start of that function (line 2). It calls console.log (a built-in browser function), which takes control, does its job, and then returns control to line 2. Then it reaches the end of the greet function, so it returns to the place that called it, at line 4. The line after that calls console.log again.

We could show the flow of control schematically like this:

top
   greet
        console.log
   greet
top
   console.log
top

Because a function has to jump back to the place of the call when it returns, the computer must remember the context from which the function was called. In one case, console.log has to jump back to the greet function. In the other case, it jumps back to the end of the program.

The place where the computer stores this context is the call stack. Every time a function is called, the current context is put on top of this “stack”. When the function returns, it removes the top context from the stack and uses it to continue execution.

Storing this stack requires space in the computer’s memory. When the stack grows too big, the computer will fail with a message like “out of stack space” or “too much recursion”. The following code illustrates this by asking the computer a really hard question, which causes an infinite back-and-forth between two functions. Rather, it would be infinite, if the computer had an infinite stack. As it is, we will run out of space, or “blow the stack”.

** Optional arguments

The following code is allowed and executes without any problem:

alert("Hello", "Good Evening", "How do you do?");
The function alert officially accepts only one argument. Yet when you call it like this, it doesn’t complain. It simply ignores the other arguments and shows you “Hello”.

JavaScript is extremely broad-minded about the number of arguments you pass to a function. If you pass too many, the extra ones are ignored. If you pass too few, the missing parameters simply get assigned the value undefined.

The downside of this is that it is possible—likely, even—that you’ll accidentally pass the wrong number of arguments to functions and no one will tell you about it.

The upside is that this behavior can be used to have a function take “optional” arguments. For example, the following version of power can be called either with two arguments or with a single argument, in which case the exponent is assumed to be two, and the function behaves like square.


#+BEGIN_SRC js :cmd "nodejs"
function power(base, exponent) {
  if (exponent == undefined)
    exponent = 2;
  var result = 1;
  for (var count = 0; count < exponent; count++)
    result *= base;
  return result;
}

console.log(power(4));

#+END_SRC

#+RESULTS:
: 16
: undefined
** Closure

The ability to treat functions as values, combined with the fact that local variables are “re-created” every time a function is called, brings up an interesting question. What happens to local variables when the function call that created them is no longer active?

The following code shows an example of this. It defines a function, wrapValue, which creates a local variable. It then returns a function that accesses and returns this local variable.

#+BEGIN_SRC js :cmd "nodejs"
function wrapValue(n) {
  var localVariable = n;
  return function() { return localVariable; };
}

var wrap1 = wrapValue(1);
var wrap2 = wrapValue(2);
console.log(wrap1());
console.log(wrap2());
#+END_SRC

#+RESULTS:
: 1
: 2
: undefined

#+BEGIN_SRC js :cmd "nodejs"
function multiplier(factor) {
  return function(number) {
    return number * factor;
  };
}

var twice = multiplier(2);
console.log(twice(5));
#+END_SRC

#+RESULTS:
: 10
: undefined

** Recursion

A function that calls itself is called recursive. REcursion allows some functions to be written in a different style. Take, for example, this alternative implementation of power:

#+BEGIN_SRC js :cmd "nodejs"
function power(base, exponent) {
if (exponent ==0)
  return 1;
else
  return base * power(base, exponent - 1);
}

console.log(power(2, 5));
#+END_SRC

#+RESULTS:
: 32
: undefined

** Growing functions
We want to write a program that prints two numbers, the numbers of cows and chickens on a farm, with the words Cows and Chickens after them, and zeros padded before both numbers so that they are always three digits long.

#+BEGIN_SRC js :cmd "nodejs"
function printFarmInventory(cows, chickens) {
  var cowString = String(cows);
  while (cowString.length < 3)
    cowString = "0" + cowString;
  console.log(cowString + " Cows");
  var chickenString = String(chickens);
  while (chickenString.length < 3)
    chickenString = "0" + chickenString;
  console.log(chickenString + " Chickens");
}
printFarmInventory(7, 11);
#+END_SRC

#+RESULTS:
: 007 Cows
: 011 Chickens
: undefined

** DONE Functions and side effect [100%]                              :STUDY:
   SCHEDULED: <2017-02-04 Sat>
#+BEGIN_QUOTE
Functions can be roughly divided into those that are called for their side effects and those that are called for their return value. (Though it is definitely also possible to have both side effects and return a value.)

The first helper function in the farm example, printZeroPaddedWithLabel, is called for its side effect: it prints a line. The second version, zeroPad, is called for its return value. It is no coincidence that the second is useful in more situations than the first. Functions that create values are easier to combine in new ways than functions that directly perform side effects.

A pure function is a specific kind of value-producing function that not only has no side effects but also doesn’t rely on side effects from other code—for example, it doesn’t read global variables that are occasionally changed by other code. A pure function has the pleasant property that, when called with the same arguments, it always produces the same value (and doesn’t do anything else). This makes it easy to reason about. A call to such a function can be mentally substituted by its result, without changing the meaning of the code. When you are not sure that a pure function is working correctly, you can test it by simply calling it, and know that if it works in that context, it will work in any context. Nonpure functions might return different values based on all kinds of factors and have side effects that might be hard to test and think about.

Still, there’s no need to feel bad when writing functions that are not pure or to wage a holy war to purge them from your code. Side effects are often useful. There’d be no way to write a pure version of console.log, for example, and console.log is certainly useful. Some operations are also easier to express in an efficient way when we use side effects, so computing speed can be a reason to avoid purity.
#+END_QUOTE   

**  Exercises [1/3]                                                   :STUDY:
   - [X] Minimum
   - [ ] Recursion
   - [ ] Bean counting

*** Minimum    
#+BEGIN_SRC js :cmd "nodejs"
function min(a, b) {
  if (a < b)
    return a;
  else
    return b;
}

console.log(min(0, 10));
console.log(min(0, -10));
#+END_SRC

#+RESULTS:
: 0
: -10
: undefined

** JavaScript Events

   JavaScript's interaction with HTML is handled through events that
   occur when the user or browser manipulates a page.

   When the page loads, it is called an event. When the user clicks a
   button, that click too is an event. Other examples include events
   like pressing any key, closing a window, resizing a window.

   Developers can use these events to execute JavaScript coded
   responses.

   #+BEGIN_QUOTE
  <html>
       <head>

	  <script type="text/javascript">
	     <!--
		function sayHello() {
		   alert("Hello World")
		}
	     //-->
	  </script>

       </head>

       <body>
	  <p>Click the following button and see result</p>

	  <form>
	     <input type="button" onclick="sayHello()" value="Say Hello" />
	  </form>

       </body>
    </html>

   #+END_QUOTE

   HTML 5 standard events

   | Attribute        | Value  | Description                                |
   |------------------+--------+--------------------------------------------|
   | offline          | script | triggers when the document goes offline    |
   | onabort          | script | triggers on an abort events                |
   | onafterprint     | script | triggers after document is printed         |
   | onbeforeoload    | script | triggers before the document load          |
   | onberforeprint   | script | triggers before the document is printed    |
   | onblur           | script | triggers when the window loses focus       |
   | oncanplay        | script | triggers when media can start play, but    |
   |                  |        | might has to stop for buffering            |
   | oncanplaythrough | script | Triggers when media can be played to the   |
   |                  |        | end, without stopping for buffering        |
   | onchange         | script | Triggers when an element changes           |
   | onclick          | script | Triggers on a mouse click                  |
   | oncontextmenu    | script | Triggers when a context menu is triggered  |
   | ondblclick       | script | Triggers on a mouse double-click           |
   | ondrag           | script | Triggers when an element is dragged        |
   | ondragend        | script | Triggers at the end of a drag operation    |
   | ondragenter      | script | Triggers when an element has been dragged  |
   |                  |        | to a valid drop target                     |
   | ondragleave      | script | Triggers when an element is being dragged  |
   |                  |        | over a valid drop target                   |
   | ondragover       | script | Triggers at the start of a drag operation  |
   | ondragstart      | script | Triggers at the start of a drag operation  |
   | ondrop           | script | Triggers when dragged element is being     |
   |                  |        | dropped                                    |
   | ondurationchange | script | Triggers when the length of the media is   |
   |                  |        | changed                                    |
   | onemptied        | script | Triggers when a media resource element     |
   |                  |        | suddenly becomes empty                     |
   | onended          | script | Triggers when media has reach the end      |
   | onerror          | script | Triggers when an error occur               |
   | onfocus          | script | Triggers when the window gets focus        |
   | onformchange     | script | Triggers when a form changes               |
   | onforminput      | script | Triggers when a form gets user input       |
   | onhaschange      | script | Triggers when the document has change      |
   | oninput          | script | Triggers when an element gets user input   |
   | oninvalid        | script | Triggers when an element is invalid        |
   | onkeydown        | script | Triggers when a key is pressed             |
   | onkeypress       | script | Triggers when a key is pressed and         |
   |                  |        | released                                   |
   | onkeyup          | script | Triggers when a key is released            |
   | onload           | script | Triggers when the document loads           |
   | onloadeddata     | script | Triggers when media data is loaded         |
   | onloadedmetadata | script | Triggers when the duration and other media |
   |                  |        | data of a media element is loaded          |
   | onloadstart      | script | Triggers when the browser starts to load   |
   |                  |        | the media data                             |
   | onmessage        | script | Triggers when the message is triggered     |
   | onmousedown      | script | Triggers when a mouse button is pressed    |
   | onmousemove      | script | Triggers when the mouse pointer moves      |
   | onmouseout       | script | Triggers when the mouse pointer moves out  |
   |                  |        | of an element                              |
   | onmouseover      | script | Triggers when the mouse pointer moves over |
   |                  |        | an element                                 |
   | onmouseup        | script | Triggers when a mouse button is released   |
   | onmousewheel     | script | Triggers when the mouse wheel is being     |
   |                  |        | rotated                                    |
   | onscroll         | script | Triggers when an element's scrollbar is    |
   |                  |        | being scrolled                             |
* jQuery

** Include jQuery in JavaScript console

   Run this in your browser's JavaScript console, then jQuery should
   be available...

   #+BEGIN_SRC js :cmd "nodejs"
   javascript: (function(e, s) {
       e.src = s;
       e.onload = function() {
           jQuery.noConflict();
           console.log('jQuery injected');
       };
       document.head.appendChild(e);
   })(document.createElement('script'), '//code.jquery.com/jquery-latest.min.js')

   #+END_SRC

** jQuery scroll to bottom of page/frame

   $(window).scrollTop($(document).height());

** jQuery CDN Based version

   #+BEGIN_SRC shell :results output
   cd /home/vikky/Desktop/DVCS/stuff/Scripts
   cat ex_jq1.html
   #+END_SRC

   #+RESULTS:
   #+begin_example
   <!DOCTYPE html>
   <html>

      <head>
	 <title>The jQuery Example</title>
	 <script type = "text/javascript"
	    src = "https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>

	 <script type = "text/javascript">
	    $(document).ready(function(){
	       document.write("Hello, World!");
	    });
	 </script>
      </head>

      <body>
	 <h1>Hello</h1>
      </body>

   </html>
#+end_example
** How to call a jQuery library function

   #+BEGIN_EXAMPLE
   $(document).ready(function() {
   // do stuff when DOM is ready
   });
   #+END_EXAMPLE

   To call upon any jQuery library function, use HTML script tags as
   shown below

   #+BEGIN_SRC shell :results output
   cd /home/vikky/Desktop/DVCS/stuff/Scripts
   cat ex2_jQuery.html
   #+END_SRC

   #+RESULTS:
   #+begin_example
   <html>

      <head>
	 <title>The jQuery Example</title>
	 <script type = "text/javascript" 
	    src = "https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>

	 <script type = "text/javascript" language = "javascript">
	    $(document).ready(function() {
	       $("div").click(function() {alert("Hello, world!");});
	    });
	 </script>
      </head>

      <body>
	 <div id = "mydiv">
	    Click on this to see a dialogue box.
	 </div>
      </body>

   </html>
#+end_example
** How to use custom scripts

   custom.js:

   #+BEGIN_EXAMPLE
   $(document).ready(function() {

      $("div").click(function() {
         alert("Hello, world!");
      });

   });

   #+END_EXAMPLE

   Now we can include custom.js file in our HTML file as follows:

   #+BEGIN_EXAMPLE
   <html>

   <head>
      <title>The jQuery Example</title>
      <script type = "text/javascript"
         src = "https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>

      <script type = "text/javascript" src = "/jquery/custom.js"></script>
   </head>

   <body>
      <div id = "mydiv">
         Click on this to see a dialogue box.
      </div>
   </body>

</html>

   #+END_EXAMPLE
** Functions

   A function in JavaScript can be either named or anonymous

   #+BEGIN_EXAMPLE
   function named(){
      // do some stuff here
   }
   #+END_EXAMPLE

   Anonymous function can be defined is similar way as a normal
   function but it would not have any name. A anonymous function can
   be assigned to a variable or passed to a method as shown below.

   #+BEGIN_EXAMPLE
   var handler = function (){
      // do some stuff here
   }
   #+END_EXAMPLE

   JQuery makes a use of anonymous functions very frequently as
   follows

   #+BEGIN_EXAMPLE
   $(document).ready(function(){
     // do some stuff here
   });
   #+END_EXAMPLE

   Arguments

   JavaScript variable arguments is a kind of array which has length
   property.

   #+BEGIN_SRC js :cmd "nodejs"
   function func(x){
      console.log(typeof x, arguments.length);
   }
   func();
   func(1);
   func("1", "2", "3");
   #+END_SRC

   #+RESULTS:
   : undefined 0
   : number 1
   : string 3

   Context

   JavaScript famous keyword *this* always refers to the current
   context. Within a function *this* context can change, depending on
   how the function is called

   #+BEGIN_EXAMPLE
   $(document).ready(function() {
      // this refers to window.document
   });

   $("div").click(function() {
      // this refers to a div DOM element
   });
   #+END_EXAMPLE

   You can specify the context for a function call using the
   function-built-in methods call() and apply() methods.

   The difference between them is how they pass arguments. Call passes
   all arguments through as arguments to the function, while apply
   accepts an array as the arguments.

   #+BEGIN_SRC js :cmd "nodejs"
   function scope(){
      console.log(this, arguments.length);
   }
   scope.call("foobar", [1,2]);
   scope.apply("foobar", [1,2]);
   #+END_SRC

   #+RESULTS:
   : "foobar", 1
   : "foobar", 2

   Scope

   The scope of a variable is the region of your program in which it
   is defined. JavaScript variable will have only two scopes:

   - Global variables - a global variable has global scope which means
     it is defined everywhere in your JavaScript code.
   - Local variables - a local variable will be visible only within a
     function where it is defined. Function parameters are always
     local to that function.

   Within the body of a function, a local variable takes precedence
   over a global variable with the same name

   #+BEGIN_EXAMPLE
   var myvar = "global";      // ==> Declare a global variable

   function ( ) {
      var myvar = "local";    // ==> Declare a local variable
      document.write(myVar);  // ==> local
   }
   #+END_EXAMPLE

   Callback

   A callback is a plain JavaScript function passed to some method as
   an argument or option. Some callbacks are just events, called to
   give the user a chance to react when a certain state is triggered.

   #+BEGIN_SRC js :cmd "nodejs"
   $("body").click(function(event) {
      console.log("clicked: " + event.target);
   });
   #+END_SRC

   Most callbacks provide arguments and a context. In the event-handler
   example, the callback is called with one argument, an Event.

   Some callbacks are required to return something, others make that return
   value optional. To prevent a form submission, a submit event handler can
   return false as follows −

   #+BEGIN_EXAMPLE
   $("#myform").submit(function() {
      return false;
   });
   #+END_EXAMPLE

   Closures

   Closures are created whenever a variable that is defined outside
   the current scope is accessed from within some inner scope.

   #+BEGIN_SRC js :cmd "nodejs"
   function create() {
      var counter = 0;

      return {
         increment: function() {
            counter++;
	 },

         print: function() {
            console.log(counter);
         }
      }
   }

   var c = create();
   c.increment();
   c.print()
   #+END_SRC

   #+RESULTS:
   : 1

   Built-in functions

   | method        | description                                               |
   |---------------+-----------------------------------------------------------|
   | charAt()      | returns the character at the specified index              |
   | concat()      | combines the text of two strings and returns a new string |
   | forEach()     | calls a function for each element in the array            |
   |               |                                                           |
   | indexOf()     | returns the index within the calling string               |
   | length()      | return the length of the string                           |
   |               |                                                           |
   |               |                                                           |
   | pop()         | removes the last element from an array and returns        |
   |               | that element                                              |
   | push()        | adds one or more elements to the end of an array and      |
   |               | returns the new length of the array                       |
   | reverse()     | reverses the order of the elements of an array            |
   | sort()        | sorts the elements of an array                            |
   | substr()      | returns the characters in a string beginning at the       |
   |               | specified location through the specified number of        |
   |               | characters.                                               |
   | toLowerCase() | returns the calling string value converted to lower case  |
   | toString()    | return the string representation of the numbur's value    |
   | toUpperCase() | returns the calling string value converted to uppercase
** The document object model

   #+BEGIN_EXAMPLE
   <html>

   <head>
      <title>The jQuery Example</title>
   </head>

   <body>
      <div>
         <p>This is a paragraph.</p>
         <p>This is second paragraph.</p>
         <p>This is third paragraph.</p>
      </div>
   </body>

   </html>

   #+END_EXAMPLE

   The $() factory function

   jQuery selectors start with the dollar sign and parentheses − $().
   The factory function $() makes use of following three building blocks
   while selecting elements in a given document

   Tag name: $('p') select all paragraph <p>
   Tag ID: $('#some-id') select the single element in the document
   that has an ID of some-id.
   Tag Class: $('.some-class')selects all elements in the document
   that have a class of some-class.

   Following is a simple example which makes use of Tag Selector. This would
   select all the elements with a tag name p and will set their background to
   "yellow".

   #+BEGIN_SRC shell :results output
   cd /home/vikky/Desktop/DVCS/stuff/Scripts/
   cat jq_ex3.html
   #+END_SRC

   #+RESULTS:
   #+begin_example
   <html>

      <head>
	 <title>The jQuery Example</title>
	 <script type = "text/javascript" 
	    src = "https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>

	 <script type = "text/javascript" language = "javascript">
	    $(document).ready(function() {
	       $("p").css("background-color", "yellow");
	    });
	 </script>
      </head>

      <body>
	 <div>
	    <p class = "myclass">This is a paragraph.</p>
	    <p id = "myid">This is second paragraph.</p>
	    <p>This is third paragraph.</p>
	 </div>
      </body>

   </html>
#+end_example
** jQuery Attributes

   Some of the more common properties are:

   - className
   - tagName
   - id
   - href
   - title
   - rel
   - src

   Get attribute value

   The attr() method can be used to either fetch the value of an
   attribute from the first element in the matched set or set attribute
   values onto all matched elements.

   Following is a simple example which fetches title attribute of <em>
   tag and set <div id = "divid"> value with the same value

   #+BEGIN_SRC shell :results output
   cd /home/vikky/Desktop/DVCS/stuff/Scripts/
   cat jq_ex4.html
   #+END_SRC

   #+RESULTS:
   #+begin_example
   <html>

      <head>
	 <title>The jQuery Example</title>
	 <script type = "text/javascript"
	    src = "https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>

	 <script type = "text/javascript" language = "javascript">
	    $(document).ready(function() {
	       var title = $("em").attr("title");
	       $("#divid").text(title);
	    });
	 </script>
      </head>

      <body>
	 <div>
	    <em title = "Bold and Brave">This is first paragraph.</em>
	    <p id = "myid">This is second paragraph.</p>
	    <div id = "divid"></div>
	 </div>
      </body>

   </html>
#+end_example

   Set attribute value

   The attr(name, value) method can be used to set the named attribute
   onto all elements in the wrapped set using the passed value.

   Following is a simple example which set src attributes of an image
   tag to a correct location:

   #+BEGIN_SRC shell :results output
   cd /home/vikky/Desktop/DVCS/stuff/Scripts
   cat jq_ex5.html
   #+END_SRC

   #+RESULTS:
   #+begin_example
   <html>

      <head>
	 <title>The jQuery Example</title>
	 <base href="https://www.tutorialspoint.com" />
	 <script type = "text/javascript"
	    src = "https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>

	 <script type = "text/javascript" language = "javascript">
	    $(document).ready(function() {
	       $("#myimg").attr("src", "/jquery/images/jquery.jpg");
	    });
	 </script>
      </head>

      <body>
	 <div>
	    <img id = "myimg" src = "/images/jquery.jpg" alt = "Sample image" />
	 </div>
      </body>

   </html>
#+end_example
** Applying styles

   The addclass( classes ) method can be used to apply defined style
   sheets onto all the matched elements.

   Following is a simple example which sets class attribute of a para <p> tag

   #+BEGIN_SRC shell :results output
   cd /home/vikky/Desktop/DVCS/stuff/Scripts
   cat jq_ex6.html
   #+END_SRC

   #+RESULTS:
   #+begin_example
   <html>

      <head>
	 <title>The jQuery Example</title>
	 <script type = "text/javascript" 
	    src = "https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>

	 <script type = "text/javascript" language = "javascript">
	    $(document).ready(function() {
	       $("em").addClass("selected");
	       $("#myid").addClass("highlight");
	    });
	 </script>

	 <style>
	    .selected { color:red; }
	    .highlight { background:yellow; }
	 </style>	
      </head>

      <body>
	 <em title = "Bold and Brave">This is first paragraph.</em>
	 <p id = "myid">This is second paragraph.</p>
      </body>

   </html>
#+end_example

   
* RDBMS

** MySQL

*** connect to db from terminal
   mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| test               |
+--------------------+
4 rows in set (0.23 sec)

mysql> create database sample_db;
Query OK, 1 row affected (0.02 sec)

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| sample_db          |
| test               |
+--------------------+
5 rows in set (0.00 sec)

mysql> create user 'vikky'@'localhost' identified by 'h1dden';
Query OK, 0 rows affected (0.11 sec)

mysql> grant all on sample_db.* to 'vikky'@'localhost';
Query OK, 0 rows affected (0.00 sec)

*** create DB
   :PROPERTIES:
   :ORDERED:  t
   :END:
mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| sample_db          |
+--------------------+
2 rows in set (0.00 sec)
mysql> use sample_db;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql> show tables;
+---------------------+
| Tables_in_sample_db |
+---------------------+
| artist              |
+---------------------+
1 row in set (0.00 sec)


mysql> show columns from artist;
+-------------+--------------+------+-----+---------+-------+
| Field       | Type         | Null | Key | Default | Extra |
+-------------+--------------+------+-----+---------+-------+
| artist_id   | smallint(5)  | NO   | PRI | NULL    |       |
| artist_name | varchar(128) | NO   |     | NULL    |       |
+-------------+--------------+------+-----+---------+-------+

mysql> create table album (artist_id int(5) NOT NULL, album_id int(4) NOT NULL, album_name char(128), PRIMARY KEY (artist_id,album_id))
    -> ;
Query OK, 0 rows affected (0.08 sec)

mysql> show columns from album;
+------------+-----------+------+-----+---------+-------+
| Field      | Type      | Null | Key | Default | Extra |
+------------+-----------+------+-----+---------+-------+
| artist_id  | int(5)    | NO   | PRI | NULL    |       |
| album_id   | int(4)    | NO   | PRI | NULL    |       |
| album_name | char(128) | YES  |     | NULL    |       |
+------------+-----------+------+-----+---------+-------+
3 rows in set (0.01 sec)

mysql> show tables;     
+---------------------+
| Tables_in_sample_db |
+---------------------+
| album               |
| artist              |
+---------------------+
2 rows in set (0.00 sec)

mysql> create table track (track_id int(3) NOT NULL, track_name char(128), artist_id int(5) NOT NULL, album_id int(4) NOT NULL, time decimal(5,2), PRIMARY KEY (track_id,artist_id,album_id));
Query OK, 0 rows affected (0.02 sec)

mysql> show columns from track;
+------------+--------------+------+-----+---------+-------+
| Field      | Type         | Null | Key | Default | Extra |
+------------+--------------+------+-----+---------+-------+
| track_id   | int(3)       | NO   | PRI | NULL    |       |
| track_name | char(128)    | YES  |     | NULL    |       |
| artist_id  | int(5)       | NO   | PRI | NULL    |       |
| album_id   | int(4)       | NO   | PRI | NULL    |       |
| time       | decimal(5,2) | YES  |     | NULL    |       |
+------------+--------------+------+-----+---------+-------+
5 rows in set (0.00 sec)

mysql> show tables;
+---------------------+
| Tables_in_sample_db |
+---------------------+
| album               |
| artist              |
| track               |
+---------------------+
3 rows in set (0.00 sec)

mysql> create table played (artist_id int(5) NOT NULL, album_id int(4) NOT NULL, track_id int(3) NOT NULL, played timestamp, PRIMARY KEY (artist_id,album_id,track_id,played));
Query OK, 0 rows affected (0.01 sec)

mysql> show columns from played;
+-----------+-----------+------+-----+-------------------+-----------------------------+
| Field     | Type      | Null | Key | Default           | Extra                       |
+-----------+-----------+------+-----+-------------------+-----------------------------+
| artist_id | int(5)    | NO   | PRI | NULL              |                             |
| album_id  | int(4)    | NO   | PRI | NULL              |                             |
| track_id  | int(3)    | NO   | PRI | NULL              |                             |
| played    | timestamp | NO   | PRI | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |
+-----------+-----------+------+-----+-------------------+-----------------------------+
4 rows in set (0.00 sec)

mysql> show tables;
+---------------------+
| Tables_in_sample_db |
+---------------------+
| album               |
| artist              |
| played              |
| track               |
+---------------------+
4 rows in set (0.00 sec)
 
*** fulfill DB with particular data

**** fulfill table artist:

mysql> insert into artist (artist_id, artist_name) values (1, 'New Order');
Query OK, 1 row affected (0.01 sec)

mysql> insert into artist (artist_id, artist_name) values (2, 'Nick Cave & The Bad Seeds');
Query OK, 1 row affected (0.01 sec)

mysql> insert into artist (artist_id, artist_name) values (3, 'Miles Davis');
Query OK, 1 row affected (0.01 sec)

mysql> insert into artist (artist_id, artist_name) values (4, 'The Rolling Stones');
Query OK, 1 row affected (0.00 sec)

mysql> insert into artist (artist_id, artist_name) values (5, 'The Stone Roses');
Query OK, 1 row affected (0.00 sec)

mysql> insert into artist (artist_id, artist_name) values (6, 'Kalie Minogue');
Query OK, 1 row affected (0.01 sec)

mysql> select * from artist;
+-----------+---------------------------+
| artist_id | artist_name               |
+-----------+---------------------------+
|         1 | New Order                 |
|         2 | Nick Cave & The Bad Seeds |
|         3 | Miles Davis               |
|         4 | The Rolling Stones        |
|         5 | The Stone Roses           |
|         6 | Kalie Minogue             |
+-----------+---------------------------+
6 rows in set (0.01 sec)

**** fulfill table album:

mysql> insert into album (artist_id, album_id, album_name) values (2, 1, 'Let love In');
Query OK, 1 row affected (0.00 sec)

mysql> insert into album (artist_id, album_id, album_name) values (1, 1, 'Retro - John McCready FAN');
Query OK, 1 row affected (0.01 sec)

mysql> insert into album (artist_id, album_id, album_name) values (1, 2, 'Substance (Disc 2)');
Query OK, 1 row affected (0.01 sec)

mysql> insert into album (artist_id, album_id, album_name) values (1, 3, 'Retro - Miranda Sawyer POP');
Query OK, 1 row affected (0.01 sec)

mysql> insert into album (artist_id, album_id, album_name) values (1, 4, 'Retro - NewOrder/Bobby Gillespie LIVE');
Query OK, 1 row affected (0.01 sec)

mysql> insert into album (artist_id, album_id, album_name) values (3, 1, 'Live Around The World');
Query OK, 1 row affected (0.01 sec)

mysql> insert into album (artist_id, album_id, album_name) values (3, 2, 'In A Silent Way');
Query OK, 1 row affected (0.00 sec)

mysql> insert into album (artist_id, album_id, album_name) values (1, 5, 'Power, Corraption&Lies');
Query OK, 1 row affected (0.00 sec)

mysql> insert into album (artist_id, album_id, album_name) values (4, 1, 'Exile On Main Street');
Query OK, 1 row affected (0.01 sec)

mysql> insert into album (artist_id, album_id, album_name) values (1, 6, 'Substance 1987 (Disc 1)');
Query OK, 1 row affected (0.00 sec)

mysql> insert into album (artist_id, album_id, album_name) values (5, 1, 'Second Coming');
Query OK, 1 row affected (0.00 sec)

mysql> insert into album (artist_id, album_id, album_name) values (6, 1, 'Light Years');
Query OK, 1 row affected (0.01 sec)

mysql> insert into album (artist_id, album_id, album_name) values (1, 7, 'Brotherhood');
Query OK, 1 row affected (0.01 sec)

mysql> select * from album;
+-----------+----------+---------------------------------------+
| artist_id | album_id | album_name                            |
+-----------+----------+---------------------------------------+
|         1 |        1 | Retro - John McCready FAN             |
|         1 |        2 | Substance (Disc 2)                    |
|         1 |        3 | Retro - Miranda Sawyer POP            |
|         1 |        4 | Retro - NewOrder/Bobby Gillespie LIVE |
|         1 |        5 | Power, Corraption&Lies                |
|         1 |        6 | Substance 1987 (Disc 1)               |
|         1 |        7 | Brotherhood                           |
|         2 |        1 | Let love In                           |
|         3 |        1 | Live Around The World                 |
|         3 |        2 | In A Silent Way                       |
|         4 |        1 | Exile On Main Street                  |
|         5 |        1 | Second Coming                         |
|         6 |        1 | Light Years                           |
+-----------+----------+---------------------------------------+
13 rows in set (0.00 sec)

**** fulfill table track:
mysql> insert into track (track_id, track_name, artist_id, album_id, time) values (4, 'Red Right Hand', 2, 1, '00:06:11');
Query OK, 1 row affected, 1 warning (0.01 sec)

mysql> insert into track (track_id, track_name, artist_id, album_id, time) values (14, 'Run Wild', 1, 1, '00:03:57');
Query OK, 1 row affected, 1 warning (0.00 sec)

mysql> insert into track (track_id, track_name, artist_id, album_id, time) values (1, 'Rip This Joint', 1, 1, '00:02:23');
Query OK, 1 row affected, 1 warning (0.00 sec)

mysql> insert into track (track_id, track_name, artist_id, album_id, time) values (2, 'All Day Long', 3, 3, '00:02:50');
Query OK, 1 row affected, 1 warning (0.00 sec)

mysql> insert into track (track_id, track_name, artist_id, album_id, time) values (3, 'Amandla', 5, 2, '00:03:00');
Query OK, 1 row affected, 1 warning (0.01 sec)

mysql> insert into track (track_id, track_name, artist_id, album_id, time) values (5, 'Angel Dust', 6, 1, '00:02:40');
Query OK, 1 row affected, 1 warning (0.00 sec)

mysql> insert into track (track_id, track_name, artist_id, album_id, time) values (6, 'Weirda', 3, 3, '00:03:01');
Query OK, 1 row affected, 1 warning (0.00 sec)

mysql> insert into track (track_id, track_name, artist_id, album_id, time) values (7, 'Paradise', 1, 2, '00:05:01');
Query OK, 1 row affected, 1 warning (0.01 sec)

mysql> insert into track (track_id, track_name, artist_id, album_id, time) values (8, 'I Let Love In', 2, 1, '00:04:02');
Query OK, 1 row affected, 1 warning (0.01 sec)

mysql> insert into track (track_id, track_name, artist_id, album_id, time) values (9, 'Jangling Jack', 3, 3, '00:03:03');
Query OK, 1 row affected, 1 warning (0.01 sec)

mysql> select * from track;
+----------+----------------+-----------+----------+------+
| track_id | track_name     | artist_id | album_id | time |
+----------+----------------+-----------+----------+------+
|        1 | Rip This Joint |         1 |        1 | 0.00 |
|        2 | All Day Long   |         3 |        3 | 0.00 |
|        3 | Amandla        |         5 |        2 | 0.00 |
|        4 | Red Right Hand |         2 |        1 | 0.00 |
|        5 | Angel Dust     |         6 |        1 | 0.00 |
|        6 | Weirda         |         3 |        3 | 0.00 |
|        7 | Paradise       |         1 |        2 | 0.00 |
|        8 | I Let Love In  |         2 |        1 | 0.00 |
|        9 | Jangling Jack  |         3 |        3 | 0.00 |
|       10 | Run Wild       |         1 |        1 | 0.00 |
+----------+----------------+-----------+----------+------+
10 rows in set (0.00 sec)

**** errors was fixed (column time):

mysql> ALTER TABLE track MODIFY COLUMN time time;
Query OK, 10 rows affected (0.09 sec)
Records: 10  Duplicates: 0  Warnings: 0

mysql> select * from track;
+----------+----------------+-----------+----------+----------+
| track_id | track_name     | artist_id | album_id | time     |
+----------+----------------+-----------+----------+----------+
|        1 | Rip This Joint |         1 |        1 | 00:00:00 |
|        2 | All Day Long   |         3 |        3 | 00:00:00 |
|        3 | Amandla        |         5 |        2 | 00:00:00 |
|        4 | Red Right Hand |         2 |        1 | 00:00:00 |
|        5 | Angel Dust     |         6 |        1 | 00:00:00 |
|        6 | Weirda         |         3 |        3 | 00:00:00 |
|        7 | Paradise       |         1 |        2 | 00:00:00 |
|        8 | I Let Love In  |         2 |        1 | 00:00:00 |
|        9 | Jangling Jack  |         3 |        3 | 00:00:00 |
|       10 | Run Wild       |         1 |        1 | 00:00:00 |
+----------+----------------+-----------+----------+----------+
10 rows in set (0.00 sec)

mysql> UPDATE track SET time = '00:06:11' WHERE track_id = 1;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> UPDATE track SET time = '00:03:57' WHERE track_id = 2;
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> UPDATE track SET time = '00:02:23' WHERE track_id = 3;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> UPDATE track SET time = '00:02:50' WHERE track_id = 4;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> UPDATE track SET time = '00:03:00' WHERE track_id = 5;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> UPDATE track SET time = '00:02:40' WHERE track_id = 6;
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> UPDATE track SET time = '00:03:01' WHERE track_id = 7;
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> UPDATE track SET time = '00:05:01' WHERE track_id = 8;
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> UPDATE track SET time = '00:04:24' WHERE track_id = 9;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> UPDATE track SET time = '00:03:15' WHERE track_id = 10;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> SELECT * FROM track;
+----------+----------------+-----------+----------+----------+
| track_id | track_name     | artist_id | album_id | time     |
+----------+----------------+-----------+----------+----------+
|        1 | Rip This Joint |         1 |        1 | 00:06:11 |
|        2 | All Day Long   |         3 |        3 | 00:03:57 |
|        3 | Amandla        |         5 |        2 | 00:02:23 |
|        4 | Red Right Hand |         2 |        1 | 00:02:50 |
|        5 | Angel Dust     |         6 |        1 | 00:03:00 |
|        6 | Weirda         |         3 |        3 | 00:02:40 |
|        7 | Paradise       |         1 |        2 | 00:03:01 |
|        8 | I Let Love In  |         2 |        1 | 00:05:01 |
|        9 | Jangling Jack  |         3 |        3 | 00:04:24 |
|       10 | Run Wild       |         1 |        1 | 00:03:15 |
+----------+----------------+-----------+----------+----------+
10 rows in set (0.00 sec)

 
*** select data out from particular tables
**** select columns:

mysql> SELECT artist_name FROM artist;
+---------------------------+
| artist_name               |
+---------------------------+
| New Order                 |
| Nick Cave & The Bad Seeds |
| Miles Davis               |
| The Rolling Stones        |
| The Stone Roses           |
| Kalie Minogue             |
+---------------------------+
6 rows in set (0.00 sec)

mysql> SELECT artist_name,artist_id FROM artist;
+---------------------------+-----------+
| artist_name               | artist_id |
+---------------------------+-----------+
| New Order                 |         1 |
| Nick Cave & The Bad Seeds |         2 |
| Miles Davis               |         3 |
| The Rolling Stones        |         4 |
| The Stone Roses           |         5 |
| Kalie Minogue             |         6 |
+---------------------------+-----------+
6 rows in set (0.00 sec)

mysql> SELECT artist_id, artist_id FROM artist;
+-----------+-----------+
| artist_id | artist_id |
+-----------+-----------+
|         1 |         1 |
|         2 |         2 |
|         3 |         3 |
|         4 |         4 |
|         5 |         5 |
|         6 |         6 |
+-----------+-----------+
6 rows in set (0.00 sec)

mysql> SELECT album_name FROM sample_db.album;
+---------------------------------------+
| album_name                            |
+---------------------------------------+
| Retro - John McCready FAN             |
| Substance (Disc 2)                    |
| Retro - Miranda Sawyer POP            |
| Retro - NewOrder/Bobby Gillespie LIVE |
| Power, Corraption&Lies                |
| Substance 1987 (Disc 1)               |
| Brotherhood                           |
| Let love In                           |
| Live Around The World                 |
| In A Silent Way                       |
| Exile On Main Street                  |
| Second Coming                         |
| Light Years                           |
+---------------------------------------+
13 rows in set (0.00 sec)

**** choosing rows with the WHERE clause:

mysql> select * from artist where artist_name='New Order';
+-----------+-------------+
| artist_id | artist_name |
+-----------+-------------+
|         1 | New Order   |
+-----------+-------------+
1 row in set (0.00 sec)

mysql> select artist_name FROM artist WHERE artist_id = 4;
+--------------------+
| artist_name        |
+--------------------+
| The Rolling Stones |
+--------------------+
1 row in set (0.00 sec)

mysql> select artist_name FROM artist WHERE artist_id < 5;
+---------------------------+
| artist_name               |
+---------------------------+
| New Order                 |
| Nick Cave & The Bad Seeds |
| Miles Davis               |
| The Rolling Stones        |
+---------------------------+
4 rows in set (0.00 sec)

mysql> select album_name FROM album WHERE album_id <> 2;
+---------------------------------------+
| album_name                            |
+---------------------------------------+
| Retro - John McCready FAN             |
| Retro - Miranda Sawyer POP            |
| Retro - NewOrder/Bobby Gillespie LIVE |
| Power, Corraption&Lies                |
| Substance 1987 (Disc 1)               |
| Brotherhood                           |
| Let love In                           |
| Live Around The World                 |
| Exile On Main Street                  |
| Second Coming                         |
| Light Years                           |
+---------------------------------------+
11 rows in set (0.00 sec)

mysql> select artist_name FROM artist WHERE artist_name < 'M';
+---------------+
| artist_name   |
+---------------+
| Kalie Minogue |
+---------------+
1 row in set (0.00 sec)

mysql> select album_name FROM album WHERE album_name LIKE 'Retro%';
+---------------------------------------+
| album_name                            |
+---------------------------------------+
| Retro - John McCready FAN             |
| Retro - Miranda Sawyer POP            |
| Retro - NewOrder/Bobby Gillespie LIVE |
+---------------------------------------+
3 rows in set (0.00 sec)

mysql> select * FROM track WHERE track_name LIKE "R__%";
+----------+----------------+-----------+----------+------+
| track_id | track_name     | artist_id | album_id | time |
+----------+----------------+-----------+----------+------+
|        1 | Rip This Joint |         1 |        1 | 0.00 |
|        4 | Red Right Hand |         2 |        1 | 0.00 |
|       10 | Run Wild       |         1 |        1 | 0.00 |
+----------+----------------+-----------+----------+------+
3 rows in set (0.00 sec)

**** errors was fixed (column time):

mysql> select * FROM track WHERE track_name LIKE "R__%";
+----------+----------------+-----------+----------+----------+
| track_id | track_name     | artist_id | album_id | time     |
+----------+----------------+-----------+----------+----------+
|        1 | Rip This Joint |         1 |        1 | 00:06:11 |
|        4 | Red Right Hand |         2 |        1 | 00:02:50 |
|       10 | Run Wild       |         1 |        1 | 00:03:15 |
+----------+----------------+-----------+----------+----------+
3 rows in set (0.01 sec)

**** combining comditions with AND, OR, NOT and XOR:

mysql> SELECT album_name FROM album WHERE album_name > "C" AND album_name < "M";
+-----------------------+
| album_name            |
+-----------------------+
| Let love In           |
| Live Around The World |
| In A Silent Way       |
| Exile On Main Street  |
| Light Years           |
+-----------------------+
5 rows in set (0.01 sec)

mysql> SELECT album_name FROM album WHERE album_name LIKE "L%" OR album_name LIKE "S%" OR album_name LIKE "P%";
+-------------------------+
| album_name              |
+-------------------------+
| Substance (Disc 2)      |
| Power, Corraption&Lies  |
| Substance 1987 (Disc 1) |
| Let love In             |
| Live Around The World   |
| Second Coming           |
| Light Years             |
+-------------------------+
7 rows in set (0.00 sec)

mysql> SELECT album_name FROM album WHERE album_name LIKE "L%" OR album_name LIKE "S%" AND album_name LIKE "%g";
+-----------------------+
| album_name            |
+-----------------------+
| Let love In           |
| Live Around The World |
| Second Coming         |
| Light Years           |
+-----------------------+
4 rows in set (0.00 sec)

mysql> SELECT album_name FROM album WHERE (album_name LIKE "L%" OR album_name LIKE "S%") AND album_name LIKE "%g";
+---------------+
| album_name    |
+---------------+
| Second Coming |
+---------------+
1 row in set (0.00 sec)

mysql> SELECT * FROM album WHERE NOT (album_id = 1 OR album_id = 3);
+-----------+----------+---------------------------------------+
| artist_id | album_id | album_name                            |
+-----------+----------+---------------------------------------+
|         1 |        2 | Substance (Disc 2)                    |
|         1 |        4 | Retro - NewOrder/Bobby Gillespie LIVE |
|         1 |        5 | Power, Corraption&Lies                |
|         1 |        6 | Substance 1987 (Disc 1)               |
|         1 |        7 | Brotherhood                           |
|         3 |        2 | In A Silent Way                       |
+-----------+----------+---------------------------------------+
6 rows in set (0.00 sec)

mysql> SELECT * FROM album WHERE album_id > 2 AND NOT (album_id = 4 OR album_id = 6);
+-----------+----------+----------------------------+
| artist_id | album_id | album_name                 |
+-----------+----------+----------------------------+
|         1 |        3 | Retro - Miranda Sawyer POP |
|         1 |        5 | Power, Corraption&Lies     |
|         1 |        7 | Brotherhood                |
+-----------+----------+----------------------------+
3 rows in set (0.00 sec)

mysql> SELECT album_name FROM album WHERE album_name NOT LIKE "L%";
+---------------------------------------+
| album_name                            |
+---------------------------------------+
| Retro - John McCready FAN             |
| Substance (Disc 2)                    |
| Retro - Miranda Sawyer POP            |
| Retro - NewOrder/Bobby Gillespie LIVE |
| Power, Corraption&Lies                |
| Substance 1987 (Disc 1)               |
| Brotherhood                           |
| In A Silent Way                       |
| Exile On Main Street                  |
| Second Coming                         |
+---------------------------------------+
10 rows in set (0.00 sec)

mysql> SELECT album_name FROM album WHERE album_name LIKE "S%" AND album_name NOT LIKE "%)";
+---------------+
| album_name    |
+---------------+
| Second Coming |
+---------------+
1 row in set (0.00 sec)

**** XOR operator:

MySQL also supports the exclusive-OR operation through the XOR operator.
An exclusive OR evaluates as true if only one—but not both—of the expressions is true.
To beprecise, a XOR b is equivalent to (a AND (NOT b)) OR ((NOT a) AND b).
For example,suppose you want to find artists whose names end in “es” or start with “SELECT artist_name
FROM artist WHERE artist_name LIKE "The%" XOR artist_name LIKE "%es";

mysql> SELECT artist_name FROM artist WHERE artist_name LIKE "The%" XOR artist_name LIKE "%es";
Empty set (0.00 sec)

There are no matching entries in the database, since both “The Stone Roses” and “TheRolling Stones”
meet both criteria.

**** Order by Clauses:

mysql> SELECT * FROM artist ORDER BY artist_name;
+-----------+---------------------------+
| artist_id | artist_name               |
+-----------+---------------------------+
|         6 | Kalie Minogue             |
|         3 | Miles Davis               |
|         1 | New Order                 |
|         2 | Nick Cave & The Bad Seeds |
|         4 | The Rolling Stones        |
|         5 | The Stone Roses           |
+-----------+---------------------------+
6 rows in set (0.00 sec)

mysql> SELECT artist_name FROM artist ORDER BY artist_name DESC;
+---------------------------+
| artist_name               |
+---------------------------+
| The Stone Roses           |
| The Rolling Stones        |
| Nick Cave & The Bad Seeds |
| New Order                 |
| Miles Davis               |
| Kalie Minogue             |
+---------------------------+
6 rows in set (0.00 sec)

mysql> SELECT artist_name FROM artist ORDER BY artist_name ASC;
+---------------------------+
| artist_name               |
+---------------------------+
| Kalie Minogue             |
| Miles Davis               |
| New Order                 |
| Nick Cave & The Bad Seeds |
| The Rolling Stones        |
| The Stone Roses           |
+---------------------------+
6 rows in set (0.00 sec)

mysql> SELECT * FROM artist ORDER BY BINARY artist_name;
+-----------+---------------------------+
| artist_id | artist_name               |
+-----------+---------------------------+
|         6 | Kalie Minogue             |
|         3 | Miles Davis               |
|         1 | New Order                 |
|         2 | Nick Cave & The Bad Seeds |
|         4 | The Rolling Stones        |
|         5 | The Stone Roses           |
|         7 | kylie minigue             |
+-----------+---------------------------+
7 rows in set (0.03 sec)

mysql> SELECT track_name FROM track LIMIT 5;
+----------------+
| track_name     |
+----------------+
| Rip This Joint |
| All Day Long   |
| Amandla        |
| Red Right Hand |
| Angel Dust     |
+----------------+
5 rows in set (0.00 sec)

**** Joing Two Tables:

mysql> SELECT artist_name, album_name FROM artist INNER JOIN album USING(artist_id);
+---------------------------+---------------------------------------+
| artist_name               | album_name                            |
+---------------------------+---------------------------------------+
| New Order                 | Retro - John McCready FAN             |
| New Order                 | Substance (Disc 2)                    |
| New Order                 | Retro - Miranda Sawyer POP            |
| New Order                 | Retro - NewOrder/Bobby Gillespie LIVE |
| New Order                 | Power, Corraption&Lies                |
| New Order                 | Substance 1987 (Disc 1)               |
| New Order                 | Brotherhood                           |
| Nick Cave & The Bad Seeds | Let love In                           |
| Miles Davis               | Live Around The World                 |
| Miles Davis               | In A Silent Way                       |
| The Rolling Stones        | Exile On Main Street                  |
| The Stone Roses           | Second Coming                         |
| Kalie Minogue             | Light Years                           |
+---------------------------+---------------------------------------+
13 rows in set (0.00 sec)

mysql> SELECT album_name, track_name FROM album INNER JOIN track USING(artist_id, album_id) LIMIT 5;
+---------------------------+----------------+
| album_name                | track_name     |
+---------------------------+----------------+
| Retro - John McCready FAN | Rip This Joint |
| Let love In               | Red Right Hand |
| Light Years               | Angel Dust     |
| Substance (Disc 2)        | Paradise       |
| Let love In               | I Let Love In  |
+---------------------------+----------------+
5 rows in set (0.00 sec)

mysql> SELECT album_name, track_name FROM album INNER JOIN track USING(artist_id, album_id) ORDER BY album_name, track_id LIMIT 5;
+---------------------------+----------------+
| album_name                | track_name     |
+---------------------------+----------------+
| Let love In               | Red Right Hand |
| Let love In               | I Let Love In  |
| Light Years               | Angel Dust     |
| Retro - John McCready FAN | Rip This Joint |
| Retro - John McCready FAN | Run Wild       |
+---------------------------+----------------+
5 rows in set (0.00 sec)

mysql> SELECT MAX(artist_id) FROM artist;
+----------------+
| MAX(artist_id) |
+----------------+
|              7 |
+----------------+
1 row in set (0.01 sec)

mysql> UPDATE artist SET artist_name=UPPER(artist_name);
Query OK, 7 rows affected (0.01 sec)
Rows matched: 7  Changed: 7  Warnings: 0

mysql> SELECT artist_name FROM artist;
+---------------------------+
| artist_name               |
+---------------------------+
| NEW ORDER                 |
| NICK CAVE & THE BAD SEEDS |
| MILES DAVIS               |
| THE ROLLING STONES        |
| THE STONE ROSES           |
| KALIE MINOGUE             |
| KYLIE MINIGUE             |
+---------------------------+
7 rows in set (0.00 sec)

mysql> UPDATE album SET album_name = "Substance 1987 (DISC 2)" WHERE artist_id=1 AND album_id=2;
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> SELECT * FROM album;
+-----------+----------+---------------------------------------+
| artist_id | album_id | album_name                            |
+-----------+----------+---------------------------------------+
|         1 |        1 | Retro - John McCready FAN             |
|         1 |        2 | Substance 1987 (DISC 2)               |
|         1 |        3 | Retro - Miranda Sawyer POP            |
|         1 |        4 | Retro - NewOrder/Bobby Gillespie LIVE |
|         1 |        5 | Power, Corraption&Lies                |
|         1 |        6 | Substance 1987 (Disc 1)               |
|         1 |        7 | Brotherhood                           |
|         2 |        1 | Let love In                           |
|         3 |        1 | Live Around The World                 |
|         3 |        2 | In A Silent Way                       |
|         4 |        1 | Exile On Main Street                  |
|         5 |        1 | Second Coming                         |
|         6 |        1 | Light Years                           |
+-----------+----------+---------------------------------------+
13 rows in set (0.00 sec)

**** Column types:

INT[(width)] [UNSIGNED] [ZEROFILL]

mysql> CREATE TABLE numbers (my_number INT(4) ZEROFILL);
Query OK, 0 rows affected (0.02 sec)

mysql> INSERT INTO numbers VALUES(3),(33),(333),(3333),(33333),(333333);
Query OK, 6 rows affected (0.00 sec)
Records: 6  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM numbers;
+-----------+
| my_number |
+-----------+
|      0003 |
|      0033 |
|      0333 |
|      3333 |
|     33333 |
|    333333 |
+-----------+
6 rows in set (0.00 sec)

DECIMAL[(width[,decimals])] [UNSIGNED] [ZEROFILL]

DATE
Stores and displays a date in the format YYYY-MM-DD for the
range 1000-01-01 to9999-12-31

mysql> CREATE TABLE testdate (mydate DATE);
Query OK, 0 rows affected (0.00 sec)

mysql> INSERT INTO testdate VALUES ('2007/02/1');
Query OK, 1 row affected (0.00 sec)

mysql> SELECT * FROM testdate;
+------------+
| mydate     |
+------------+
| 2007-02-01 |
+------------+
1 rows in set (0.00 sec)

TIME Stores a time in the format HHH:MM:SS for the range
-838:59:59 to 838:59:59. The values that can be stored are outside 
the range of the 24-hour clock to allow largedifferences between
time values (up to 34 days, 22 hours, 59 minutes, and 59 sec-onds)
to be computed and stored. 

mysql> CREATE TABLE mytime (testtime TIME);
Query OK, 0 rows affected (0.01 sec)

mysql> INSERT INTO mytime VALUES ('-1:1:1'), ('1:1:1'), ('1:23:45'), ('123:4:5'), ('123:45:6'), ('-123:45:6');
Query OK, 6 rows affected (0.01 sec)
Records: 6  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM mytime;
+------------+
| testtime   |
+------------+
| -01:01:01  |
| 01:01:01   |
| 01:23:45   |
| 123:04:05  |
| 123:45:06  |
| -123:45:06 |
+------------+
6 rows in set (0.00 sec)

TIMESTAMP
Stores and displays a date and time pair in the format YYYY-MM-DD HH:MM:SS
for therange 1970-01-01 00:00:00 to sometime in 2037. 

mysql> CREATE TABLE mytime_stmp(id INT NOT NULL, changetime TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP);
Query OK, 0 rows affected (0.01 sec)

mysql> INSERT INTO mytime_stmp VALUES(1,''),(2,'2006-07-16 1:2:3'),(3,NULL);
Query OK, 3 rows affected, 1 warning (0.00 sec)
Records: 3  Duplicates: 0  Warnings: 1

mysql> SELECT * FROM mytime_stmp;
+----+---------------------+
| id | changetime          |
+----+---------------------+
|  1 | 0000-00-00 00:00:00 |
|  2 | 2006-07-16 01:02:03 |
|  3 | 2016-02-10 10:09:01 |
+----+---------------------+
3 rows in set (0.00 sec)

mysql> UPDATE mytime_stmp SET id=4 WHERE id=1;
Query OK, 1 row affected (0.00 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> SELECT * FROM mytime_stmp;
+----+---------------------+
| id | changetime          |
+----+---------------------+
|  4 | 2016-02-10 10:11:06 |
|  2 | 2006-07-16 01:02:03 |
|  3 | 2016-02-10 10:09:01 |
+----+---------------------+
3 rows in set (0.00 sec)

CHAR[(width)]
The most commonly used string type. CHAR stores a fixed-length
string (such as a name, address, or city) of length width.

**** The AUTO_INCREMENT Feature:

mysql> DROP TABLE artist;
Query OK, 0 rows affected (0.02 sec)

mysql> CREATE TABLE artist (artist_id SMALLINT(5) NOT NULL AUTO_INCREMENT, artist_name CHAR(128) DEFAULT NULL, PRIMARY KEY (artist_id));
Query OK, 0 rows affected (0.01 sec)

mysql> INSERT INTO artist VALUES (NULL, "The Shamen");
Query OK, 1 row affected (0.00 sec)

mysql> INSERT INTO artist VALUES (NULL, "Probot");
Query OK, 1 row affected (0.01 sec)

mysql> INSERT INTO artist VALUES (NULL, "The Cult");
Query OK, 1 row affected (0.00 sec)

mysql> SELECT * FROM artist;
+-----------+-------------+
| artist_id | artist_name |
+-----------+-------------+
|         1 | The Shamen  |
|         2 | Probot      |
|         3 | The Cult    |
+-----------+-------------+
3 rows in set (0.00 sec)

**** Adding, Removing and Changing Columns, Primary Key, indexes:

mysql> SHOW COLUMNS FROM played;
+-----------+-----------+------+-----+-------------------+-----------------------------+
| Field     | Type      | Null | Key | Default           | Extra                       |
+-----------+-----------+------+-----+-------------------+-----------------------------+
| artist_id | int(5)    | NO   | PRI | NULL              |                             |
| album_id  | int(4)    | NO   | PRI | NULL              |                             |
| track_id  | int(3)    | NO   | PRI | NULL              |                             |
| played    | timestamp | NO   | PRI | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |
+-----------+-----------+------+-----+-------------------+-----------------------------+
4 rows in set (0.00 sec)

mysql> ALTER TABLE played CHANGE played last_played TIMESTAMP;
Query OK, 0 rows affected (0.06 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> SHOW COLUMNS FROM played;
+-------------+-----------+------+-----+-------------------+-----------------------------+
| Field       | Type      | Null | Key | Default           | Extra                       |
+-------------+-----------+------+-----+-------------------+-----------------------------+
| artist_id   | int(5)    | NO   | PRI | NULL              |                             |
| album_id    | int(4)    | NO   | PRI | NULL              |                             |
| track_id    | int(3)    | NO   | PRI | NULL              |                             |
| last_played | timestamp | NO   | PRI | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |
+-------------+-----------+------+-----+-------------------+-----------------------------+
4 rows in set (0.00 sec)

mysql> ALTER TABLE played MODIFY artist_id SMALLINT(5) DEFAULT NULL;
Query OK, 0 rows affected (0.02 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> ALTER TABLE played MODIFY album_id SMALLINT(4) DEFAULT NULL;
Query OK, 0 rows affected (0.02 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> ALTER TABLE played MODIFY track_id SMALLINT(3) DEFAULT NULL;
Query OK, 0 rows affected (0.02 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> SHOW COLUMNS FROM played;
+-------------+-------------+------+-----+-------------------+-----------------------------+
| Field       | Type        | Null | Key | Default           | Extra                       |
+-------------+-------------+------+-----+-------------------+-----------------------------+
| artist_id   | smallint(5) | NO   | PRI | 0                 |                             |
| album_id    | smallint(4) | NO   | PRI | 0                 |                             |
| track_id    | smallint(3) | NO   | PRI | 0                 |                             |
| last_played | timestamp   | NO   | PRI | CURRENT_TIMESTAMP | on update CURRENT_TIMESTAMP |
+-------------+-------------+------+-----+-------------------+-----------------------------+
4 rows in set (0.00 sec)

mysql> ALTER TABLE artist ADD formed YEAR AFTER artist_id;
Query OK, 3 rows affected (0.05 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql> SHOW COLUMNS FROM artist;
+-------------+-------------+------+-----+---------+----------------+
| Field       | Type        | Null | Key | Default | Extra          |
+-------------+-------------+------+-----+---------+----------------+
| artist_id   | smallint(5) | NO   | PRI | NULL    | auto_increment |
| formed      | year(4)     | YES  |     | NULL    |                |
| artist_name | char(128)   | YES  |     | NULL    |                |
+-------------+-------------+------+-----+---------+----------------+
3 rows in set (0.00 sec)

mysql> CREATE TABLE staff (staff_id INT, name CHAR(40));
Query OK, 0 rows affected (0.01 sec)

mysql> ALTER TABLE staff ADD PRIMARY KEY (staff_id);
Query OK, 0 rows affected (0.09 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> SHOW COLUMNS FROM staff;
+----------+----------+------+-----+---------+-------+
| Field    | Type     | Null | Key | Default | Extra |
+----------+----------+------+-----+---------+-------+
| staff_id | int(11)  | NO   | PRI | 0       |       |
| name     | char(40) | YES  |     | NULL    |       |
+----------+----------+------+-----+---------+-------+
2 rows in set (0.00 sec)

mysql> ALTER TABLE artist ADD INDEX by_name (artist_name(10));
Query OK, 0 rows affected (0.04 sec)
Records: 0  Duplicates: 0  Warnings: 0

mysql> ALTER TABLE played RENAME TO playlist;
Query OK, 0 rows affected (0.01 sec)

**** Advanced quarying:

***** Column aliases

mysql> SELECT artist_name AS artists FROM artist;
+------------+
| artists    |
+------------+
| The Shamen |
| Probot     |
| The Cult   |
+------------+
3 rows in set (0.00 sec)

mysql> SELECT CONCAT(artist_name, " recorded ", album_name) AS recording FROM artist INNER JOIN album USING (artist_id) ORDER BY recording;
+-----------------------------------------------------------+
| recording                                                 |
+-----------------------------------------------------------+
| Probot recorded Let love In                               |
| The Cult recorded In A Silent Way                         |
| The Cult recorded Live Around The World                   |
| The Shamen recorded Brotherhood                           |
| The Shamen recorded Power, Corraption&Lies                |
| The Shamen recorded Retro - John McCready FAN             |
| The Shamen recorded Retro - Miranda Sawyer POP            |
| The Shamen recorded Retro - NewOrder/Bobby Gillespie LIVE |
| The Shamen recorded Substance 1987 (Disc 1)               |
| The Shamen recorded Substance 1987 (DISC 2)               |
+-----------------------------------------------------------+
10 rows in set (0.00 sec)

***** Table aliases:

mysql> SELECT ar.artist_id, al.album_name, ar.artist_name FROM  album AS al INNER JOIN artist AS ar  USING (artist_id) WHERE al.album_name = "Brotherhood";
+-----------+-------------+-------------+
| artist_id | album_name  | artist_name |
+-----------+-------------+-------------+
|         1 | Brotherhood | The Shamen  |
+-----------+-------------+-------------+
1 row in set (0.00 sec)

***** The Distinct clause:

mysql> SELECT DISTINCT artist_name FROM artist INNER JOIN album USING (artist_id);
+-------------+
| artist_name |
+-------------+
| The Shamen  |
| Probot      |
| The Cult    |
+-------------+
3 rows in set (0.00 sec)

mysql> SELECT DISTINCT artist_name, album_name FROM artist INNER JOIN album USING (artist_id);
+-------------+---------------------------------------+
| artist_name | album_name                            |
+-------------+---------------------------------------+
| The Shamen  | Retro - John McCready FAN             |
| The Shamen  | Substance 1987 (DISC 2)               |
| The Shamen  | Retro - Miranda Sawyer POP            |
| The Shamen  | Retro - NewOrder/Bobby Gillespie LIVE |
| The Shamen  | Power, Corraption&Lies                |
| The Shamen  | Substance 1987 (Disc 1)               |
| The Shamen  | Brotherhood                           |
| Probot      | Let love In                           |
| The Cult    | Live Around The World                 |
| The Cult    | In A Silent Way                       |
+-------------+---------------------------------------+
10 rows in set (0.01 sec)

***** The GROUP BY Clause:

mysql> SELECT artist_name, COUNT(artist_name) FROM artist INNER JOIN album USING (artist_id) GROUP BY artist_name;
+-------------+--------------------+
| artist_name | COUNT(artist_name) |
+-------------+--------------------+
| Probot      |                  1 |
| The Cult    |                  2 |
| The Shamen  |                  7 |
+-------------+--------------------+
3 rows in set (0.01 sec)

mysql> SELECT artist_name, album_name, COUNT(*) FROM artist INNER JOIN album USING (artist_id) INNER JOIN track USING (artist_id, album_id)GROUP BY artist.artist_id, album.album_id;
+-------------+---------------------------+----------+
| artist_name | album_name                | COUNT(*) |
+-------------+---------------------------+----------+
| The Shamen  | Retro - John McCready FAN |        2 |
| The Shamen  | Substance 1987 (DISC 2)   |        1 |
| Probot      | Let love In               |        2 |
| The Cult    | Live Around The World     |        3 |
+-------------+---------------------------+----------+
4 rows in set (0.00 sec)

***** The HAVING Clause:

mysql> SELECT artist_name, album_name, COUNT(*) FROM artist INNER JOIN album USING (artist_id) INNER JOIN track USING (artist_id, album_id)GROUP BY artist.artist_id, album.album_id HAVING COUNT(*) > 1;
+-------------+---------------------------+----------+
| artist_name | album_name                | COUNT(*) |
+-------------+---------------------------+----------+
| The Shamen  | Retro - John McCready FAN |        2 |
| Probot      | Let love In               |        2 |
| The Cult    | Live Around The World     |        3 |
+-------------+---------------------------+----------+
3 rows in set (0.00 sec)

mysql> SELECT artist_name, album_name, COUNT(*) FROM artist INNER JOIN album USING (artist_id) INNER JOIN track USING (artist_id, album_id) WHERE artist_name = "The Cult" GROUP BY artist.artist_id, album.album_id;
+-------------+-----------------------+----------+
| artist_name | album_name            | COUNT(*) |
+-------------+-----------------------+----------+
| The Cult    | Live Around The World |        3 |
+-------------+-----------------------+----------+
1 row in set (0.00 sec)

**** Advanced joins:

***** The Inner Join:

mysql> SELECT artist_name, album_name FROM artist INNER JOIN album ON artist.artist_id = album.artist_id;
+-------------+---------------------------------------+
| artist_name | album_name                            |
+-------------+---------------------------------------+
| The Shamen  | Retro - John McCready FAN             |
| The Shamen  | Substance 1987 (DISC 2)               |
| The Shamen  | Retro - Miranda Sawyer POP            |
| The Shamen  | Retro - NewOrder/Bobby Gillespie LIVE |
| The Shamen  | Power, Corraption&Lies                |
| The Shamen  | Substance 1987 (Disc 1)               |
| The Shamen  | Brotherhood                           |
| Probot      | Let love In                           |
| The Cult    | Live Around The World                 |
| The Cult    | In A Silent Way                       |
+-------------+---------------------------------------+
10 rows in set (0.01 sec)

***** The Uion:


*** join selects together

** SQlite Version 3

*** DONE Formatting output
    CLOSED: [2017-06-09 Fri 08:50]
    You can use the following sequence of dot commands to format your
    output:

    #+BEGIN_EXAMPLE
    sqlite>.header on
    sqlite>.mode column
    sqlite>.timer on
    sqlite>
    #+END_EXAMPLE

*** DONE The sqlite_master Table
    CLOSED: [2017-06-09 Fri 08:57]

    The master table holds the key information about your database
    tables and it is called *sqlite_master*. You can see its schema as
    follows:

    #+BEGIN_EXAMPLE
    sqlite>.schema sqlite_master
    #+END_EXAMPLE

    This will produce the following result:

    #+BEGIN_EXAMPLE
    CREATE TABLE sqlite_master (
      type text,
      name text,
      tbl_name text,
      rootpage integer,
      sql text
    );
    #+END_EXAMPLE

*** DONE SQlite ANZLYZE statement:
    CLOSED: [2017-06-09 Fri 10:14]

    #+BEGIN_EXAMPLE
    ANALYZE;
    or
    ANALYZE database_name;
    or
    ANALYZE database_name.table_name;
    #+END_EXAMPLE

*** DONE SQlite ALTER TABLE statement
    CLOSED: [2017-06-10 Sat 08:42]

    The SQLite ALTER TABLE command modifies an existing table without
    performing a full dump and reload of the data. You can rename a table
    using ALTER TABLE statement and additional columns can be added in an
    existing table using ALTER TABLE statement.

    Syntax:

    #+BEGIN_EXAMPLE
    ALTER TABLE database_name.table_name RENAME TO new_table_name;
    #+END_EXAMPLE

    The basic syntax of ALTER TABLE to add a new column in an existing
    table is as follows:

    #+BEGIN_EXAMPLE
    ALTER TABLE database_name.table_name ADD COLUMN column_def...;
    #+END_EXAMPLE

    Consider our COMPANY table has the following records:

    #+BEGIN_EXAMPLE
    ID          NAME        AGE         ADDRESS     SALARY
    ----------  ----------  ----------  ----------  ----------
    1           Paul        32          California  20000.0
    2           Allen       25          Texas       15000.0
    3           Teddy       23          Norway      20000.0
    4           Mark        25          Rich-Mond   65000.0
    5           David       27          Texas       85000.0
    6           Kim         22          South-Hall  45000.0
    7           James       24          Houston     10000.0
    #+END_EXAMPLE

    Rename this table:

    #+BEGIN_EXAMPLE
    ALTER TABLE COMPANY RENAME TO  OLD_COMPANY;
    #+END_EXAMPLE

    Adding a new column in OLD_COMPANY table:

    #+BEGIN_EXAMPLE
    ALTER TABLE OLD_COMPANY ADD COLUMN SEX char(1);
    #+END_EXAMPLE

    Now, COMPANY table is changed and following would be output from
    SELECT statement:

    #+BEGIN_EXAMPLE
    ID          NAME        AGE         ADDRESS     SALARY      SEX
    ----------  ----------  ----------  ----------  ----------  ---
    1           Paul        32          California  20000.0
    2           Allen       25          Texas       15000.0
    3           Teddy       23          Norway      20000.0
    4           Mark        25          Rich-Mond   65000.0
    5           David       27          Texas       85000.0
    6           Kim         22          South-Hall  45000.0
    7           James       24          Houston     10000.0

    #+END_EXAMPLE

*** DONE SQlite - DROP table
    CLOSED: [2017-06-10 Sat 09:13]

    The SQLite DROP TABLE statement is used to remove a table
    definition and all associated data, indexes, triggers, constraints and
    permission specifications for that table.

    Syntax:

    #+BEGIN_EXAMPLE
    DROP TABLE database_name.table_name;
    #+END_EXAMPLE

    Example:

    #+BEGIN_EXAMPLE
    sqlite>.tables
    COMPANY       test.COMPANY
    sqlite>DROP TABLE COMPANY;
    sqlite>
    #+END_EXAMPLE

*** DONE SQlite INSERT query
    CLOSED: [2017-06-12 Mon 10:34]

    SQlite INSERT INTO statement is used to add new rows into a table
    in the database.

    Syntax

    #+BEGIN_EXAMPLE
    INSERT INTO TABLE_NAME [(column1, column2, column3,...columnN)]
    VALUES (value1, value2, value3,...valueN);
    #+END_EXAMPLE

    You may not need to specify the column(s) name in the SQLite query
    if you are adding values for all the columns of the table. However,
    make sure the order of the values is in the same order as the columns
    in the table. The SQLite INSERT INTO syntax would be as follows

    #+BEGIN_EXAMPLE
    INSERT INTO TABLE_NAME VALUES (value1,value2,value3,...valueN);
    #+END_EXAMPLE

    Example

    Consider you already have created COMPANY table in your testDB.db
    as follows

    #+BEGIN_EXAMPLE
    sqlite> CREATE TABLE COMPANY(
       ID INT PRIMARY KEY     NOT NULL,
       NAME           TEXT    NOT NULL,
       AGE            INT     NOT NULL,
       ADDRESS        CHAR(50),
       SALARY         REAL
    );
    #+END_EXAMPLE

    #+BEGIN_EXAMPLE
    INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)
    VALUES (1, 'Paul', 32, 'California', 20000.00 );

    INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)
    VALUES (2, 'Allen', 25, 'Texas', 15000.00 );

    INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)
    VALUES (3, 'Teddy', 23, 'Norway', 20000.00 );

    INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)
    VALUES (4, 'Mark', 25, 'Rich-Mond ', 65000.00 );

    INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)
    VALUES (5, 'David', 27, 'Texas', 85000.00 );

    INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY)
    VALUES (6, 'Kim', 22, 'South-Hall', 45000.00 );

    #+END_EXAMPLE

    You can create a record in COMPANY table using the second syntax
    as follows

    #+BEGIN_EXAMPLE
    INSERT INTO COMPANY VALUES (7, 'James', 24, 'Houston', 10000.00 );
    #+END_EXAMPLE

    Populate One Table Using Another Table

    You can populate data into a table through select statement over
    another table provided another table has a set of fields, which are
    required to populate the first table. Here is the syntax

    #+BEGIN_EXAMPLE
    INSERT INTO first_table_name [(column1, column2, ... columnN)]
       SELECT column1, column2, ...columnN
       FROM second_table_name
       [WHERE condition];

    #+END_EXAMPLE

*** DONE SQlite SELECT statement
    CLOSED: [2017-06-14 Wed 08:18]

    Syntax:

    #+BEGIN_EXAMPLE
    SELECT column1, column2, columnN FROM table_name;
    #+END_EXAMPLE

    Example:

    Consider COMPANY table is having the following records:

    #+BEGIN_EXAMPLE
    ID          NAME        AGE         ADDRESS     SALARY
    ----------  ----------  ----------  ----------  ----------
    1           Paul        32          California  20000.0
    2           Allen       25          Texas       15000.0
    3           Teddy       23          Norway      20000.0
    4           Mark        25          Rich-Mond   65000.0
    5           David       27          Texas       85000.0
    6           Kim         22          South-Hall  45000.0
    7           James       24          Houston     10000.0
    #+END_EXAMPLE

    #+BEGIN_EXAMPLE
    sqlite>.header on
    sqlite>.mode column
    sqlite> SELECT * FROM COMPANY;
    ID          NAME        AGE         ADDRESS     SALARY
    ----------  ----------  ----------  ----------  ----------
    1           Paul        32          California  20000.0
    2           Allen       25          Texas       15000.0
    3           Teddy       23          Norway      20000.0
    4           Mark        25          Rich-Mond   65000.0
    5           David       27          Texas       85000.0
    6           Kim         22          South-Hall  45000.0
    7           James       24          Houston     10000.0
    #+END_EXAMPLE

    If you want to fetch only selected fields of COMPANY table, then
    use the following query:

    #+BEGIN_EXAMPLE
    sqlite> SELECT ID, NAME, SALARY FROM COMPANY;
    #+END_EXAMPLE

    Setting output column width:

    #+BEGIN_EXAMPLE
    sqlite>.width 10, 20, 10
    sqlite>SELECT * FROM COMPANY;
    #+END_EXAMPLE


    Org-mode SQlite source code block

    #+BEGIN_SRC sqlite :db test-sqlite.db
    drop table if exists greeting;
    create table greeting(one varchar(10), two varchar(10));
    insert into greeting values('Hello', 'world!');
    select * from greeting;
    #+END_SRC

    #+RESULTS:
    | Hello | world! |

    Schema information

    Because all the *dot commands* are available at SQlite prompt
    only, so while doing your programming with SQLite, you will use
    the following statement to list down all the tables created in
    your database using the following SELECT statement with
    *sqlite_master* table:

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select tbl_name from sqlite_master where type = 'table';
    #+END_SRC

    #+RESULTS:
    : greeting

    You can list down complete information about greeting table as
    follows:

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select sql from sqlite_master where type = 'table' and tbl_name = 'greeting';
    #+END_SRC

    #+RESULTS:
    : CREATE TABLE greeting(one varchar(10), two varchar(10))

*** Operators in SQlite

    An operator is a reserved word or a character used primarily in an
    SQlite statement's WHERE clause to perform operation(s), such as
    comparisons and arithmetic operations.

    Operators are used to specify conditions in an SQlite statement
    and to serve as conjunctions for multiple conditions in a
    statement.

    - Arithmetic operators
    - Comparison operator
    - Logical operators
    - Bitwise operators

    #+BEGIN_SRC sqlite :db test-sqlite.db
    create table company(id int primary key not null, name text not null,
    age int not null, address char(50), salary real);
    insert into company values('1', 'Paul', '32', 'California', '20000.0');
    insert into company values('2', 'Allen', '25', 'Texas', '15000.0');
    insert into company values('3', 'Teddy', '23', 'Norway', '20000.0');
    insert into company values('4', 'Mark', '25', 'Rich-Mond', '65000.0');
    insert into company values('5', 'David', '27', 'Texas', '85000.0');
    insert into company values('6', 'Kim', '22', 'South-Hall', '45000.0');
    insert into company values('7', 'James', '24', 'Houston', '10000.0');
    select * from company;
    #+END_SRC

    #+RESULTS:
    | 1 | Paul  | 32 | California | 20000.0 |
    | 2 | Allen | 25 | Texas      | 15000.0 |
    | 3 | Teddy | 23 | Norway     | 20000.0 |
    | 4 | Mark  | 25 | Rich-Mond  | 65000.0 |
    | 5 | David | 27 | Texas      | 85000.0 |
    | 6 | Kim   | 22 | South-Hall | 45000.0 |
    | 7 | James | 24 | Houston    | 10000.0 |

*** DONE SQlite expressions
    CLOSED: [2017-06-15 Thu 08:59]

    Boolean expressions

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select * from company where salary = 10000;
    #+END_SRC

    #+RESULTS:
    | 7 | James | 24 | Houston | 10000.0 |


    Numeric expression

    There are several built-in functions such as avg(), sum(),
    count(), etc., to perform what is known as aggregate data calculations
    against a table or a specific table column.

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select count(*) as "records" from company;
    #+END_SRC

    #+RESULTS:
    : 7

    SQlite date expressions

    Date expressions return current system date and the time values
    and these expressions will be used in various data manipulations.

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select current_timestamp;
    #+END_SRC

    #+RESULTS:
    : 2017-06-15 05:56:30

*** DONE SQlite WHERE clause
    CLOSED: [2017-06-16 Fri 08:41]

    SQlite WHERE clause is used to specify a condition while fetching
    the data from one table or multiple tables.

    Syntax

    #+BEGIN_EXAMPLE
    SELECT column1, column2, columnN
    FROM table_name
    WHERE [condition]
    #+END_EXAMPLE

    Examples

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select * from company where age >= 25 and salary >= 65000;
    #+END_SRC

    #+RESULTS:
    | 4 | Mark  | 25 | Rich-Mond | 65000.0 |
    | 5 | David | 27 | Texas     | 85000.0 |


    #+BEGIN_SRC sqlite :db test-sqlite.db
    select * from company where age >= 25 or salary >= 65000;
    #+END_SRC

    #+RESULTS:
    | 1 | Paul  | 32 | California | 20000.0 |
    | 2 | Allen | 25 | Texas      | 15000.0 |
    | 4 | Mark  | 25 | Rich-Mond  | 65000.0 |
    | 5 | David | 27 | Texas      | 85000.0 |

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select * from company where name glob 'Ki*';
    #+END_SRC

    #+RESULTS:
    | 6 | Kim | 22 | South-Hall | 45000.0 |

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select * from company where age in ( 25, 27 );
    #+END_SRC

    #+RESULTS:
    | 2 | Allen | 25 | Texas     | 15000.0 |
    | 4 | Mark  | 25 | Rich-Mond | 65000.0 |
    | 5 | David | 27 | Texas     | 85000.0 |

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select * from company where age not in ( 25, 27 );
    #+END_SRC

    #+RESULTS:
    | 1 | Paul  | 32 | California | 20000.0 |
    | 3 | Teddy | 23 | Norway     | 20000.0 |
    | 6 | Kim   | 22 | South-Hall | 45000.0 |
    | 7 | James | 24 | Houston    | 10000.0 |

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select * from company where age between 25 and 27;    
    #+END_SRC

    #+RESULTS:
    | 2 | Allen | 25 | Texas     | 15000.0 |
    | 4 | Mark  | 25 | Rich-Mond | 65000.0 |
    | 5 | David | 27 | Texas     | 85000.0 |

    SELECT statement with SQL sub-query

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select age from company
    where exists (select age from company where salary > 65000);
    #+END_SRC

    #+RESULTS:
    | 32 |
    | 25 |
    | 23 |
    | 25 |
    | 27 |
    | 22 |
    | 24 |

    Following SELECT statement makes use of SQL sub-query where
    sub-query finds all the records with AGE field having SALARY > 65000
    and later WHERE clause is being used along with > operator to list
    down all the records where AGE from the outside query is greater than
    the age in the result returned by the sub-query.

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select * from company
    where age > (select age from company where salary > 65000);
    #+END_SRC

    #+RESULTS:
    | 1 | Paul | 32 | California | 20000.0 |

*** DONE SQlite - AND & OR operators
    CLOSED: [2017-06-16 Fri 08:48]
    SQlite AND & OR operators are used to compile multiple conditions
    to narrow down the selected data in an SQlite statement.

    The AND operator allows the existence of multiple conditions in a
    SQlite statement's WHERE clause.

    #+BEGIN_EXAMPLE
    SELECT column1, column2, columnN
    FROM table_name
    WHERE [condition1 AND [condition2]...AND [conditionN];
    #+END_EXAMPLE

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select * from company where age >= 25 and salary >= 65000;
    #+END_SRC

    #+RESULTS:
    | 4 | Mark  | 25 | Rich-Mond | 65000.0 |
    | 5 | David | 27 | Texas     | 85000.0 |

    The OR operator

    Syntax

    #+BEGIN_EXAMPLE
    SELECT column1, column2, columnN
    FROM table_name
    WHERE [condition1] OR [condition2]...OR [conditionN]
    #+END_EXAMPLE

    Example

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select * from company where age >= 25 or salary >= 65000;
    #+END_SRC

    #+RESULTS:
    | 1 | Paul  | 32 | California | 20000.0 |
    | 2 | Allen | 25 | Texas      | 15000.0 |
    | 4 | Mark  | 25 | Rich-Mond  | 65000.0 |
    | 5 | David | 27 | Texas      | 85000.0 |

*** DONE SQlite - UPDATE Query
    CLOSED: [2017-06-16 Fri 09:18]

    The SQLite UPDATE Query is used to modify the existing records in
    a table. You can use WHERE clause with UPDATE query to update selected
    rows, otherwise all the rows would be updated.

    Syntax

    #+BEGIN_EXAMPLE
    UPDATE table_name
    SET column1 = value1, column2 = value2....., columnN = valueN
    WHERE [consition];
    #+END_EXAMPLE

    #+BEGIN_SRC sqlite :db test-sqlite.db
    update company set address = 'Texas' where id = 6;
    select * from company;
    #+END_SRC

    #+RESULTS:
    | 1 | Paul  | 32 | California | 20000.0 |
    | 2 | Allen | 25 | Texas      | 15000.0 |
    | 3 | Teddy | 23 | Norway     | 20000.0 |
    | 4 | Mark  | 25 | Rich-Mond  | 65000.0 |
    | 5 | David | 27 | Texas      | 85000.0 |
    | 6 | Kim   | 22 | Texas      | 45000.0 |
    | 7 | James | 24 | Houston    | 10000.0 |

    If you want to modify all ADDRESS and SALARY column values in
    COMPANY table you do not need to use WHERE clause

    #+BEGIN_SRC sqlite :db test-sqlite.db
    update company set address = 'Texas', salary = 20000.00;
    select * from company;
    #+END_SRC

    #+RESULTS:
    | 1 | Paul  | 32 | Texas | 20000.0 |
    | 2 | Allen | 25 | Texas | 20000.0 |
    | 3 | Teddy | 23 | Texas | 20000.0 |
    | 4 | Mark  | 25 | Texas | 20000.0 |
    | 5 | David | 27 | Texas | 20000.0 |
    | 6 | Kim   | 22 | Texas | 20000.0 |
    | 7 | James | 24 | Texas | 20000.0 |

*** DONE SQlite - ORDER BY Clause
    CLOSED: [2017-06-20 Tue 08:30]

    Syntax

    #+BEGIN_EXAMPLE
    SELECT column-list
    FROM table_name
    [WHERE condition]
    [ORDER BY column1, column2, ..columnN] [ASC | DESC];
    #+END_EXAMPLE

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select * from company order by salary asc;
    #+END_SRC

    #+RESULTS:
    | 7 | James | 24 | Houston    | 10000.0 |
    | 2 | Allen | 25 | Texas      | 15000.0 |
    | 1 | Paul  | 32 | California | 20000.0 |
    | 3 | Teddy | 23 | Norway     | 20000.0 |
    | 6 | Kim   | 22 | South-Hall | 45000.0 |
    | 4 | Mark  | 25 | Rich-Mond  | 65000.0 |
    | 5 | David | 27 | Texas      | 85000.0 |


    #+BEGIN_SRC sqlite :db test-sqlite.db
    select * from company order by name, salary asc;
    #+END_SRC

    #+RESULTS:
    | 2 | Allen | 25 | Texas      | 15000.0 |
    | 5 | David | 27 | Texas      | 85000.0 |
    | 7 | James | 24 | Houston    | 10000.0 |
    | 6 | Kim   | 22 | South-Hall | 45000.0 |
    | 4 | Mark  | 25 | Rich-Mond  | 65000.0 |
    | 1 | Paul  | 32 | California | 20000.0 |
    | 3 | Teddy | 23 | Norway     | 20000.0 |


    #+BEGIN_SRC sqlite :db test-sqlite.db
    select * from company order by name desc;
    #+END_SRC

    #+RESULTS:
    | 3 | Teddy | 23 | Norway     | 20000.0 |
    | 1 | Paul  | 32 | California | 20000.0 |
    | 4 | Mark  | 25 | Rich-Mond  | 65000.0 |
    | 6 | Kim   | 22 | South-Hall | 45000.0 |
    | 7 | James | 24 | Houston    | 10000.0 |
    | 5 | David | 27 | Texas      | 85000.0 |
    | 2 | Allen | 25 | Texas      | 15000.0 |

*** DONE SQlite - GROUP BY Clause
    CLOSED: [2017-06-20 Tue 09:12]

    Syntax

    #+BEGIN_EXAMPLE
    SELECT column-list
    FROM table_name
    WHERE [ conditions ]
    GROUP BY column1, column2 ....columnN
    ORDER BY column1, column2 ....columnN
    #+END_EXAMPLE

    Example

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select name, sum(salary) from company group by name;
    #+END_SRC

    #+RESULTS:
    | Allen | 15000.0 |
    | David | 85000.0 |
    | James | 10000.0 |
    | Kim   | 45000.0 |
    | Mark  | 65000.0 |
    | Paul  | 20000.0 |
    | Teddy | 20000.0 |

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select * from company;
    #+END_SRC

    Now, our table has the following records with duplicate names.

    #+RESULTS:
    |  1 | Paul  | 32 | California | 20000.0 |
    |  2 | Allen | 25 | Texas      | 15000.0 |
    |  3 | Teddy | 23 | Norway     | 20000.0 |
    |  4 | Mark  | 25 | Rich-Mond  | 65000.0 |
    |  5 | David | 27 | Texas      | 85000.0 |
    |  6 | Kim   | 22 | South-Hall | 45000.0 |
    |  7 | James | 24 | Houston    | 10000.0 |
    | 10 | James | 45 | Texas      |  5000.0 |
    |  8 | Paul  | 24 | Houston    | 20000.0 |
    |  9 | James | 44 | Norway     |  5000.0 |

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select name, sum(salary) from company group by name order by name;
    #+END_SRC

    #+RESULTS:
    | Allen | 15000.0 |
    | David | 85000.0 |
    | James | 20000.0 |
    | Kim   | 45000.0 |
    | Mark  | 65000.0 |
    | Paul  | 40000.0 |
    | Teddy | 20000.0 |

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select name, sum(salary) from company group by name order by name desc;
    #+END_SRC

    #+RESULTS:
    | Teddy | 20000.0 |
    | Paul  | 40000.0 |
    | Mark  | 65000.0 |
    | Kim   | 45000.0 |
    | James | 20000.0 |
    | David | 85000.0 |
    | Allen | 15000.0 |

*** DONE SQlite - HAVING Clause
    CLOSED: [2017-06-21 Wed 09:54]
    The HAVING clause enables you to specify conditions that filter
    which group results appear in the final results.

    Syntax

    #+BEGIN_EXAMPLE
    SELECT column1, column2
    FROM table1, table2
    WHERE [ conditions ]
    GROUP BY column1, column2
    HAVING [ conditions ]
    ORDER BY column1, column2
    #+END_EXAMPLE

    Following is the example, which would display record for which
    name count is less than 2:

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select * from company group by name having count(name) < 2;
    #+END_SRC

    #+RESULTS:
    | 2 | Allen | 25 | Texas      | 15000.0 |
    | 5 | David | 27 | Texas      | 85000.0 |
    | 6 | Kim   | 22 | South-Hall | 45000.0 |
    | 4 | Mark  | 25 | Rich-Mond  | 65000.0 |
    | 3 | Teddy | 23 | Norway     | 20000.0 |

    Following is the example, which would display record for which
    name count is greater than 2:

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select * from company group by name having count(name) > 2;
    #+END_SRC

    #+RESULTS:
    | 9 | James | 44 | Norway | 5000.0 |

*** DONE SQlite - DISTINCT keyword
    CLOSED: [2017-06-22 Thu 07:43]

    SQlite DISTINCT keyword is used in conjunction with SELECT
    statement to eliminate all the duplicate record and fetching only
    the unique records.

    Syntax

    #+BEGIN_EXAMPLE
    SELECT DISTINCT column1, column2,....columnN
    FROM table_name
    WHERE [condition]
    #+END_EXAMPLE

    First, let us see how the following SELECT query returns duplicate
    salary records.

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select name from company;
    #+END_SRC

    #+RESULTS:
    | Paul  |
    | Allen |
    | Teddy |
    | Mark  |
    | David |
    | Kim   |
    | James |
    | James |
    | Paul  |
    | James |

    Now, let us use DISTINCT keyword with the above SELECT query and
    see the result.

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select distinct name from company;
    #+END_SRC

    #+RESULTS:
    | Paul  |
    | Allen |
    | Teddy |
    | Mark  |
    | David |
    | Kim   |
    | James |

*** SQlite - Python

    | API                                                    | Description      |
    |--------------------------------------------------------+------------------|
    | sqlite3.connect(database [, timeout, other arguments]) | opens a          |
    |                                                        | connection       |
    |                                                        | to the SQlite    |
    |                                                        | database         |
    |                                                        | file database    |
    |--------------------------------------------------------+------------------|
    | connection.cursor([cursorClass])                       | This             |
    |                                                        | routine          |
    |                                                        | creates a        |
    |                                                        | cursor           |
    |                                                        | which will be    |
    |                                                        | used             |
    |                                                        | throughout of    |
    |                                                        | you database     |
    |                                                        | programming      |
    |                                                        | with Python.     |
    |--------------------------------------------------------+------------------|
    | cursor.execute(sql [, optional parameters])            | This             |
    |                                                        | routine          |
    |                                                        | executes an      |
    |                                                        | SQL statement    |
    |--------------------------------------------------------+------------------|
    | connection.execute(sql [, optional parameters])        | This routine     |
    |                                                        | is a shortcut    |
    |                                                        | of the above     |
    |                                                        | execute          |
    |                                                        | method           |
    |                                                        | provided by      |
    |                                                        | cursor object    |
    |                                                        | and it           |
    |                                                        | creates an       |
    |                                                        | intermediate     |
    |                                                        | cursor object    |
    |                                                        | by calling       |
    |                                                        | the cursor       |
    |                                                        | method           |
    |--------------------------------------------------------+------------------|
    | cursor.executemany(sql, seq_of_parameters)             | This routine     |
    |                                                        | executes an      |
    |                                                        | SQL command      |
    |                                                        | against all      |
    |                                                        | parameter        |
    |                                                        | sequences or     |
    |                                                        | mapping found    |
    |                                                        | in the           |
    |                                                        | sequence sql.    |
    |--------------------------------------------------------+------------------|
    | connection.executescript(sql_script)                   | this routine     |
    |                                                        | executes         |
    |                                                        | multiple         |
    |                                                        | SQL statement    |
    |                                                        | at once          |
    |                                                        | provided in      |
    |                                                        | the form of      |
    |--------------------------------------------------------+------------------|
    | connection.total_changes()                             | This routine     |
    |                                                        | returns the      |
    |                                                        | total number     |
    |                                                        | of database      |
    |                                                        | rows that        |
    |                                                        | have been        |
    |                                                        | modified,        |
    |                                                        | inserted,        |
    |                                                        | or deleted       |
    |                                                        | since the        |
    |                                                        | database         |
    |                                                        | connection       |
    |                                                        | was opened.      |
    |--------------------------------------------------------+------------------|
    | connection.commit()                                    | This method      |
    |                                                        | commits the      |
    |                                                        | current          |
    |                                                        | transaction.     |
    |--------------------------------------------------------+------------------|
    | connection.rollback()                                  | This method      |
    |                                                        | roll back        |
    |                                                        | any changes      |
    |                                                        | to the           |
    |                                                        | database         |
    |                                                        | since the        |
    |                                                        | last call to     |
    |                                                        | commit()         |
    |--------------------------------------------------------+------------------|
    | connection.close()                                     | This method      |
    |                                                        | closes the       |
    |                                                        | database         |
    |                                                        | connection.      |
    |--------------------------------------------------------+------------------|
    | cursor.fetchone()                                      | This method      |
    |                                                        | fetches the      |
    |                                                        | next row of a    |
    |                                                        | query result     |
    |                                                        | set, returning   |
    |                                                        | a single         |
    |                                                        | sequences, or    |
    |                                                        | None when no     |
    |                                                        | more data is     |
    |                                                        | available        |
    |--------------------------------------------------------+------------------|
    | cursor.fetchmany([size=cursor.arraysize])              | This routine     |
    |                                                        | fetches the      |
    |                                                        | next set of a    |
    |                                                        | query result,    |
    |                                                        | returning a      |
    |                                                        | list.            |
    |--------------------------------------------------------+------------------|
    | cursor.fetchall()                                      | This routine     |
    |                                                        | fetches all      |
    |                                                        | rows of a        |
    |                                                        | query result,    |
    |                                                        | returning a list |
    |--------------------------------------------------------+------------------|

*** Connection to database

    #+BEGIN_SRC python :results output :session db
    import sqlite3

    conn = sqlite3.connect("mydatabase.db")
    print("Opened database sucessfully")
    #+END_SRC

    #+RESULTS:
    : Python 3.4.3 (default, Nov 17 2016, 01:11:57) 
    : [GCC 4.8.4] on linux
    : Type "help", "copyright", "credits" or "license" for more information.
    : python.el: native completion setup loaded
    : >>> >>> Opened database sucessfully

*** Create a table

    #+BEGIN_SRC python :results output :session db
    conn.execute('''CREATE TABLE COMPANY
             (ID INT PRIMARY KEY   NOT NULL,
	     NAME           TEXT  NOT NULL,
	     AGE            INT   NOT NULL,
	     ADDRESS        CHAR(50),
	     SALARY         REAL);''')
    print("Table created successfully");
    conn.close()
    #+END_SRC

    #+RESULTS:
    : Table created successfully

*** INSERT Operation

    #+BEGIN_SRC python :results output :session db
    conn.execute("INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) \
      VALUES (1, 'Paul', 32, 'California', 20000.00 )");

    conn.execute("INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) \
      VALUES (2, 'Allen', 25, 'Texas', 15000.00 )");

    conn.execute("INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) \
      VALUES (3, 'Teddy', 23, 'Norway', 20000.00 )");

    conn.execute("INSERT INTO COMPANY (ID,NAME,AGE,ADDRESS,SALARY) \
      VALUES (4, 'Mark', 25, 'Rich-Mond ', 65000.00 )");

    conn.commit()
    print("Records created successfully")
    conn.close()
    #+END_SRC

    #+RESULTS:
    : 
    : <sqlite3.Cursor object at 0xb74dcce0>
    : >>> ... <sqlite3.Cursor object at 0xb72a91a0>
    : >>> ... <sqlite3.Cursor object at 0xb74dcce0>
    : >>> ... <sqlite3.Cursor object at 0xb72a91a0>
    : >>> >>> Records created successfully

*** SELECT operations

    #+BEGIN_SRC python :results output :session db
    import sqlite3

    conn = sqlite3.connect('mydatabase.db')
    print "Opened database successfully";

    cursor = conn.execute("SELECT id, name, address, salary from COMPANY")
    for row in cursor:
       print "ID = ", row[0]
       print "NAME = ", row[1]
       print "ADDRESS = ", row[2]
       print "SALARY = ", row[3], "\n"

    print "Operation done successfully";
    conn.close()

    #+END_SRC

    #+RESULTS:
    #+begin_example
    Python 2.7.6 (default, Oct 26 2016, 20:32:47)
    [GCC 4.8.4] on linux2
    Type "help", "copyright", "credits" or "license" for more information.
    python.el: native completion setup loaded
    >>> Opened database successfully
    >>> >>> ... ... ... ... ... ID =  1
    NAME =  Paul
    ADDRESS =  California
    SALARY =  20000.0

    ID =  2
    NAME =  Allen
    ADDRESS =  Texas
    SALARY =  15000.0

    ID =  3
    NAME =  Teddy
    ADDRESS =  Norway
    SALARY =  20000.0

    ID =  4
    NAME =  Mark
    ADDRESS =  Rich-Mond
    SALARY =  65000.0
    Operation done successfully
#+end_example

*** UPDATE operation

    Following Python code shows how to use UPDATE statement to update
    any record and then fetch and display the updated records from the
    COMPANY table.

    #+BEGIN_SRC python :results output :session db
    conn.execute("UPDATE COMPANY set SALARY = 25000.00 where ID = 1")
    conn.commit
    print "Total number of rows updated :", conn.total_changes

    cursor = conn.execute("SELECT id, name, address, salary from COMPANY")
    for row in cursor:
       print "ID = ", row[0]
       print "NAME = ", row[1]
       print "ADDRESS = ", row[2]
       print "SALARY = ", row[3], "\n"

    print "Operation done successfully"

    #+END_SRC

    #+RESULTS:
    #+begin_example
    <sqlite3.Cursor object at 0xb72852a0>
    <built-in method commit of sqlite3.Connection object at 0xb728c130>
    Total number of rows updated : 4
    >>> >>> ... ... ... ... ... ID =  1
    NAME =  Paul
    ADDRESS =  California
    SALARY =  25000.0

    ID =  2
    NAME =  Allen
    ADDRESS =  Texas
    SALARY =  15000.0

    ID =  3
    NAME =  Teddy
    ADDRESS =  Norway
    SALARY =  20000.0

    ID =  4
    NAME =  Mark
    ADDRESS =  Rich-Mond
    SALARY =  65000.0
    Operation done successfully
#+end_example

**** Storage Classes and Datatypes
Each value stored in an SQLite database has one of the following storage classes:

NULL. The value is a NULL value.

INTEGER. The value is a signed integer, stored in 1, 2, 3, 4, 6, or 8 bytes depending on the magnitude of the value.

REAL. The value is a floating point value, stored as an 8-byte IEEE floating number.

TEXT. The value is a text string, stored using the database enciding (UTF-8, UTF-16BE or UTF-16LE).

BLOB. The value is a blob of data, stored exactly as it was input.

Note that a storage class is slightly more general than a datatype. The INTEGER starage class, for example, includes 6 different integer datatypes of different lengths. 

*****  Boolean Datatype

SQLite does not have a separate Boolean storage class. Instead, Boolean values are stored as integers 0 (false) and 1 (true).

***** Date and Time Datatype

SQLite does not have a storage class set aside for storing dates and/or times. Instead, the built-in Date And Time Functions of SQLite are capable of storing dates and times as TEXT, REAL, or INTEGER values:

TEXT as ISO8601 strings ("YYYY-MM-DD HH:MM:SS.SSS").
REAL as Julian day numbers, the number of days since noon in Greenwich on November 24, 4714 B.C. according to the proleptic Gregorian calendar.
INTEGER as Unix Time, the number of seconds since 1970-01-01 00:00:00 UTC

**** Type Affinity.

Each column in an SQLite 3 database is assigned one of the following type affinities:


    TEXT
    NUMERIC
    INTEGER
    REAL
    BLOB

(The "BLOB" type affinity used to be called "NONE". But that term was easy to confuse with "no affinity" and so it was renamed.)

A column with TEXT affinity stores all data using storage classes NULL, TEXT or BLOB. If numerical data is inserted into a column with TEXT affinity it is cinverted into text form before being stored.

A column with NUMERIC affinity may contain values using all five storage classes. When text data is inserted intoa NUMERIC column, the storage class of the text ois converted to INTEGER or REAL.

A column that uses INTEGER affinity behaves the same as a column with NUMERIC affinity.

A column with REAL affinity behaves like a column with NUMERIC affinity except that it forces integer values into floating point representation.

A column with affinity BLOB does not prefer one storage class over another and no attempt is made to coerce data from one storage class into another.

**** Determination of COLUMN Affinity

The affinity of a column is determined by the declared type of the column, according to the following rules in the order shown:

1. If the declared type contains the string "INT" then it is assigned INTEGER affinity.

2. If the declared type of the column contains any of the string "CHAR", "CLOB", or "TEXT" then that column has TEXT affinity. Notice that the type VARCHAR contains the string "CHAR" and is thus assigned TEXT affinity.

3. If the declared type for a column contains the string "BLOB" or if no types is specified then the column has affinity BLOB.

4. If the declared type for a column contains any of the string "REAL", "FLOA", or "DOUB" then the column has REAL affinnity.

5. Otherwise, the affinity is NUMERIC.

Note that the order of the rules for determining column affinity is important. A column whose declared type is "CHARINT" will match both rules 1 and 2 but the first rule takes precedence and so the column affinity will be INTEGER.

**** Affinity Name Examples

| Example Typenames from the CREATE TABLE Statement or CAST Expression | Resulting Affinity |
|----------------------------------------------------------------------+--------------------|
| INT                                                                  | INTEGER            |
| INTEGER                                                              |                    |
| TINYINT                                                              |                    |
| SMALLINT                                                             |                    |
| MEDIUMINT                                                            |                    |
| BIGINT                                                               |                    |
| UNSIGNED BIG INT                                                     |                    |
| INT2                                                                 |                    |
| INT8                                                                 |                    |
|----------------------------------------------------------------------+--------------------|
| CHARACTER(20)                                                        | TEXT               |
| VARCHAR(255)                                                         |                    |
| VARYING CHARACTER(255)                                               |                    |
| NCHAR(55)                                                            |                    |
| NATIVE CHARACTER(70)                                                 |                    |
| NVARCHAR(100)                                                        |                    |
| TEXT                                                                 |                    |
| CLOB                                                                 |                    |
|----------------------------------------------------------------------+--------------------|
| BLOB                                                                 |                    |
| no datatype specified                                                | BLOB               |
|                                                                      |                    |
|----------------------------------------------------------------------+--------------------|
| REAL                                                                 | REAL               |
| DOUBLE                                                               |                    |
| DOUBLE PRECISION                                                     |                    |
| FLOAT                                                                |                    |
|----------------------------------------------------------------------+--------------------|
| NUMERIC                                                              | NUMERIC            |
| DECIMAL(10,5)                                                        |                    |
| BOOLEAN                                                              |                    |
| DATE                                                                 |                    |
| DATETIME                                                             |                    |
|                                                                      |                    |
|----------------------------------------------------------------------+--------------------|

**** DONE Foreign key constrains
     CLOSED: [2017-06-07 Wed 09:39]
     SQL foreign key constraints are used to enforce "exists"
     relationships between tables. For example, consider a database schema
     created using the following SQL commands:

     #+BEGIN_EXAMPLE
     CREATE TABLE artist(
       artistid    INTEGER PRIMARY KEY,
       artistname  TEXT
     );
     CREATE TABLE track(
       trackid     INTEGER,
       trackname   TEXT,
       trackartist INTEGER     -- Must map to an artist.artistid!
     );

     #+END_EXAMPLE

     The applications using this database are entitled to assume that
     for each row in the track table there exists a corresponding row
     in the artist table. After all, the comment in the declaration
     says so. Unfortunately, if a user edits the database using an
     external tool or if there is a bug in an application, rows might
     be inserted into the track table that do not correspond to any
     row in the artist table. Or rows might be deleted from the artist
     table, leaving orphaned rows in the track table that do not
     correspond to any of the remaining rows in artist. This might
     cause the application or applications to malfunction later on, or
     at least make coding the application more difficult.

     #+BEGIN_EXAMPLE
     CREATE TABLE track(
       trackid     INTEGER,
       trackname   TEXT,
       trackartist INTEGER,
       FOREIGN KEY(trackartist) REFERENCES artist(artistid)
     );
     #+END_EXAMPLE

     This way, the constraint is enforced by SQLite. Attempting to
     insert a row into the track table that does not correspond to any row
     in the artist table will fail, as will attempting to delete a row from
     the artist table when there exist dependent rows in the track table
     There is one exception: if the foreign key column in the track table
     is NULL, then no corresponding entry in the artist table is required.
     Expressed in SQL, this means that for every row in the track table,
     the following expression evaluates to true:

     #+BEGIN_EXAMPLE
     trackartist IS NULL OR EXISTS(SELECT 1 FROM artist WHERE artistid=trackartist)
     #+END_EXAMPLE

     #+BEGIN_EXAMPLE
     
*** DONE SQlite- DELETE query
    CLOSED: [2017-06-17 Sat 09:37]

    Syntax

    #+BEGIN_EXAMPLE
    DELETE FROM table_name
    WHERE [condition];
    #+END_EXAMPLE

    Example

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select * from company;
    #+END_SRC

    #+RESULTS:
    | 1 | Paul  | 32 | Texas | 20000.0 |
    | 2 | Allen | 25 | Texas | 20000.0 |
    | 3 | Teddy | 23 | Texas | 20000.0 |
    | 4 | Mark  | 25 | Texas | 20000.0 |
    | 5 | David | 27 | Texas | 20000.0 |
    | 6 | Kim   | 22 | Texas | 20000.0 |
    | 7 | James | 24 | Texas | 20000.0 |


    #+BEGIN_SRC sqlite :db test-sqlite.db
    delete from company where id = 7;
    select * from company;
    #+END_SRC

    #+RESULTS:
    | 1 | Paul  | 32 | Texas | 20000.0 |
    | 2 | Allen | 25 | Texas | 20000.0 |
    | 3 | Teddy | 23 | Texas | 20000.0 |
    | 4 | Mark  | 25 | Texas | 20000.0 |
    | 5 | David | 27 | Texas | 20000.0 |
    | 6 | Kim   | 22 | Texas | 20000.0 |

*** SQlite - LIKE Clause

    SQLite LIKE operator is used to match text values against a pattern using
    wildcards. If the search expression can be matched to the pattern
    expression, the LIKE operator will return true, which is 1. There are two
    wildcards used in conjunction with the LIKE operator −

    - The percent sign (%)
    - The underscore (_)

    The percent sign represents zero, one, or multiple numbers or
    characters. The underscore represents a single number or
    character. These symbols can be used in combinations.

    Syntax

    #+BEGIN_EXAMPLE
    SELECT FROM table_name
    WHERE column LIKE 'XXXX%'
    or
    SELECT FROM table_name
    WHERE column LIKE '%XXXX%'
    or
    SELECT FROM table_name
    WHERE column LIKE 'XXXX_'
    or
    SELECT FROM table_name
    WHERE column LIKE '_XXXX'
    or
    SELECT FROM table_name
    WHERE column LIKE '_XXXX_'
    #+END_EXAMPLE

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select * from company where address like 'T%';
    #+END_SRC

    #+RESULTS:
    | 1 | Paul  | 32 | Texas | 20000.0 |
    | 2 | Allen | 25 | Texas | 20000.0 |
    | 3 | Teddy | 23 | Texas | 20000.0 |
    | 4 | Mark  | 25 | Texas | 20000.0 |
    | 5 | David | 27 | Texas | 20000.0 |
    | 6 | Kim   | 22 | Texas | 20000.0 |

*** DONE SQlite - GLOB clause
    CLOSED: [2017-06-19 Mon 09:32]

    SQLite GLOB operator is used to match only text values against a
    pattern using wildcards. If the search expression can be matched to
    the pattern expression, the GLOB operator will return true, which
    is 1. Unlike LIKE operator, GLOB is case sensitive and it follows
    syntax of UNIX for specifying THE following wildcards.

    - the asterisk sign (*)
    - the question mark (?)

    The asterisk sign (*) represent zero or multiple numbers or
    characters. The question mark (?) represent a single number or
    character.

    Syntax

    #+BEGIN_EXAMPLE
    SELECT FROM table_name
    WHERE column GLOB 'XXXX*'
    or 
    SELECT FROM table_name
    WHERE column GLOB '*XXXX*'
    or
    SELECT FROM table_name
    WHERE column GLOB 'XXXX?'
    or
    SELECT FROM table_name
    WHERE column GLOB '?XXXX'
    or
    SELECT FROM table_name
    WHERE column GLOB '?XXXX?'
    or
    SELECT FROM table_name
    WHERE column GLOB '????'
    #+END_EXAMPLE

    Example

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select * from company where age glob '2*';
    #+END_SRC

    #+RESULTS:
    | 2 | Allen | 25 | Texas      | 20000.0 |
    | 3 | Teddy | 23 | Texas      | 20000.0 |
    | 4 | Mark  | 25 | Rich-Mond  | 20000.0 |
    | 5 | David | 27 | Texas      | 20000.0 |
    | 6 | Kim   | 22 | South-Hill | 20000.0 |
    | 7 | James | 24 | Houston    | 10000.0 |

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select * from company where address glob '*-*';
    #+END_SRC

    #+RESULTS:
    | 4 | Mark | 25 | Rich-Mond  | 20000.0 |
    | 6 | Kim  | 22 | South-Hill | 20000.0 |

*** DONE SQlite - LIMIT clause
    CLOSED: [2017-06-19 Mon 10:18]

    The SQLite LIMIT clause is used to limit the data amount returned
    by the SELECT statement.

    #+BEGIN_EXAMPLE
    SELECT column1, column2, columnN
    FROM table_name
    LIMIT [no of rows]
    #+END_EXAMPLE

    #+BEGIN_EXAMPLE
    SELECT column1, column2, columnN
    FROM table_name
    LIMIT [no of rows] OFFSET [row num]
    #+END_EXAMPLE

    Examples

    #+BEGIN_SRC sqlite :db test-sqlite.db
    select * from company limit 6;
    #+END_SRC

    #+RESULTS:
    | 1 | Paul  | 32 | Texas      | 20000.0 |
    | 2 | Allen | 25 | Texas      | 20000.0 |
    | 3 | Teddy | 23 | Texas      | 20000.0 |
    | 4 | Mark  | 25 | Rich-Mond  | 20000.0 |
    | 5 | David | 27 | Texas      | 20000.0 |
    | 6 | Kim   | 22 | South-Hill | 20000.0 |


    #+BEGIN_SRC sqlite :db test-sqlite.db
    select * from company limit 5 offset 2;
    #+END_SRC

    #+RESULTS:
    | 3 | Teddy | 23 | Texas      | 20000.0 |
    | 4 | Mark  | 25 | Rich-Mond  | 20000.0 |
    | 5 | David | 27 | Texas      | 20000.0 |
    | 6 | Kim   | 22 | South-Hill | 20000.0 |
    | 7 | James | 24 | Houston    | 10000.0 |
