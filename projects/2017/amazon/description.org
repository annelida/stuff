Details

This code scrapes Amazon.com product reviews from the a single page:

' http://bit.ly/2qJl4Ol ' (link to github)

Your task is to add the following capabilities:

1. Pagination support (scrape past first/single page)
2. Process multi-threading
3. Task queue / pipeline
4. IP rotation ( API provided by http://proxymesh.com/http-client-examples/ )

We modified the original script (attached) to perform several additional functions with the data after it collects it but the scraping function is basically the same.

Please contact me if interested.

Thank you,

- Admin

Proposal:

Hi! Brief code overview disclose to me a main idea: review gathering
by product ASIN. With now doubt HTML scrapping is a challenging task
and it would require much more efforts than you're might expected.
Fortunately there are a plenty of pure Pythonic tools which should
help you to solve this task in a bit neat way:

1. Scrapy implements a sophisticated HTML web scrapping with all
required options:
 - multithreading;
 - proxificaton;
 - automation etc.

2. Exactly for convenience in gathering data about the selling
products Amazon provide a free API http://amzn.to/2r5idkO and it
habitually used by several Python frameworks:
 - https://python-amazon-product-api.readthedocs.io/en/latest/
 - etc.
 
I think that using of a free API in this case is most native (proposed
by Amazon) effective, because it is already implemented and debugged
in an existing library (python-amazon-product-api).

Thus I would glad to develop your idea in a week and 50$.

Cheers, Vikky

engineering
* TODO Amazon credentials
** TODO Studying necessary library: https://python-amazon-product-api.readthedocs.io/en/latest/
** DONE Installation python-amazon-product-api
   CLOSED: [2017-05-28 Sun 07:28]

   #+BEGIN_SRC shell :results output
   cd /home/vikky/Desktop/python-amazon-product-api/
   pip install python-amazon-product-api
   #+END_SRC
** DONE First API request
   CLOSED: [2017-05-28 Sun 07:32]
   #+BEGIN_SRC python :results output
   import amazonproduct

   config = {
    'access_key': '...', 'secret_key': '...', 'associate_tag': '...', 'locale': 'us'
}

   api = amazonproduct.API(cfg=config)
   items = api.item_search('Books', Publisher="O'Reilly")
   # get all books from result set and
   # print author and title
   for book in items:
       print '%s: "%s"' % (book.ItemAttributes.Author,
                           book.ItemAttributes.Title)
   #+END_SRC

   #+RESULTS:
   : Drew Conway: "Machine Learning for Hackers: Case Studies and Algorithms to Get You Started"
   : David Wood: "Programming Internet Email: Mastering Internet Messaging Systems"
   : Dr. Richard Elwes: "Maths 1001"
   : Reg Green: "Nicholas Effect : A Boy's Gift to the World"
   : Ken Getz: "Access Cookbook (O'Reilly Windows)"
   : Tom Christiansen: "Learning Perl, Second Edition (Nutshell Handbooks)"
** TODO Operations
   Any operation listed in the API documentation can thus be called
   with call(). To look up information on an article, one could for
   instance call ItemLookup:

   #+BEGIN_SRC python :results output
   api.call(Operation='ItemLookup', ItemId='B000080E6I')
   #+END_SRC

   Example:

   #+BEGIN_SRC python :results output
   from amazon.api import AmazonAPI
   AMAZON_ACCESS_KEY = ' '
   AMAZON_SECRET_KEY = ' '
   AMAZON_ASSOC_TAG = ' '
   amazon = AmazonAPI(AMAZON_ACCESS_KEY, AMAZON_SECRET_KEY,
                       AMAZON_ASSOC_TAG, region="US")
   product = amazon.lookup(ItemId='B00EOE0WKQ'
   print product.title
   #+END_SRC

   #+RESULTS:
   : 'Amazon Fire Phone, 32GB (AT&T)'

   Lookup and search operations

   item_search() is the operation that is used most often in requests.

   Use the search index, Toys, and the parameter, Keywords, to return
   information about all Kindle sold in by Amazon.

   #+BEGIN_SRC python :results output
   from amazon.api import AmazonAPI
   AMAZON_ACCESS_KEY = ' '
   AMAZON_SECRET_KEY = ' '
   AMAZON_ASSOC_TAG = ' '
   amazon = AmazonAPI(AMAZON_ACCESS_KEY, AMAZON_SECRET_KEY,
                       AMAZON_ASSOC_TAG, region="US")
   products = amazon.search(Keywords='kindle', SearchIndex='All')
   for i, product in enumerate(products):
       print "{0}. '{1}'".format(i, product.title)
   #+END_SRC

   #+RESULTS:
   : 0. 'Kindle Paperwhite E-reader - Black, 6" High-Resolution Display (300 ppi) with Built-in Light, Wi-Fi - Includes Special Offers'
   : 1. 'Kindle E-reader - Black, 6" Glare-Free Touchscreen Display, Wi-Fi -  Includes Special Offers'
   : 2. 'All-New Fire 7 Tablet with Alexa, 7" Display, 8 GB, Black - with Special Offers'
   : 3. 'Kindle Voyage E-reader, 6" High-Resolution Display (300 ppi) with Adaptive Built-in Light, PagePress Sensors, Wi-Fi - Includes Special Offers'
   : 4. 'Fire HD 8 Tablet with Alexa, 8" HD Display, 16 GB, Black - with Special Offers (Previous Generation - 6th)'
   : 5. 'Fire Tablet with Alexa, 7" Display, 8 GB, Black - with Special Offers (Previous Generation - 5th)'

   Reviews

   #+BEGIN_SRC python :results output
   from amazon.api import AmazonAPI
   AMAZON_ACCESS_KEY = ' '
   AMAZON_SECRET_KEY = ' '
   AMAZON_ASSOC_TAG = ' '
   amazon = AmazonAPI(AMAZON_ACCESS_KEY, AMAZON_SECRET_KEY,
                       AMAZON_ASSOC_TAG, region="US")
   product = amazon.lookup(ItemId='B00EOE0WKQ'
   print product.reviews
   #+END_SRC

   #+RESULTS:
   : (True,
   : 'https://www.amazon.com/reviews/iframe?akid=AKIAJRXZSV6WYZQHOCYQ&alinkCode=xm2&asin=B00EOE0WKQ&atag=
   : productconten-20&exp=2017-05-29T06%3A52%3A08Z&v=2&sig=S8hAtzx8vJbZpTeSRi6GJWorc5ySf513kyo9iEd%252BIcc%253D')
** TODO Security settings
   Goal - separate security data from the main code without losing its
   ability to work.
   1. Transfer the security data to a separate file like settings.py
   2. Check ability to work with import credentials from the settings.py
   3. To achieve invisibility.
** TODO Separate venv for this project
*** requirements.txt
    In order to keep your environment consistent, it’s a good idea to
    “freeze” the current state of the environment packages. To do
    this, run:

    #+BEGIN_SRC shell :results output
    pip freeze > requirements.txt
    #+END_SRC

    This will create a requirements.txt file, which contains a simple
    list of all the packages in the current environment, and their
    respective versions.

    Later it will be easier for a different developer (or you, if you
    need to re-create the environment) to install the same packages
    using the same versions:

    #+BEGIN_SRC shell :results output
    pip install -r requirements.txt
    #+END_SRC

** TODO Technical specification
   1. Project goal: data gathering product's reviews from
      http://amazon.com by ASIN using API.
   2. Data model:
      - aggregate rating;
      - product name;
      - product price
      - rating;
      - review header;
      - review posted date;
      - review text 1;
      - review text 2;
      - review comments;
      - review author;;
      - review text 3


** TODO Start collection of data

** TODO Amazon Scraper
   Create API instance
   Search:
   #+BEGIN_SRC python :results output
   from __future__ import print_function
   from amazon_scraper import AmazonScraper
   from settings import AMAZON_ACCESS_KEY, AMAZON_SECRET_KEY, AMAZON_ASSOC_TAG
   import itertools

   amzn = AmazonScraper(AMAZON_ACCWSS_KEY, AMAZON_SECRET_KEY, AMAZON_ASSOC_TAG, Region='US', MaxQPS=0.9, Timeout=5.0)
   for p in itertools.islice(amzn.search(Keywords='python', SearchIndex='Books'), 5):
       print(p.title)

   #+END_SRC

   #+RESULTS:
   : Python Crash Course: A Hands-On, Project-Based Introduction to Programming
   : Python: Programming: Your Step By Step Guide To Easily Learn Python in 7 Days (Python for Beginners, Python Programming for Beginners, Learn Python, Python Language)
   : Python Programming: An In-Depth Guide Into The Essentials Of Python Programming
   : Automate the Boring Stuff with Python: Practical Programming for Total Beginners
   : Learning Python, 5th Edition


** TODO Compose data model

